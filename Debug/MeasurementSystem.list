
MeasurementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  0800a950  0800a950  0001a950  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adec  0800adec  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800adec  0800adec  0001adec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adf4  0800adf4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adf4  0800adf4  0001adf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adf8  0800adf8  0001adf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800adfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  200001e0  0800afdc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000660  0800afdc  00020660  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020569  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bd0  00000000  00000000  00040779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  00044350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  00045778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bbdc  00000000  00000000  000469f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ad24  00000000  00000000  000725d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001096e1  00000000  00000000  0008d2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001969d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064cc  00000000  00000000  00196a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a938 	.word	0x0800a938

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a938 	.word	0x0800a938

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2uiz>:
 8000b4c:	004a      	lsls	r2, r1, #1
 8000b4e:	d211      	bcs.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d211      	bcs.n	8000b7a <__aeabi_d2uiz+0x2e>
 8000b56:	d50d      	bpl.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d40e      	bmi.n	8000b80 <__aeabi_d2uiz+0x34>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_d2uiz+0x3a>
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_uldivmod>:
 8000c2c:	b953      	cbnz	r3, 8000c44 <__aeabi_uldivmod+0x18>
 8000c2e:	b94a      	cbnz	r2, 8000c44 <__aeabi_uldivmod+0x18>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bf08      	it	eq
 8000c34:	2800      	cmpeq	r0, #0
 8000c36:	bf1c      	itt	ne
 8000c38:	f04f 31ff 	movne.w	r1, #4294967295
 8000c3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c40:	f000 b9a4 	b.w	8000f8c <__aeabi_idiv0>
 8000c44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c4c:	f000 f83c 	bl	8000cc8 <__udivmoddi4>
 8000c50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <__aeabi_d2lz>:
 8000c5c:	b538      	push	{r3, r4, r5, lr}
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2300      	movs	r3, #0
 8000c62:	4604      	mov	r4, r0
 8000c64:	460d      	mov	r5, r1
 8000c66:	f7ff ff49 	bl	8000afc <__aeabi_dcmplt>
 8000c6a:	b928      	cbnz	r0, 8000c78 <__aeabi_d2lz+0x1c>
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	4629      	mov	r1, r5
 8000c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c74:	f000 b80a 	b.w	8000c8c <__aeabi_d2ulz>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c7e:	f000 f805 	bl	8000c8c <__aeabi_d2ulz>
 8000c82:	4240      	negs	r0, r0
 8000c84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c88:	bd38      	pop	{r3, r4, r5, pc}
 8000c8a:	bf00      	nop

08000c8c <__aeabi_d2ulz>:
 8000c8c:	b5d0      	push	{r4, r6, r7, lr}
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <__aeabi_d2ulz+0x34>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	4606      	mov	r6, r0
 8000c94:	460f      	mov	r7, r1
 8000c96:	f7ff fcbf 	bl	8000618 <__aeabi_dmul>
 8000c9a:	f7ff ff57 	bl	8000b4c <__aeabi_d2uiz>
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	f7ff fc40 	bl	8000524 <__aeabi_ui2d>
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <__aeabi_d2ulz+0x38>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f7ff fcb6 	bl	8000618 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	4639      	mov	r1, r7
 8000cb4:	f7ff faf8 	bl	80002a8 <__aeabi_dsub>
 8000cb8:	f7ff ff48 	bl	8000b4c <__aeabi_d2uiz>
 8000cbc:	4621      	mov	r1, r4
 8000cbe:	bdd0      	pop	{r4, r6, r7, pc}
 8000cc0:	3df00000 	.word	0x3df00000
 8000cc4:	41f00000 	.word	0x41f00000

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <Supercluster_Init>:
//none

/*************************************** Functions **************************************************/

void Supercluster_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	  Supercluster_Data_Init_GPS();
 8000f94:	f000 f8c2 	bl	800111c <Supercluster_Data_Init_GPS>
	//  Supercluster_Data_Init_I_V();
	  Supercluster_PWM_Init();
 8000f98:	f000 fed9 	bl	8001d4e <Supercluster_PWM_Init>


}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <Supercluster_Body_Loop>:


void Supercluster_Body_Loop()
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	  Supercluster_Loop_GPS(&GPS_Measurement, &Circular_Buffer);
 8000fa4:	4913      	ldr	r1, [pc, #76]	; (8000ff4 <Supercluster_Body_Loop+0x54>)
 8000fa6:	4814      	ldr	r0, [pc, #80]	; (8000ff8 <Supercluster_Body_Loop+0x58>)
 8000fa8:	f000 fd88 	bl	8001abc <Supercluster_Loop_GPS>
	  Supercluster_Get_Data_V(&new_voltage);
 8000fac:	4813      	ldr	r0, [pc, #76]	; (8000ffc <Supercluster_Body_Loop+0x5c>)
 8000fae:	f000 fe15 	bl	8001bdc <Supercluster_Get_Data_V>
	  Supercluster_Get_Data_I(&new_current);
 8000fb2:	4813      	ldr	r0, [pc, #76]	; (8001000 <Supercluster_Body_Loop+0x60>)
 8000fb4:	f000 fdea 	bl	8001b8c <Supercluster_Get_Data_I>

	  Supercluster_PWM_Generate(1, wypelnienie);
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <Supercluster_Body_Loop+0x64>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f000 fecc 	bl	8001d5c <Supercluster_PWM_Generate>


	if(_100ms_flag == TRUE)
 8000fc4:	4b10      	ldr	r3, [pc, #64]	; (8001008 <Supercluster_Body_Loop+0x68>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d102      	bne.n	8000fd2 <Supercluster_Body_Loop+0x32>
	{
		_100ms_flag = FALSE;
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <Supercluster_Body_Loop+0x68>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
	}
	if(_500ms_flag == TRUE)
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <Supercluster_Body_Loop+0x6c>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d102      	bne.n	8000fe0 <Supercluster_Body_Loop+0x40>
	{
		_500ms_flag = FALSE;
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <Supercluster_Body_Loop+0x6c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
	}
	if(_1000ms_flag == TRUE)
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <Supercluster_Body_Loop+0x70>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d102      	bne.n	8000fee <Supercluster_Body_Loop+0x4e>
	{
		_1000ms_flag = FALSE;
 8000fe8:	4b09      	ldr	r3, [pc, #36]	; (8001010 <Supercluster_Body_Loop+0x70>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
	}
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200002ac 	.word	0x200002ac
 8000ff8:	20000214 	.word	0x20000214
 8000ffc:	200003dc 	.word	0x200003dc
 8001000:	200003e4 	.word	0x200003e4
 8001004:	200001fc 	.word	0x200001fc
 8001008:	20000210 	.word	0x20000210
 800100c:	200003e0 	.word	0x200003e0
 8001010:	200003ec 	.word	0x200003ec

08001014 <Supercluster_SysTick>:
void Supercluster_SysTick()
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
	_100ms_tick++;
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <Supercluster_SysTick+0x74>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	3301      	adds	r3, #1
 800101e:	b2da      	uxtb	r2, r3
 8001020:	4b19      	ldr	r3, [pc, #100]	; (8001088 <Supercluster_SysTick+0x74>)
 8001022:	701a      	strb	r2, [r3, #0]
	_500ms_tick++;
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <Supercluster_SysTick+0x78>)
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	3301      	adds	r3, #1
 800102a:	b29a      	uxth	r2, r3
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <Supercluster_SysTick+0x78>)
 800102e:	801a      	strh	r2, [r3, #0]
	_1000ms_tick++;
 8001030:	4b17      	ldr	r3, [pc, #92]	; (8001090 <Supercluster_SysTick+0x7c>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	3301      	adds	r3, #1
 8001036:	b29a      	uxth	r2, r3
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <Supercluster_SysTick+0x7c>)
 800103a:	801a      	strh	r2, [r3, #0]

	if(_100ms_tick >= 100)
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <Supercluster_SysTick+0x74>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b63      	cmp	r3, #99	; 0x63
 8001042:	d905      	bls.n	8001050 <Supercluster_SysTick+0x3c>
	{
		_100ms_flag = TRUE;
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <Supercluster_SysTick+0x80>)
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]
		_100ms_tick = 0;
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <Supercluster_SysTick+0x74>)
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
	}
	if(_500ms_tick >= 500)
 8001050:	4b0e      	ldr	r3, [pc, #56]	; (800108c <Supercluster_SysTick+0x78>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001058:	d305      	bcc.n	8001066 <Supercluster_SysTick+0x52>
	{
		_500ms_flag = TRUE;
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <Supercluster_SysTick+0x84>)
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]
		_500ms_tick = 0;
 8001060:	4b0a      	ldr	r3, [pc, #40]	; (800108c <Supercluster_SysTick+0x78>)
 8001062:	2200      	movs	r2, #0
 8001064:	801a      	strh	r2, [r3, #0]
	}
	if(_1000ms_tick >= 1000)
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <Supercluster_SysTick+0x7c>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800106e:	d305      	bcc.n	800107c <Supercluster_SysTick+0x68>
	{
		_1000ms_flag = TRUE;
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <Supercluster_SysTick+0x88>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
		_1000ms_tick = 0;
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <Supercluster_SysTick+0x7c>)
 8001078:	2200      	movs	r2, #0
 800107a:	801a      	strh	r2, [r3, #0]
	}

}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	200003f0 	.word	0x200003f0
 800108c:	200003ea 	.word	0x200003ea
 8001090:	200003ee 	.word	0x200003ee
 8001094:	20000210 	.word	0x20000210
 8001098:	200003e0 	.word	0x200003e0
 800109c:	200003ec 	.word	0x200003ec

080010a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	Supercluster_UART_GPS_Callback(huart);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 fd17 	bl	8001adc <Supercluster_UART_GPS_Callback>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <strtoke>:
//			Input: char *str - pointer for the string to parsing | const char *delim - character that divides string
//			Output: string between two delimiters
//
****************************************************************************************************/
char* strtoke(char *str, const char *delim)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
  /* assign new start in case */
  if (str) start = str;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <strtoke+0x1a>
 80010cc:	4a12      	ldr	r2, [pc, #72]	; (8001118 <strtoke+0x60>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6013      	str	r3, [r2, #0]
  /* check whether text to parse left */
  if (!start) return NULL;
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <strtoke+0x60>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <strtoke+0x26>
 80010da:	2300      	movs	r3, #0
 80010dc:	e017      	b.n	800110e <strtoke+0x56>
  /* remember current start as found token */
  token = start;
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <strtoke+0x60>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	60fb      	str	r3, [r7, #12]
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <strtoke+0x60>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6839      	ldr	r1, [r7, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f006 fd12 	bl	8007b14 <strpbrk>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4a09      	ldr	r2, [pc, #36]	; (8001118 <strtoke+0x60>)
 80010f4:	6013      	str	r3, [r2, #0]
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <strtoke+0x60>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d006      	beq.n	800110c <strtoke+0x54>
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <strtoke+0x60>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	4904      	ldr	r1, [pc, #16]	; (8001118 <strtoke+0x60>)
 8001106:	600a      	str	r2, [r1, #0]
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
  /* done */
  return token;
 800110c:	68fb      	ldr	r3, [r7, #12]
}//Works OK
 800110e:	4618      	mov	r0, r3
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000200 	.word	0x20000200

0800111c <Supercluster_Data_Init_GPS>:
//			Input:	-
//			Output: -
//
****************************************************************************************************/
void Supercluster_Data_Init_GPS()
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	//init global variables
	Circular_Buffer.Head = 0;
 8001120:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <Supercluster_Data_Init_GPS+0xb4>)
 8001122:	2200      	movs	r2, #0
 8001124:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	Circular_Buffer.Tail = 0;
 8001128:	4b29      	ldr	r3, [pc, #164]	; (80011d0 <Supercluster_Data_Init_GPS+0xb4>)
 800112a:	2200      	movs	r2, #0
 800112c:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	Circular_Buffer.Line = 0;
 8001130:	4b27      	ldr	r3, [pc, #156]	; (80011d0 <Supercluster_Data_Init_GPS+0xb4>)
 8001132:	2200      	movs	r2, #0
 8001134:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca

	GPS_Measurement.sec = 0;
 8001138:	4b26      	ldr	r3, [pc, #152]	; (80011d4 <Supercluster_Data_Init_GPS+0xb8>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
	GPS_Measurement.minutes = 0;
 800113e:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <Supercluster_Data_Init_GPS+0xb8>)
 8001140:	2200      	movs	r2, #0
 8001142:	709a      	strb	r2, [r3, #2]
	GPS_Measurement.hours = 0;
 8001144:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <Supercluster_Data_Init_GPS+0xb8>)
 8001146:	2200      	movs	r2, #0
 8001148:	705a      	strb	r2, [r3, #1]
	GPS_Measurement.days = 0;
 800114a:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <Supercluster_Data_Init_GPS+0xb8>)
 800114c:	2200      	movs	r2, #0
 800114e:	70da      	strb	r2, [r3, #3]
	GPS_Measurement.months = 0;
 8001150:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <Supercluster_Data_Init_GPS+0xb8>)
 8001152:	2200      	movs	r2, #0
 8001154:	711a      	strb	r2, [r3, #4]
	GPS_Measurement.years = 0;
 8001156:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <Supercluster_Data_Init_GPS+0xb8>)
 8001158:	2200      	movs	r2, #0
 800115a:	715a      	strb	r2, [r3, #5]

	GPS_Measurement.lattitude = 0;
 800115c:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <Supercluster_Data_Init_GPS+0xb8>)
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
	GPS_Measurement.longitude = 0;
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <Supercluster_Data_Init_GPS+0xb8>)
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
	GPS_Measurement.lat_direction = '-';
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <Supercluster_Data_Init_GPS+0xb8>)
 800116e:	222d      	movs	r2, #45	; 0x2d
 8001170:	731a      	strb	r2, [r3, #12]
	GPS_Measurement.long_direction = '-';
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <Supercluster_Data_Init_GPS+0xb8>)
 8001174:	222d      	movs	r2, #45	; 0x2d
 8001176:	751a      	strb	r2, [r3, #20]
	GPS_Measurement.altitude = 0;
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <Supercluster_Data_Init_GPS+0xb8>)
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	619a      	str	r2, [r3, #24]

	GPS_Measurement.vel_knots = 0;
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <Supercluster_Data_Init_GPS+0xb8>)
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	621a      	str	r2, [r3, #32]
	GPS_Measurement.vel_km = 0;
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <Supercluster_Data_Init_GPS+0xb8>)
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	625a      	str	r2, [r3, #36]	; 0x24

	GPS_Measurement.quality_FIX = 0;
 8001190:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <Supercluster_Data_Init_GPS+0xb8>)
 8001192:	2200      	movs	r2, #0
 8001194:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	GPS_Measurement.quantity_Satellites = 0;
 8001198:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <Supercluster_Data_Init_GPS+0xb8>)
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	GPS_Measurement.mode_FIX = 0;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <Supercluster_Data_Init_GPS+0xb8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	GPS_Measurement.dop = 0;
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <Supercluster_Data_Init_GPS+0xb8>)
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	62da      	str	r2, [r3, #44]	; 0x2c
	GPS_Measurement.hDop = 0;
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <Supercluster_Data_Init_GPS+0xb8>)
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	635a      	str	r2, [r3, #52]	; 0x34
	GPS_Measurement.vDop =0;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <Supercluster_Data_Init_GPS+0xb8>)
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	631a      	str	r2, [r3, #48]	; 0x30

	//init HAL
	Supercluster_UART_Receive_IT_GPS();
 80011c0:	2201      	movs	r2, #1
 80011c2:	4905      	ldr	r1, [pc, #20]	; (80011d8 <Supercluster_Data_Init_GPS+0xbc>)
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <Supercluster_Data_Init_GPS+0xc0>)
 80011c6:	f005 f9f5 	bl	80065b4 <HAL_UART_Receive_IT>
}//Works OK
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200002ac 	.word	0x200002ac
 80011d4:	20000214 	.word	0x20000214
 80011d8:	200003e8 	.word	0x200003e8
 80011dc:	20000544 	.word	0x20000544

080011e0 <Supercluster_ReceiveUartChar_GPS>:
//			Input: A pointer to structure that holds the buffer data
//			Output: -
//
****************************************************************************************************/
void Supercluster_ReceiveUartChar_GPS(GPS_buffer *buffer)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	uint8_t temp_Head;
	temp_Head = (buffer->Head + 1) % GPS_SIZE_BUFFER_RX;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80011ee:	3301      	adds	r3, #1
 80011f0:	4a23      	ldr	r2, [pc, #140]	; (8001280 <Supercluster_ReceiveUartChar_GPS+0xa0>)
 80011f2:	fb82 1203 	smull	r1, r2, r2, r3
 80011f6:	1191      	asrs	r1, r2, #6
 80011f8:	17da      	asrs	r2, r3, #31
 80011fa:	1a8a      	subs	r2, r1, r2
 80011fc:	21c8      	movs	r1, #200	; 0xc8
 80011fe:	fb01 f202 	mul.w	r2, r1, r2
 8001202:	1a9a      	subs	r2, r3, r2
 8001204:	4613      	mov	r3, r2
 8001206:	73fb      	strb	r3, [r7, #15]

	if(temp_Head == buffer->Tail)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800120e:	7bfa      	ldrb	r2, [r7, #15]
 8001210:	429a      	cmp	r2, r3
 8001212:	d02b      	beq.n	800126c <Supercluster_ReceiveUartChar_GPS+0x8c>
	{
		// lost data
	}
	else
	{
		if(GPS_ReceivedChar == 13)		// IN ASCII 13 = '/CR'
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <Supercluster_ReceiveUartChar_GPS+0xa4>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b0d      	cmp	r3, #13
 800121c:	d112      	bne.n	8001244 <Supercluster_ReceiveUartChar_GPS+0x64>
		{
			buffer->Line++;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8001224:	3301      	adds	r3, #1
 8001226:	b2da      	uxtb	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
			buffer->Head = temp_Head;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	7bfa      	ldrb	r2, [r7, #15]
 8001232:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			buffer->bufferRX[temp_Head] = GPS_ReceivedChar;
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	4a12      	ldr	r2, [pc, #72]	; (8001284 <Supercluster_ReceiveUartChar_GPS+0xa4>)
 800123a:	7812      	ldrb	r2, [r2, #0]
 800123c:	b2d1      	uxtb	r1, r2
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	54d1      	strb	r1, [r2, r3]
 8001242:	e013      	b.n	800126c <Supercluster_ReceiveUartChar_GPS+0x8c>
		}
		else if (GPS_ReceivedChar == 0 || GPS_ReceivedChar == 10 )			//IN ASCII 0 = NULL, 10 = 'LF'
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <Supercluster_ReceiveUartChar_GPS+0xa4>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00e      	beq.n	800126c <Supercluster_ReceiveUartChar_GPS+0x8c>
 800124e:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <Supercluster_ReceiveUartChar_GPS+0xa4>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b0a      	cmp	r3, #10
 8001256:	d009      	beq.n	800126c <Supercluster_ReceiveUartChar_GPS+0x8c>
		{
			//do nothing
		}
		else
		{
			buffer->Head = temp_Head;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	7bfa      	ldrb	r2, [r7, #15]
 800125c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			buffer->bufferRX[temp_Head] = GPS_ReceivedChar;
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	4a08      	ldr	r2, [pc, #32]	; (8001284 <Supercluster_ReceiveUartChar_GPS+0xa4>)
 8001264:	7812      	ldrb	r2, [r2, #0]
 8001266:	b2d1      	uxtb	r1, r2
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	54d1      	strb	r1, [r2, r3]
		}
	}

	Supercluster_UART_Receive_IT_GPS();
 800126c:	2201      	movs	r2, #1
 800126e:	4905      	ldr	r1, [pc, #20]	; (8001284 <Supercluster_ReceiveUartChar_GPS+0xa4>)
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <Supercluster_ReceiveUartChar_GPS+0xa8>)
 8001272:	f005 f99f 	bl	80065b4 <HAL_UART_Receive_IT>
}//Works OK
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	51eb851f 	.word	0x51eb851f
 8001284:	200003e8 	.word	0x200003e8
 8001288:	20000544 	.word	0x20000544

0800128c <Supercluster_GetChar_GPS>:
//			Output: The function returns an integer value representing the character from the buffer if available,
//					or -1 if there are no characters to retrieve.
//
****************************************************************************************************/
int8_t Supercluster_GetChar_GPS(GPS_buffer *buffer)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	if(buffer->Head == buffer->Tail)		return -1;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d102      	bne.n	80012aa <Supercluster_GetChar_GPS+0x1e>
 80012a4:	f04f 33ff 	mov.w	r3, #4294967295
 80012a8:	e018      	b.n	80012dc <Supercluster_GetChar_GPS+0x50>

	else
	{
		buffer->Tail = (buffer->Tail + 1) % GPS_SIZE_BUFFER_RX;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80012b0:	3301      	adds	r3, #1
 80012b2:	4a0d      	ldr	r2, [pc, #52]	; (80012e8 <Supercluster_GetChar_GPS+0x5c>)
 80012b4:	fb82 1203 	smull	r1, r2, r2, r3
 80012b8:	1191      	asrs	r1, r2, #6
 80012ba:	17da      	asrs	r2, r3, #31
 80012bc:	1a8a      	subs	r2, r1, r2
 80012be:	21c8      	movs	r1, #200	; 0xc8
 80012c0:	fb01 f202 	mul.w	r2, r1, r2
 80012c4:	1a9a      	subs	r2, r3, r2
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
		return buffer->bufferRX[buffer->Tail];
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80012d4:	461a      	mov	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	5c9b      	ldrb	r3, [r3, r2]
 80012da:	b25b      	sxtb	r3, r3
	}
}//Works OK
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	51eb851f 	.word	0x51eb851f

080012ec <Supercluster_GetLine_GPS>:
//			Input: GPS_buffer *buffer - A pointer to structure that holds the buffer data
//			Output: -
//
****************************************************************************************************/
void Supercluster_GetLine_GPS(GPS_buffer *buffer)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	char temp_Char;
	char *workingLineBuffer = (char*)buffer->buffer_Working;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	33cb      	adds	r3, #203	; 0xcb
 80012f8:	60fb      	str	r3, [r7, #12]

	if(buffer->Line)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8001300:	2b00      	cmp	r3, #0
 8001302:	d01e      	beq.n	8001342 <Supercluster_GetLine_GPS+0x56>
	{
		while((temp_Char = Supercluster_GetChar_GPS(buffer)))
 8001304:	e008      	b.n	8001318 <Supercluster_GetLine_GPS+0x2c>
		{
			if(temp_Char == 13 ) break;
 8001306:	7afb      	ldrb	r3, [r7, #11]
 8001308:	2b0d      	cmp	r3, #13
 800130a:	d00e      	beq.n	800132a <Supercluster_GetLine_GPS+0x3e>

			*workingLineBuffer = temp_Char;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	7afa      	ldrb	r2, [r7, #11]
 8001310:	701a      	strb	r2, [r3, #0]
			workingLineBuffer++;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	3301      	adds	r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
		while((temp_Char = Supercluster_GetChar_GPS(buffer)))
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ffb7 	bl	800128c <Supercluster_GetChar_GPS>
 800131e:	4603      	mov	r3, r0
 8001320:	72fb      	strb	r3, [r7, #11]
 8001322:	7afb      	ldrb	r3, [r7, #11]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1ee      	bne.n	8001306 <Supercluster_GetLine_GPS+0x1a>
 8001328:	e000      	b.n	800132c <Supercluster_GetLine_GPS+0x40>
			if(temp_Char == 13 ) break;
 800132a:	bf00      	nop
		}
		*workingLineBuffer = 0;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
		buffer->Line--;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8001338:	3b01      	subs	r3, #1
 800133a:	b2da      	uxtb	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	}
}//Works OK
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <Supercluster_ParseNMEA_GPRMC>:
//			Input: GPS_Data *data  - A pointer to structure that will hold the GPS data
//			Output: -
//
****************************************************************************************************/
void Supercluster_ParseNMEA_GPRMC(GPS_Data *data)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	char *ParseData;
	uint32_t temp_Data;

	//Time UTC
	ParseData = strtoke(NULL, ",");
 8001354:	4980      	ldr	r1, [pc, #512]	; (8001558 <Supercluster_ParseNMEA_GPRMC+0x20c>)
 8001356:	2000      	movs	r0, #0
 8001358:	f7ff feae 	bl	80010b8 <strtoke>
 800135c:	60f8      	str	r0, [r7, #12]
	if(strlen(ParseData) > 0)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d030      	beq.n	80013c8 <Supercluster_ParseNMEA_GPRMC+0x7c>
	{
		temp_Data = atoi(ParseData);
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f006 fb90 	bl	8007a8c <atoi>
 800136c:	4603      	mov	r3, r0
 800136e:	60bb      	str	r3, [r7, #8]
		data->sec 		= temp_Data % 100;
 8001370:	68ba      	ldr	r2, [r7, #8]
 8001372:	4b7a      	ldr	r3, [pc, #488]	; (800155c <Supercluster_ParseNMEA_GPRMC+0x210>)
 8001374:	fba3 1302 	umull	r1, r3, r3, r2
 8001378:	095b      	lsrs	r3, r3, #5
 800137a:	2164      	movs	r1, #100	; 0x64
 800137c:	fb01 f303 	mul.w	r3, r1, r3
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	b2da      	uxtb	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	701a      	strb	r2, [r3, #0]
		data->minutes 	= (temp_Data/100)  % 100;
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	4a74      	ldr	r2, [pc, #464]	; (800155c <Supercluster_ParseNMEA_GPRMC+0x210>)
 800138c:	fba2 2303 	umull	r2, r3, r2, r3
 8001390:	095a      	lsrs	r2, r3, #5
 8001392:	4b72      	ldr	r3, [pc, #456]	; (800155c <Supercluster_ParseNMEA_GPRMC+0x210>)
 8001394:	fba3 1302 	umull	r1, r3, r3, r2
 8001398:	095b      	lsrs	r3, r3, #5
 800139a:	2164      	movs	r1, #100	; 0x64
 800139c:	fb01 f303 	mul.w	r3, r1, r3
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	709a      	strb	r2, [r3, #2]
		data->hours		= (temp_Data/10000) % 100;
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	4a6d      	ldr	r2, [pc, #436]	; (8001560 <Supercluster_ParseNMEA_GPRMC+0x214>)
 80013ac:	fba2 2303 	umull	r2, r3, r2, r3
 80013b0:	0b5a      	lsrs	r2, r3, #13
 80013b2:	4b6a      	ldr	r3, [pc, #424]	; (800155c <Supercluster_ParseNMEA_GPRMC+0x210>)
 80013b4:	fba3 1302 	umull	r1, r3, r3, r2
 80013b8:	095b      	lsrs	r3, r3, #5
 80013ba:	2164      	movs	r1, #100	; 0x64
 80013bc:	fb01 f303 	mul.w	r3, r1, r3
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	705a      	strb	r2, [r3, #1]
	}

	// validity - A-ok, V-invalid
	ParseData = strtoke(NULL, ",");
 80013c8:	4963      	ldr	r1, [pc, #396]	; (8001558 <Supercluster_ParseNMEA_GPRMC+0x20c>)
 80013ca:	2000      	movs	r0, #0
 80013cc:	f7ff fe74 	bl	80010b8 <strtoke>
 80013d0:	60f8      	str	r0, [r7, #12]

	//Latitude
	ParseData = strtoke(NULL, ",");
 80013d2:	4961      	ldr	r1, [pc, #388]	; (8001558 <Supercluster_ParseNMEA_GPRMC+0x20c>)
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff fe6f 	bl	80010b8 <strtoke>
 80013da:	60f8      	str	r0, [r7, #12]
	if(strlen(ParseData) > 0)  		data->lattitude = atof(ParseData);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d00b      	beq.n	80013fc <Supercluster_ParseNMEA_GPRMC+0xb0>
 80013e4:	68f8      	ldr	r0, [r7, #12]
 80013e6:	f006 fb4e 	bl	8007a86 <atof>
 80013ea:	ec53 2b10 	vmov	r2, r3, d0
 80013ee:	4610      	mov	r0, r2
 80013f0:	4619      	mov	r1, r3
 80013f2:	f7ff fbcb 	bl	8000b8c <__aeabi_d2f>
 80013f6:	4602      	mov	r2, r0
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	609a      	str	r2, [r3, #8]

	//Latitude direction North/South
	ParseData = strtoke(NULL, ",");
 80013fc:	4956      	ldr	r1, [pc, #344]	; (8001558 <Supercluster_ParseNMEA_GPRMC+0x20c>)
 80013fe:	2000      	movs	r0, #0
 8001400:	f7ff fe5a 	bl	80010b8 <strtoke>
 8001404:	60f8      	str	r0, [r7, #12]
	if(strlen(ParseData) > 0)  		data->lat_direction = *ParseData;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <Supercluster_ParseNMEA_GPRMC+0xca>
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	781a      	ldrb	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	731a      	strb	r2, [r3, #12]

	//Longitude
	ParseData = strtoke(NULL, ",");
 8001416:	4950      	ldr	r1, [pc, #320]	; (8001558 <Supercluster_ParseNMEA_GPRMC+0x20c>)
 8001418:	2000      	movs	r0, #0
 800141a:	f7ff fe4d 	bl	80010b8 <strtoke>
 800141e:	60f8      	str	r0, [r7, #12]
	if(strlen(ParseData) > 0)  		data->longitude = atof(ParseData);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00b      	beq.n	8001440 <Supercluster_ParseNMEA_GPRMC+0xf4>
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f006 fb2c 	bl	8007a86 <atof>
 800142e:	ec53 2b10 	vmov	r2, r3, d0
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	f7ff fba9 	bl	8000b8c <__aeabi_d2f>
 800143a:	4602      	mov	r2, r0
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	611a      	str	r2, [r3, #16]

	//Latitude direction North/South
	ParseData = strtoke(NULL, ",");
 8001440:	4945      	ldr	r1, [pc, #276]	; (8001558 <Supercluster_ParseNMEA_GPRMC+0x20c>)
 8001442:	2000      	movs	r0, #0
 8001444:	f7ff fe38 	bl	80010b8 <strtoke>
 8001448:	60f8      	str	r0, [r7, #12]
	if(strlen(ParseData) > 0)  		data->long_direction = *ParseData;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <Supercluster_ParseNMEA_GPRMC+0x10e>
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	781a      	ldrb	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	751a      	strb	r2, [r3, #20]

	//Speed in knots
	ParseData = strtoke(NULL, ",");
 800145a:	493f      	ldr	r1, [pc, #252]	; (8001558 <Supercluster_ParseNMEA_GPRMC+0x20c>)
 800145c:	2000      	movs	r0, #0
 800145e:	f7ff fe2b 	bl	80010b8 <strtoke>
 8001462:	60f8      	str	r0, [r7, #12]
	if(strlen(ParseData) > 0)  		data->vel_knots = atof(ParseData);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00b      	beq.n	8001484 <Supercluster_ParseNMEA_GPRMC+0x138>
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f006 fb0a 	bl	8007a86 <atof>
 8001472:	ec53 2b10 	vmov	r2, r3, d0
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	f7ff fb87 	bl	8000b8c <__aeabi_d2f>
 800147e:	4602      	mov	r2, r0
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	621a      	str	r2, [r3, #32]

	//Speed in km/h
	ParseData = strtoke(NULL, ",");
 8001484:	4934      	ldr	r1, [pc, #208]	; (8001558 <Supercluster_ParseNMEA_GPRMC+0x20c>)
 8001486:	2000      	movs	r0, #0
 8001488:	f7ff fe16 	bl	80010b8 <strtoke>
 800148c:	60f8      	str	r0, [r7, #12]
	if(strlen(ParseData) > 0)  		data->vel_km = atof(ParseData);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d00b      	beq.n	80014ae <Supercluster_ParseNMEA_GPRMC+0x162>
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f006 faf5 	bl	8007a86 <atof>
 800149c:	ec53 2b10 	vmov	r2, r3, d0
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	f7ff fb72 	bl	8000b8c <__aeabi_d2f>
 80014a8:	4602      	mov	r2, r0
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24

	//True course
	ParseData = strtoke(NULL, ",");
 80014ae:	492a      	ldr	r1, [pc, #168]	; (8001558 <Supercluster_ParseNMEA_GPRMC+0x20c>)
 80014b0:	2000      	movs	r0, #0
 80014b2:	f7ff fe01 	bl	80010b8 <strtoke>
 80014b6:	60f8      	str	r0, [r7, #12]
	if(strlen(ParseData) > 0)  		data->True_course = atof(ParseData);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00b      	beq.n	80014d8 <Supercluster_ParseNMEA_GPRMC+0x18c>
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f006 fae0 	bl	8007a86 <atof>
 80014c6:	ec53 2b10 	vmov	r2, r3, d0
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fb5d 	bl	8000b8c <__aeabi_d2f>
 80014d2:	4602      	mov	r2, r0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	61da      	str	r2, [r3, #28]

	//date
	ParseData = strtoke(NULL, ",");
 80014d8:	491f      	ldr	r1, [pc, #124]	; (8001558 <Supercluster_ParseNMEA_GPRMC+0x20c>)
 80014da:	2000      	movs	r0, #0
 80014dc:	f7ff fdec 	bl	80010b8 <strtoke>
 80014e0:	60f8      	str	r0, [r7, #12]
	if(strlen(ParseData) > 0)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d032      	beq.n	8001550 <Supercluster_ParseNMEA_GPRMC+0x204>
	{
		temp_Data = atoi(ParseData);
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f006 face 	bl	8007a8c <atoi>
 80014f0:	4603      	mov	r3, r0
 80014f2:	60bb      	str	r3, [r7, #8]
		data->years = 	(temp_Data % 100) + 2000;
 80014f4:	68ba      	ldr	r2, [r7, #8]
 80014f6:	4b19      	ldr	r3, [pc, #100]	; (800155c <Supercluster_ParseNMEA_GPRMC+0x210>)
 80014f8:	fba3 1302 	umull	r1, r3, r3, r2
 80014fc:	095b      	lsrs	r3, r3, #5
 80014fe:	2164      	movs	r1, #100	; 0x64
 8001500:	fb01 f303 	mul.w	r3, r1, r3
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	3b30      	subs	r3, #48	; 0x30
 800150a:	b2da      	uxtb	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	715a      	strb	r2, [r3, #5]
		data->months = 	(temp_Data/100) 	%100;
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	4a12      	ldr	r2, [pc, #72]	; (800155c <Supercluster_ParseNMEA_GPRMC+0x210>)
 8001514:	fba2 2303 	umull	r2, r3, r2, r3
 8001518:	095a      	lsrs	r2, r3, #5
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <Supercluster_ParseNMEA_GPRMC+0x210>)
 800151c:	fba3 1302 	umull	r1, r3, r3, r2
 8001520:	095b      	lsrs	r3, r3, #5
 8001522:	2164      	movs	r1, #100	; 0x64
 8001524:	fb01 f303 	mul.w	r3, r1, r3
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	b2da      	uxtb	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	711a      	strb	r2, [r3, #4]
		data->days = 	(temp_Data/10000)	%100;
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	4a0b      	ldr	r2, [pc, #44]	; (8001560 <Supercluster_ParseNMEA_GPRMC+0x214>)
 8001534:	fba2 2303 	umull	r2, r3, r2, r3
 8001538:	0b5a      	lsrs	r2, r3, #13
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <Supercluster_ParseNMEA_GPRMC+0x210>)
 800153c:	fba3 1302 	umull	r1, r3, r3, r2
 8001540:	095b      	lsrs	r3, r3, #5
 8001542:	2164      	movs	r1, #100	; 0x64
 8001544:	fb01 f303 	mul.w	r3, r1, r3
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	b2da      	uxtb	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	70da      	strb	r2, [r3, #3]
	/*
	   10  004.2      Variation
	   11  W          East/West
	   12  *70        checksum
	 */
}//Works OK
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	0800a950 	.word	0x0800a950
 800155c:	51eb851f 	.word	0x51eb851f
 8001560:	d1b71759 	.word	0xd1b71759

08001564 <Supercluster_ParseNMEA_GPGGA>:
//			Input: GPS_Data *data  - A pointer to structure that will hold the GPS data
//			Output: -
//
****************************************************************************************************/
void Supercluster_ParseNMEA_GPGGA(GPS_Data *data)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]

	char *ParseData;
	uint32_t temp_Data;

	//****************Time UTC*********************
	ParseData = strtoke(NULL, ",");
 800156c:	4969      	ldr	r1, [pc, #420]	; (8001714 <Supercluster_ParseNMEA_GPGGA+0x1b0>)
 800156e:	2000      	movs	r0, #0
 8001570:	f7ff fda2 	bl	80010b8 <strtoke>
 8001574:	60f8      	str	r0, [r7, #12]
	if(strlen(ParseData) > 0)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d030      	beq.n	80015e0 <Supercluster_ParseNMEA_GPGGA+0x7c>
	{
		temp_Data 		= atoi(ParseData);
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f006 fa84 	bl	8007a8c <atoi>
 8001584:	4603      	mov	r3, r0
 8001586:	60bb      	str	r3, [r7, #8]
		data->sec 		= temp_Data % 100;
 8001588:	68ba      	ldr	r2, [r7, #8]
 800158a:	4b63      	ldr	r3, [pc, #396]	; (8001718 <Supercluster_ParseNMEA_GPGGA+0x1b4>)
 800158c:	fba3 1302 	umull	r1, r3, r3, r2
 8001590:	095b      	lsrs	r3, r3, #5
 8001592:	2164      	movs	r1, #100	; 0x64
 8001594:	fb01 f303 	mul.w	r3, r1, r3
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	b2da      	uxtb	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	701a      	strb	r2, [r3, #0]
		data->minutes 	= (temp_Data/100)  % 100;
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	4a5d      	ldr	r2, [pc, #372]	; (8001718 <Supercluster_ParseNMEA_GPGGA+0x1b4>)
 80015a4:	fba2 2303 	umull	r2, r3, r2, r3
 80015a8:	095a      	lsrs	r2, r3, #5
 80015aa:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <Supercluster_ParseNMEA_GPGGA+0x1b4>)
 80015ac:	fba3 1302 	umull	r1, r3, r3, r2
 80015b0:	095b      	lsrs	r3, r3, #5
 80015b2:	2164      	movs	r1, #100	; 0x64
 80015b4:	fb01 f303 	mul.w	r3, r1, r3
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	709a      	strb	r2, [r3, #2]
		data->hours		= (temp_Data/10000) % 100;
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	4a56      	ldr	r2, [pc, #344]	; (800171c <Supercluster_ParseNMEA_GPGGA+0x1b8>)
 80015c4:	fba2 2303 	umull	r2, r3, r2, r3
 80015c8:	0b5a      	lsrs	r2, r3, #13
 80015ca:	4b53      	ldr	r3, [pc, #332]	; (8001718 <Supercluster_ParseNMEA_GPGGA+0x1b4>)
 80015cc:	fba3 1302 	umull	r1, r3, r3, r2
 80015d0:	095b      	lsrs	r3, r3, #5
 80015d2:	2164      	movs	r1, #100	; 0x64
 80015d4:	fb01 f303 	mul.w	r3, r1, r3
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	705a      	strb	r2, [r3, #1]
	}

	//****************Latitude*********************
	ParseData = strtoke(NULL, ",");
 80015e0:	494c      	ldr	r1, [pc, #304]	; (8001714 <Supercluster_ParseNMEA_GPGGA+0x1b0>)
 80015e2:	2000      	movs	r0, #0
 80015e4:	f7ff fd68 	bl	80010b8 <strtoke>
 80015e8:	60f8      	str	r0, [r7, #12]
	if(strlen(ParseData) > 0) data->lattitude = atof(ParseData);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00b      	beq.n	800160a <Supercluster_ParseNMEA_GPGGA+0xa6>
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f006 fa47 	bl	8007a86 <atof>
 80015f8:	ec53 2b10 	vmov	r2, r3, d0
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff fac4 	bl	8000b8c <__aeabi_d2f>
 8001604:	4602      	mov	r2, r0
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	609a      	str	r2, [r3, #8]

	//****************Latitude N or S**************
	ParseData = strtoke(NULL, ",");
 800160a:	4942      	ldr	r1, [pc, #264]	; (8001714 <Supercluster_ParseNMEA_GPGGA+0x1b0>)
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff fd53 	bl	80010b8 <strtoke>
 8001612:	60f8      	str	r0, [r7, #12]
	if(strlen(ParseData) > 0) data->lat_direction = *ParseData;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <Supercluster_ParseNMEA_GPGGA+0xc0>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	781a      	ldrb	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	731a      	strb	r2, [r3, #12]

	//****************Longitude*********************
	ParseData = strtoke(NULL, ",");
 8001624:	493b      	ldr	r1, [pc, #236]	; (8001714 <Supercluster_ParseNMEA_GPGGA+0x1b0>)
 8001626:	2000      	movs	r0, #0
 8001628:	f7ff fd46 	bl	80010b8 <strtoke>
 800162c:	60f8      	str	r0, [r7, #12]
	if(strlen(ParseData) > 0) data->longitude = atof(ParseData);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00b      	beq.n	800164e <Supercluster_ParseNMEA_GPGGA+0xea>
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f006 fa25 	bl	8007a86 <atof>
 800163c:	ec53 2b10 	vmov	r2, r3, d0
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	f7ff faa2 	bl	8000b8c <__aeabi_d2f>
 8001648:	4602      	mov	r2, r0
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	611a      	str	r2, [r3, #16]

	//****************Longitude E or W**************
	ParseData = strtoke(NULL, ",");
 800164e:	4931      	ldr	r1, [pc, #196]	; (8001714 <Supercluster_ParseNMEA_GPGGA+0x1b0>)
 8001650:	2000      	movs	r0, #0
 8001652:	f7ff fd31 	bl	80010b8 <strtoke>
 8001656:	60f8      	str	r0, [r7, #12]
	if(strlen(ParseData) > 0) data->long_direction = *ParseData;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <Supercluster_ParseNMEA_GPGGA+0x104>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	781a      	ldrb	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	751a      	strb	r2, [r3, #20]

	//*****GPS quality indicator (0=invalid; 1=GPS fix; 2=Diff. GPS fix)
	ParseData = strtoke(NULL, ",");
 8001668:	492a      	ldr	r1, [pc, #168]	; (8001714 <Supercluster_ParseNMEA_GPGGA+0x1b0>)
 800166a:	2000      	movs	r0, #0
 800166c:	f7ff fd24 	bl	80010b8 <strtoke>
 8001670:	60f8      	str	r0, [r7, #12]
	if(strlen(ParseData) > 0) data->quality_FIX = atoi(ParseData);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d007      	beq.n	800168a <Supercluster_ParseNMEA_GPGGA+0x126>
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f006 fa06 	bl	8007a8c <atoi>
 8001680:	4603      	mov	r3, r0
 8001682:	b2da      	uxtb	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	//*****Number of satellites in use [not those in view]
	ParseData = strtoke(NULL, ",");
 800168a:	4922      	ldr	r1, [pc, #136]	; (8001714 <Supercluster_ParseNMEA_GPGGA+0x1b0>)
 800168c:	2000      	movs	r0, #0
 800168e:	f7ff fd13 	bl	80010b8 <strtoke>
 8001692:	60f8      	str	r0, [r7, #12]
	if(strlen(ParseData) > 0) data->quantity_Satellites = atoi(ParseData);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d007      	beq.n	80016ac <Supercluster_ParseNMEA_GPGGA+0x148>
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f006 f9f5 	bl	8007a8c <atoi>
 80016a2:	4603      	mov	r3, r0
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	//***** Horizontal Dilution of Precision (HDOP)
	ParseData = strtoke(NULL, ",");
 80016ac:	4919      	ldr	r1, [pc, #100]	; (8001714 <Supercluster_ParseNMEA_GPGGA+0x1b0>)
 80016ae:	2000      	movs	r0, #0
 80016b0:	f7ff fd02 	bl	80010b8 <strtoke>
 80016b4:	60f8      	str	r0, [r7, #12]
	if(strlen(ParseData) > 0) data->hDop= atof(ParseData);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00b      	beq.n	80016d6 <Supercluster_ParseNMEA_GPGGA+0x172>
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f006 f9e1 	bl	8007a86 <atof>
 80016c4:	ec53 2b10 	vmov	r2, r3, d0
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	f7ff fa5e 	bl	8000b8c <__aeabi_d2f>
 80016d0:	4602      	mov	r2, r0
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	635a      	str	r2, [r3, #52]	; 0x34

	//*****Antenna altitude above/below mean sea level (geoid)
	ParseData = strtoke(NULL, ",");
 80016d6:	490f      	ldr	r1, [pc, #60]	; (8001714 <Supercluster_ParseNMEA_GPGGA+0x1b0>)
 80016d8:	2000      	movs	r0, #0
 80016da:	f7ff fced 	bl	80010b8 <strtoke>
 80016de:	60f8      	str	r0, [r7, #12]
	if(strlen(ParseData) > 0) data->altitude= atof(ParseData);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00b      	beq.n	8001700 <Supercluster_ParseNMEA_GPGGA+0x19c>
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f006 f9cc 	bl	8007a86 <atof>
 80016ee:	ec53 2b10 	vmov	r2, r3, d0
 80016f2:	4610      	mov	r0, r2
 80016f4:	4619      	mov	r1, r3
 80016f6:	f7ff fa49 	bl	8000b8c <__aeabi_d2f>
 80016fa:	4602      	mov	r2, r0
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	619a      	str	r2, [r3, #24]

	//*******Height of geoid above WGS84 ellipsoid

	ParseData = strtoke(NULL, ",");
 8001700:	4904      	ldr	r1, [pc, #16]	; (8001714 <Supercluster_ParseNMEA_GPGGA+0x1b0>)
 8001702:	2000      	movs	r0, #0
 8001704:	f7ff fcd8 	bl	80010b8 <strtoke>
 8001708:	60f8      	str	r0, [r7, #12]

	//13   = Age in seconds since last update from diff. reference station
	//14   = Diff. reference station ID#
	//15   = Checksum

}//Works OK
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	0800a950 	.word	0x0800a950
 8001718:	51eb851f 	.word	0x51eb851f
 800171c:	d1b71759 	.word	0xd1b71759

08001720 <Supercluster_ParseNMEA_GPGSV>:
//			Input: GPS_Data *data  - A pointer to structure that will hold the GPS data
//			Output: -
//
****************************************************************************************************/
void Supercluster_ParseNMEA_GPGSV(GPS_Data *data)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

	char *ParseData;
	uint8_t msg_number;

	//1    = Total number of messages of this type in this cycle
	ParseData = strtoke(NULL, ",");
 8001728:	49b2      	ldr	r1, [pc, #712]	; (80019f4 <Supercluster_ParseNMEA_GPGSV+0x2d4>)
 800172a:	2000      	movs	r0, #0
 800172c:	f7ff fcc4 	bl	80010b8 <strtoke>
 8001730:	60b8      	str	r0, [r7, #8]
	if(strlen(ParseData) > 0) ;

	//2    = Message number
	ParseData = strtoke(NULL, ",");
 8001732:	49b0      	ldr	r1, [pc, #704]	; (80019f4 <Supercluster_ParseNMEA_GPGSV+0x2d4>)
 8001734:	2000      	movs	r0, #0
 8001736:	f7ff fcbf 	bl	80010b8 <strtoke>
 800173a:	60b8      	str	r0, [r7, #8]
	if(strlen(ParseData) > 0) msg_number = atoi(ParseData);
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d004      	beq.n	800174e <Supercluster_ParseNMEA_GPGSV+0x2e>
 8001744:	68b8      	ldr	r0, [r7, #8]
 8001746:	f006 f9a1 	bl	8007a8c <atoi>
 800174a:	4603      	mov	r3, r0
 800174c:	73fb      	strb	r3, [r7, #15]

	//3    = Total number of SVs in view
	ParseData = strtoke(NULL, ",");
 800174e:	49a9      	ldr	r1, [pc, #676]	; (80019f4 <Supercluster_ParseNMEA_GPGSV+0x2d4>)
 8001750:	2000      	movs	r0, #0
 8001752:	f7ff fcb1 	bl	80010b8 <strtoke>
 8001756:	60b8      	str	r0, [r7, #8]
	if(strlen(ParseData) > 0) data->satellites_inView = atoi(ParseData);
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d007      	beq.n	8001770 <Supercluster_ParseNMEA_GPGSV+0x50>
 8001760:	68b8      	ldr	r0, [r7, #8]
 8001762:	f006 f993 	bl	8007a8c <atoi>
 8001766:	4603      	mov	r3, r0
 8001768:	b2da      	uxtb	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	//4    = SV PRN number
	ParseData = strtoke(NULL, ",");
 8001770:	49a0      	ldr	r1, [pc, #640]	; (80019f4 <Supercluster_ParseNMEA_GPGSV+0x2d4>)
 8001772:	2000      	movs	r0, #0
 8001774:	f7ff fca0 	bl	80010b8 <strtoke>
 8001778:	60b8      	str	r0, [r7, #8]
	if(strlen(ParseData) > 0)					data->SV_PRN_number[(msg_number-1)*4] = atoi(ParseData);
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00c      	beq.n	800179c <Supercluster_ParseNMEA_GPGSV+0x7c>
 8001782:	68b8      	ldr	r0, [r7, #8]
 8001784:	f006 f982 	bl	8007a8c <atoi>
 8001788:	4602      	mov	r2, r0
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	3b01      	subs	r3, #1
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	b2d1      	uxtb	r1, r2
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	460a      	mov	r2, r1
 8001798:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	//5    = Elevation in degrees, 90 maximum
	ParseData = strtoke(NULL, ",");
 800179c:	4995      	ldr	r1, [pc, #596]	; (80019f4 <Supercluster_ParseNMEA_GPGSV+0x2d4>)
 800179e:	2000      	movs	r0, #0
 80017a0:	f7ff fc8a 	bl	80010b8 <strtoke>
 80017a4:	60b8      	str	r0, [r7, #8]
	if(strlen(ParseData) > 0)					data->elevation[(msg_number-1)*4] = atoi(ParseData);
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00c      	beq.n	80017c8 <Supercluster_ParseNMEA_GPGSV+0xa8>
 80017ae:	68b8      	ldr	r0, [r7, #8]
 80017b0:	f006 f96c 	bl	8007a8c <atoi>
 80017b4:	4602      	mov	r2, r0
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	3b01      	subs	r3, #1
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	b2d1      	uxtb	r1, r2
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	460a      	mov	r2, r1
 80017c4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	//6    = Azimuth, degrees from true north, 000 to 359
	ParseData = strtoke(NULL, ",");
 80017c8:	498a      	ldr	r1, [pc, #552]	; (80019f4 <Supercluster_ParseNMEA_GPGSV+0x2d4>)
 80017ca:	2000      	movs	r0, #0
 80017cc:	f7ff fc74 	bl	80010b8 <strtoke>
 80017d0:	60b8      	str	r0, [r7, #8]
	if(strlen(ParseData) > 0) 					data->azimuth[(msg_number-1)*4] = atoi(ParseData);
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00c      	beq.n	80017f4 <Supercluster_ParseNMEA_GPGSV+0xd4>
 80017da:	68b8      	ldr	r0, [r7, #8]
 80017dc:	f006 f956 	bl	8007a8c <atoi>
 80017e0:	4602      	mov	r2, r0
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	b2d1      	uxtb	r1, r2
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	460a      	mov	r2, r1
 80017f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	//7    = SNR, 00-99 dB (null when not tracking)
	ParseData = strtoke(NULL, ",");
 80017f4:	497f      	ldr	r1, [pc, #508]	; (80019f4 <Supercluster_ParseNMEA_GPGSV+0x2d4>)
 80017f6:	2000      	movs	r0, #0
 80017f8:	f7ff fc5e 	bl	80010b8 <strtoke>
 80017fc:	60b8      	str	r0, [r7, #8]
	if(strlen(ParseData) > 0)					data->SNR[(msg_number-1)*4] = atoi(ParseData);
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00c      	beq.n	8001820 <Supercluster_ParseNMEA_GPGSV+0x100>
 8001806:	68b8      	ldr	r0, [r7, #8]
 8001808:	f006 f940 	bl	8007a8c <atoi>
 800180c:	4602      	mov	r2, r0
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	3b01      	subs	r3, #1
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	b2d1      	uxtb	r1, r2
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	4413      	add	r3, r2
 800181a:	460a      	mov	r2, r1
 800181c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	//8-11 = Information about second SV, same as field 4-7
	// 8 = SV PRN number
	ParseData = strtoke(NULL, ",");
 8001820:	4974      	ldr	r1, [pc, #464]	; (80019f4 <Supercluster_ParseNMEA_GPGSV+0x2d4>)
 8001822:	2000      	movs	r0, #0
 8001824:	f7ff fc48 	bl	80010b8 <strtoke>
 8001828:	60b8      	str	r0, [r7, #8]
	if(strlen(ParseData) > 0)					data->SV_PRN_number[(msg_number-1)*4 + 1] = atoi(ParseData);
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00d      	beq.n	800184e <Supercluster_ParseNMEA_GPGSV+0x12e>
 8001832:	68b8      	ldr	r0, [r7, #8]
 8001834:	f006 f92a 	bl	8007a8c <atoi>
 8001838:	4602      	mov	r2, r0
 800183a:	7bfb      	ldrb	r3, [r7, #15]
 800183c:	3b01      	subs	r3, #1
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	3301      	adds	r3, #1
 8001842:	b2d1      	uxtb	r1, r2
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	4413      	add	r3, r2
 8001848:	460a      	mov	r2, r1
 800184a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	//9    = Elevation in degrees, 90 maximum
	ParseData = strtoke(NULL, ",");
 800184e:	4969      	ldr	r1, [pc, #420]	; (80019f4 <Supercluster_ParseNMEA_GPGSV+0x2d4>)
 8001850:	2000      	movs	r0, #0
 8001852:	f7ff fc31 	bl	80010b8 <strtoke>
 8001856:	60b8      	str	r0, [r7, #8]
	if(strlen(ParseData) > 0) 					data->elevation[(msg_number-1)*4 + 1] = atoi(ParseData);
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00d      	beq.n	800187c <Supercluster_ParseNMEA_GPGSV+0x15c>
 8001860:	68b8      	ldr	r0, [r7, #8]
 8001862:	f006 f913 	bl	8007a8c <atoi>
 8001866:	4602      	mov	r2, r0
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	3b01      	subs	r3, #1
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	3301      	adds	r3, #1
 8001870:	b2d1      	uxtb	r1, r2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	460a      	mov	r2, r1
 8001878:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	//10    = Azimuth, degrees from true north, 000 to 359
	ParseData = strtoke(NULL, ",");
 800187c:	495d      	ldr	r1, [pc, #372]	; (80019f4 <Supercluster_ParseNMEA_GPGSV+0x2d4>)
 800187e:	2000      	movs	r0, #0
 8001880:	f7ff fc1a 	bl	80010b8 <strtoke>
 8001884:	60b8      	str	r0, [r7, #8]
	if(strlen(ParseData) > 0)					data->azimuth[(msg_number-1)*4 + 1] = atoi(ParseData);
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00d      	beq.n	80018aa <Supercluster_ParseNMEA_GPGSV+0x18a>
 800188e:	68b8      	ldr	r0, [r7, #8]
 8001890:	f006 f8fc 	bl	8007a8c <atoi>
 8001894:	4602      	mov	r2, r0
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	3b01      	subs	r3, #1
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	3301      	adds	r3, #1
 800189e:	b2d1      	uxtb	r1, r2
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	4413      	add	r3, r2
 80018a4:	460a      	mov	r2, r1
 80018a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	//11    = SNR, 00-99 dB (null when not tracking)
	ParseData = strtoke(NULL, ",");
 80018aa:	4952      	ldr	r1, [pc, #328]	; (80019f4 <Supercluster_ParseNMEA_GPGSV+0x2d4>)
 80018ac:	2000      	movs	r0, #0
 80018ae:	f7ff fc03 	bl	80010b8 <strtoke>
 80018b2:	60b8      	str	r0, [r7, #8]
	if(strlen(ParseData) > 0)					data->SNR[(msg_number-1)*4 + 1] = atoi(ParseData);
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00d      	beq.n	80018d8 <Supercluster_ParseNMEA_GPGSV+0x1b8>
 80018bc:	68b8      	ldr	r0, [r7, #8]
 80018be:	f006 f8e5 	bl	8007a8c <atoi>
 80018c2:	4602      	mov	r2, r0
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	3301      	adds	r3, #1
 80018cc:	b2d1      	uxtb	r1, r2
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	460a      	mov	r2, r1
 80018d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	// 12-15= Information about third SV, same as field 4-7
	//12 = SV PRN number
	ParseData = strtoke(NULL, ",");
 80018d8:	4946      	ldr	r1, [pc, #280]	; (80019f4 <Supercluster_ParseNMEA_GPGSV+0x2d4>)
 80018da:	2000      	movs	r0, #0
 80018dc:	f7ff fbec 	bl	80010b8 <strtoke>
 80018e0:	60b8      	str	r0, [r7, #8]
	if(strlen(ParseData) > 0)					data->SV_PRN_number[msg_number*4 - 2] = atoi(ParseData);
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00c      	beq.n	8001904 <Supercluster_ParseNMEA_GPGSV+0x1e4>
 80018ea:	68b8      	ldr	r0, [r7, #8]
 80018ec:	f006 f8ce 	bl	8007a8c <atoi>
 80018f0:	4602      	mov	r2, r0
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	3b02      	subs	r3, #2
 80018f8:	b2d1      	uxtb	r1, r2
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	460a      	mov	r2, r1
 8001900:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	//13    = Elevation in degrees, 90 maximum
	ParseData = strtoke(NULL, ",");
 8001904:	493b      	ldr	r1, [pc, #236]	; (80019f4 <Supercluster_ParseNMEA_GPGSV+0x2d4>)
 8001906:	2000      	movs	r0, #0
 8001908:	f7ff fbd6 	bl	80010b8 <strtoke>
 800190c:	60b8      	str	r0, [r7, #8]
	if(strlen(ParseData) > 0) 					data->elevation[msg_number*4 - 2] = atoi(ParseData);
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00c      	beq.n	8001930 <Supercluster_ParseNMEA_GPGSV+0x210>
 8001916:	68b8      	ldr	r0, [r7, #8]
 8001918:	f006 f8b8 	bl	8007a8c <atoi>
 800191c:	4602      	mov	r2, r0
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	3b02      	subs	r3, #2
 8001924:	b2d1      	uxtb	r1, r2
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	460a      	mov	r2, r1
 800192c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	//14    = Azimuth, degrees from true north, 000 to 359
	ParseData = strtoke(NULL, ",");
 8001930:	4930      	ldr	r1, [pc, #192]	; (80019f4 <Supercluster_ParseNMEA_GPGSV+0x2d4>)
 8001932:	2000      	movs	r0, #0
 8001934:	f7ff fbc0 	bl	80010b8 <strtoke>
 8001938:	60b8      	str	r0, [r7, #8]
	if(strlen(ParseData) > 0) 					data->azimuth[msg_number*4 - 2] = atoi(ParseData);
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00c      	beq.n	800195c <Supercluster_ParseNMEA_GPGSV+0x23c>
 8001942:	68b8      	ldr	r0, [r7, #8]
 8001944:	f006 f8a2 	bl	8007a8c <atoi>
 8001948:	4602      	mov	r2, r0
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	3b02      	subs	r3, #2
 8001950:	b2d1      	uxtb	r1, r2
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	460a      	mov	r2, r1
 8001958:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	//15    = SNR, 00-99 dB (null when not tracking)
	ParseData = strtoke(NULL, ",");
 800195c:	4925      	ldr	r1, [pc, #148]	; (80019f4 <Supercluster_ParseNMEA_GPGSV+0x2d4>)
 800195e:	2000      	movs	r0, #0
 8001960:	f7ff fbaa 	bl	80010b8 <strtoke>
 8001964:	60b8      	str	r0, [r7, #8]
	if(strlen(ParseData) > 0)					data->SNR[msg_number*4 -2] = atoi(ParseData);
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00c      	beq.n	8001988 <Supercluster_ParseNMEA_GPGSV+0x268>
 800196e:	68b8      	ldr	r0, [r7, #8]
 8001970:	f006 f88c 	bl	8007a8c <atoi>
 8001974:	4602      	mov	r2, r0
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	3b02      	subs	r3, #2
 800197c:	b2d1      	uxtb	r1, r2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	460a      	mov	r2, r1
 8001984:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	//16-19= Information about fourth SV, same as field 4-7
	//16 = SV PRN number
	ParseData = strtoke(NULL, ",");
 8001988:	491a      	ldr	r1, [pc, #104]	; (80019f4 <Supercluster_ParseNMEA_GPGSV+0x2d4>)
 800198a:	2000      	movs	r0, #0
 800198c:	f7ff fb94 	bl	80010b8 <strtoke>
 8001990:	60b8      	str	r0, [r7, #8]
	if(strlen(ParseData) > 0)					data->SV_PRN_number[msg_number*4 - 1] = atoi(ParseData);
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00c      	beq.n	80019b4 <Supercluster_ParseNMEA_GPGSV+0x294>
 800199a:	68b8      	ldr	r0, [r7, #8]
 800199c:	f006 f876 	bl	8007a8c <atoi>
 80019a0:	4602      	mov	r2, r0
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	3b01      	subs	r3, #1
 80019a8:	b2d1      	uxtb	r1, r2
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	460a      	mov	r2, r1
 80019b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	//17    = Elevation in degrees, 90 maximum
	ParseData = strtoke(NULL, ",");
 80019b4:	490f      	ldr	r1, [pc, #60]	; (80019f4 <Supercluster_ParseNMEA_GPGSV+0x2d4>)
 80019b6:	2000      	movs	r0, #0
 80019b8:	f7ff fb7e 	bl	80010b8 <strtoke>
 80019bc:	60b8      	str	r0, [r7, #8]
	if(strlen(ParseData) > 0) 					data->elevation[msg_number*4 - 1] = atoi(ParseData);
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00c      	beq.n	80019e0 <Supercluster_ParseNMEA_GPGSV+0x2c0>
 80019c6:	68b8      	ldr	r0, [r7, #8]
 80019c8:	f006 f860 	bl	8007a8c <atoi>
 80019cc:	4602      	mov	r2, r0
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	3b01      	subs	r3, #1
 80019d4:	b2d1      	uxtb	r1, r2
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	460a      	mov	r2, r1
 80019dc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	//18    = Azimuth, degrees from true north, 000 to 359
	ParseData = strtoke(NULL, ",");
 80019e0:	4904      	ldr	r1, [pc, #16]	; (80019f4 <Supercluster_ParseNMEA_GPGSV+0x2d4>)
 80019e2:	2000      	movs	r0, #0
 80019e4:	f7ff fb68 	bl	80010b8 <strtoke>
 80019e8:	60b8      	str	r0, [r7, #8]
	if(strlen(ParseData) > 0) 					data->azimuth[msg_number*4 - 1] = atoi(ParseData);
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00f      	beq.n	8001a12 <Supercluster_ParseNMEA_GPGSV+0x2f2>
 80019f2:	e001      	b.n	80019f8 <Supercluster_ParseNMEA_GPGSV+0x2d8>
 80019f4:	0800a950 	.word	0x0800a950
 80019f8:	68b8      	ldr	r0, [r7, #8]
 80019fa:	f006 f847 	bl	8007a8c <atoi>
 80019fe:	4602      	mov	r2, r0
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	3b01      	subs	r3, #1
 8001a06:	b2d1      	uxtb	r1, r2
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	460a      	mov	r2, r1
 8001a0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	//19    = SNR, 00-99 dB (null when not tracking)
	ParseData = strtoke(NULL, ",");
 8001a12:	490d      	ldr	r1, [pc, #52]	; (8001a48 <Supercluster_ParseNMEA_GPGSV+0x328>)
 8001a14:	2000      	movs	r0, #0
 8001a16:	f7ff fb4f 	bl	80010b8 <strtoke>
 8001a1a:	60b8      	str	r0, [r7, #8]
	if(strlen(ParseData) > 0)					data->SNR[msg_number*4 -1] = atoi(ParseData);
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d00c      	beq.n	8001a3e <Supercluster_ParseNMEA_GPGSV+0x31e>
 8001a24:	68b8      	ldr	r0, [r7, #8]
 8001a26:	f006 f831 	bl	8007a8c <atoi>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	3b01      	subs	r3, #1
 8001a32:	b2d1      	uxtb	r1, r2
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	4413      	add	r3, r2
 8001a38:	460a      	mov	r2, r1
 8001a3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

}//Check the data in arrays (SV, SRN, Azimuth, elevation)
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	0800a950 	.word	0x0800a950

08001a4c <Supercluster_ParseNMEA_GPS>:
//				   GPS_buffer *buffer - A pointer to structure that holds circular buffer parameters.
//			Output: -
//
****************************************************************************************************/
void Supercluster_ParseNMEA_GPS(GPS_Data *data, GPS_buffer *buffer)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
	char *ParseData = strtoke((char*)buffer->buffer_Working, ",");
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	33cb      	adds	r3, #203	; 0xcb
 8001a5a:	4914      	ldr	r1, [pc, #80]	; (8001aac <Supercluster_ParseNMEA_GPS+0x60>)
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fb2b 	bl	80010b8 <strtoke>
 8001a62:	60f8      	str	r0, [r7, #12]

	if		(strcmp(ParseData, "$GPRMC") == 0 )  		Supercluster_ParseNMEA_GPRMC(data);
 8001a64:	4912      	ldr	r1, [pc, #72]	; (8001ab0 <Supercluster_ParseNMEA_GPS+0x64>)
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f7fe fbb2 	bl	80001d0 <strcmp>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d103      	bne.n	8001a7a <Supercluster_ParseNMEA_GPS+0x2e>
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff fc6a 	bl	800134c <Supercluster_ParseNMEA_GPRMC>
	else if(strcmp(ParseData, "$GPGGA") == 0 )			Supercluster_ParseNMEA_GPGGA(data);
	else if(strcmp(ParseData, "$GPGSV") == 0 )			Supercluster_ParseNMEA_GPGSV(data);

}//Works OK
 8001a78:	e014      	b.n	8001aa4 <Supercluster_ParseNMEA_GPS+0x58>
	else if(strcmp(ParseData, "$GPGGA") == 0 )			Supercluster_ParseNMEA_GPGGA(data);
 8001a7a:	490e      	ldr	r1, [pc, #56]	; (8001ab4 <Supercluster_ParseNMEA_GPS+0x68>)
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f7fe fba7 	bl	80001d0 <strcmp>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d103      	bne.n	8001a90 <Supercluster_ParseNMEA_GPS+0x44>
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff fd6b 	bl	8001564 <Supercluster_ParseNMEA_GPGGA>
}//Works OK
 8001a8e:	e009      	b.n	8001aa4 <Supercluster_ParseNMEA_GPS+0x58>
	else if(strcmp(ParseData, "$GPGSV") == 0 )			Supercluster_ParseNMEA_GPGSV(data);
 8001a90:	4909      	ldr	r1, [pc, #36]	; (8001ab8 <Supercluster_ParseNMEA_GPS+0x6c>)
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f7fe fb9c 	bl	80001d0 <strcmp>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d102      	bne.n	8001aa4 <Supercluster_ParseNMEA_GPS+0x58>
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff fe3e 	bl	8001720 <Supercluster_ParseNMEA_GPGSV>
}//Works OK
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	0800a950 	.word	0x0800a950
 8001ab0:	0800a954 	.word	0x0800a954
 8001ab4:	0800a95c 	.word	0x0800a95c
 8001ab8:	0800a964 	.word	0x0800a964

08001abc <Supercluster_Loop_GPS>:
//				   GPS_buffer *buffer 	- A pointer to structure that holds circular buffer parameters
//			Output:  -
//
****************************************************************************************************/
void Supercluster_Loop_GPS(GPS_Data *data, GPS_buffer *buffer)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
	Supercluster_GetLine_GPS(buffer);
 8001ac6:	6838      	ldr	r0, [r7, #0]
 8001ac8:	f7ff fc10 	bl	80012ec <Supercluster_GetLine_GPS>
	Supercluster_ParseNMEA_GPS(data, buffer);
 8001acc:	6839      	ldr	r1, [r7, #0]
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ffbc 	bl	8001a4c <Supercluster_ParseNMEA_GPS>
}//Works OK
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <Supercluster_UART_GPS_Callback>:
//			Input: UART_HandleTypeDef *huart - A pointer to the UART handle
//			Output:  -
//
****************************************************************************************************/
void Supercluster_UART_GPS_Callback(UART_HandleTypeDef *huart)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	if(huart == &GPS_UART )	Supercluster_ReceiveUartChar_GPS(&Circular_Buffer);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a05      	ldr	r2, [pc, #20]	; (8001afc <Supercluster_UART_GPS_Callback+0x20>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d102      	bne.n	8001af2 <Supercluster_UART_GPS_Callback+0x16>
 8001aec:	4804      	ldr	r0, [pc, #16]	; (8001b00 <Supercluster_UART_GPS_Callback+0x24>)
 8001aee:	f7ff fb77 	bl	80011e0 <Supercluster_ReceiveUartChar_GPS>
}//Works OK
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000544 	.word	0x20000544
 8001b00:	200002ac 	.word	0x200002ac

08001b04 <Supercluster_Filter_I>:
//				   uint16_t *out - pointer to the memory location where the filtered current measurement will be saved
//			Output: -
//
/****************************************************************************************************/
void Supercluster_Filter_I(uint16_t in, uint16_t *out)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	6039      	str	r1, [r7, #0]
 8001b0e:	80fb      	strh	r3, [r7, #6]
	uint32_t inter_in, inter_out;
	inter_in = in;
 8001b10:	88fb      	ldrh	r3, [r7, #6]
 8001b12:	60fb      	str	r3, [r7, #12]
	inter_out = WEIGHT_PREV_I * inter_prev_I + WEIGHT_NEW_I * inter_in;
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <Supercluster_Filter_I+0x40>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	1a9b      	subs	r3, r3, r2
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	4413      	add	r3, r2
 8001b22:	60bb      	str	r3, [r7, #8]
	*out = inter_out>>I_BITS_SHIFT;
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	091b      	lsrs	r3, r3, #4
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	801a      	strh	r2, [r3, #0]
	inter_prev_I = inter_out>>I_BITS_SHIFT;
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <Supercluster_Filter_I+0x40>)
 8001b34:	6013      	str	r3, [r2, #0]
}//Works OK
 8001b36:	bf00      	nop
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	200003fc 	.word	0x200003fc

08001b48 <Supercluster_Filter_V>:
//				   uint16_t *out - pointer to the memory location where the filtered volatge measurement will be saved
//			Output: -
//
/****************************************************************************************************/
void Supercluster_Filter_V(uint16_t in, uint16_t *out)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	6039      	str	r1, [r7, #0]
 8001b52:	80fb      	strh	r3, [r7, #6]
	uint32_t inter_in, inter_out;
	inter_in = in;
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	60fb      	str	r3, [r7, #12]
	inter_out = WEIGHT_PREV_V * inter_prev_V + WEIGHT_NEW_V * inter_in;
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <Supercluster_Filter_V+0x40>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	011b      	lsls	r3, r3, #4
 8001b60:	1a9b      	subs	r3, r3, r2
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	4413      	add	r3, r2
 8001b66:	60bb      	str	r3, [r7, #8]
	*out = inter_out>>V_BITS_SHIFT;
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	091b      	lsrs	r3, r3, #4
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	801a      	strh	r2, [r3, #0]
	inter_prev_V = inter_out>>V_BITS_SHIFT;
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	091b      	lsrs	r3, r3, #4
 8001b76:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <Supercluster_Filter_V+0x40>)
 8001b78:	6013      	str	r3, [r2, #0]
}//Works OK
 8001b7a:	bf00      	nop
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	200003f4 	.word	0x200003f4

08001b8c <Supercluster_Get_Data_I>:
//			Input:	float *data - pointer to the memory location where the current value  will be saved
//			Output: -
//
/****************************************************************************************************/
void Supercluster_Get_Data_I(float *data)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
		uint16_t new_I;
		uint16_t filtered_I;
		// Get new data from HAL layer
		Supercluster_Get_HAL_I(&new_I);
 8001b94:	f107 030e 	add.w	r3, r7, #14
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 f845 	bl	8001c28 <Supercluster_Get_HAL_I>
		// Filter the data incoming
		Supercluster_Filter_I(new_I, &filtered_I);
 8001b9e:	89fb      	ldrh	r3, [r7, #14]
 8001ba0:	f107 020c 	add.w	r2, r7, #12
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff ffac 	bl	8001b04 <Supercluster_Filter_I>
		// Calculate float value returned
		*data = (float)  I_DATA_GAIN* ( filtered_I + I_DATA_OFFSET);
 8001bac:	89bb      	ldrh	r3, [r7, #12]
 8001bae:	ee07 3a90 	vmov	s15, r3
 8001bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bb6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001bd4 <Supercluster_Get_Data_I+0x48>
 8001bba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bbe:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001bd8 <Supercluster_Get_Data_I+0x4c>
 8001bc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	edc3 7a00 	vstr	s15, [r3]
}//Works OK
 8001bcc:	bf00      	nop
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	44110000 	.word	0x44110000
 8001bd8:	3a59999a 	.word	0x3a59999a

08001bdc <Supercluster_Get_Data_V>:
//			Input:	float *data - pointer to the memory location where the voltage value  will be saved
//			Output: -
//
/****************************************************************************************************/
void Supercluster_Get_Data_V(float *data)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
	uint16_t new_V;
	uint16_t filtered_V;
	// Get new data from HAL layer
	Supercluster_Get_HAL_V(&new_V);
 8001be4:	f107 030e 	add.w	r3, r7, #14
 8001be8:	4618      	mov	r0, r3
 8001bea:	f000 f82f 	bl	8001c4c <Supercluster_Get_HAL_V>
	// Filter the data incoming
	Supercluster_Filter_V(new_V, &filtered_V);
 8001bee:	89fb      	ldrh	r3, [r7, #14]
 8001bf0:	f107 020c 	add.w	r2, r7, #12
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff ffa6 	bl	8001b48 <Supercluster_Filter_V>
	// Calculate float value returned
	*data = (float)  V_DATA_GAIN * (filtered_V + V_DATA_OFFSET);
 8001bfc:	89bb      	ldrh	r3, [r7, #12]
 8001bfe:	ee07 3a90 	vmov	s15, r3
 8001c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c06:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001c0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c0e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001c24 <Supercluster_Get_Data_V+0x48>
 8001c12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	edc3 7a00 	vstr	s15, [r3]
}//Works OK
 8001c1c:	bf00      	nop
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	3a533333 	.word	0x3a533333

08001c28 <Supercluster_Get_HAL_I>:
//			Input:	uint16_t *data - pointer to the memory location where the current measurement will be saved
//			Output: -
//
****************************************************************************************************/
void Supercluster_Get_HAL_I(uint16_t *data)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	*data = (BufforData[0]);
 8001c30:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <Supercluster_Get_HAL_I+0x20>)
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	801a      	strh	r2, [r3, #0]
}//Works OK
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	200003f8 	.word	0x200003f8

08001c4c <Supercluster_Get_HAL_V>:
//			Input:	uint16_t *data - pointer to the memory location where the current measurement will be saved
//			Output: -
//
****************************************************************************************************/
void Supercluster_Get_HAL_V(uint16_t *data)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	*data = (BufforData[1]);
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <Supercluster_Get_HAL_V+0x20>)
 8001c56:	885b      	ldrh	r3, [r3, #2]
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	801a      	strh	r2, [r3, #0]
}//Works OK
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	200003f8 	.word	0x200003f8

08001c70 <Supercluster_Init_PWM_HAL>:
//			Input:	-
//			Output: -
//
****************************************************************************************************/
void Supercluster_Init_PWM_HAL()
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&PMW_OUT1, PMW_CH1, PWM_MIN_US);
 8001c74:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <Supercluster_Init_PWM_HAL+0x64>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c7c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&PMW_OUT1, PMW_CH1);
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4814      	ldr	r0, [pc, #80]	; (8001cd4 <Supercluster_Init_PWM_HAL+0x64>)
 8001c82:	f003 fe11 	bl	80058a8 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&PMW_OUT2, PMW_CH2, PWM_MIN_US);
 8001c86:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <Supercluster_Init_PWM_HAL+0x64>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c8e:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&PMW_OUT2, PMW_CH2);
 8001c90:	2104      	movs	r1, #4
 8001c92:	4810      	ldr	r0, [pc, #64]	; (8001cd4 <Supercluster_Init_PWM_HAL+0x64>)
 8001c94:	f003 fe08 	bl	80058a8 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&PMW_OUT3, PMW_CH3, PWM_MIN_US);
 8001c98:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <Supercluster_Init_PWM_HAL+0x68>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ca0:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&PMW_OUT3, PMW_CH3);
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	480c      	ldr	r0, [pc, #48]	; (8001cd8 <Supercluster_Init_PWM_HAL+0x68>)
 8001ca6:	f003 fdff 	bl	80058a8 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&PMW_OUT4, PMW_CH4, PWM_MIN_US);
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <Supercluster_Init_PWM_HAL+0x68>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cb2:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&PMW_OUT4, PMW_CH4);
 8001cb4:	2104      	movs	r1, #4
 8001cb6:	4808      	ldr	r0, [pc, #32]	; (8001cd8 <Supercluster_Init_PWM_HAL+0x68>)
 8001cb8:	f003 fdf6 	bl	80058a8 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&PMW_OUT5, PMW_CH5, PWM_MIN_US);
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <Supercluster_Init_PWM_HAL+0x68>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cc4:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&PMW_OUT5, PMW_CH5);
 8001cc6:	2108      	movs	r1, #8
 8001cc8:	4803      	ldr	r0, [pc, #12]	; (8001cd8 <Supercluster_Init_PWM_HAL+0x68>)
 8001cca:	f003 fded 	bl	80058a8 <HAL_TIM_PWM_Start>
}//Works OK
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	200004f8 	.word	0x200004f8
 8001cd8:	200004ac 	.word	0x200004ac

08001cdc <Supercluster_Set_PWM_HAL>:
//					uint32_t PWM_us_value 	- A time in us when the high state is set
//			Output: -
//
***************************************************************************************************/
void Supercluster_Set_PWM_HAL(TIM_HandleTypeDef *htim, uint8_t channel, uint32_t PWM_us_value)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	72fb      	strb	r3, [r7, #11]
	__HAL_TIM_SET_COMPARE(htim, channel, PWM_us_value);
 8001cea:	7afb      	ldrb	r3, [r7, #11]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d104      	bne.n	8001cfa <Supercluster_Set_PWM_HAL+0x1e>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	635a      	str	r2, [r3, #52]	; 0x34
}//Works OK
 8001cf8:	e023      	b.n	8001d42 <Supercluster_Set_PWM_HAL+0x66>
	__HAL_TIM_SET_COMPARE(htim, channel, PWM_us_value);
 8001cfa:	7afb      	ldrb	r3, [r7, #11]
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d104      	bne.n	8001d0a <Supercluster_Set_PWM_HAL+0x2e>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6393      	str	r3, [r2, #56]	; 0x38
}//Works OK
 8001d08:	e01b      	b.n	8001d42 <Supercluster_Set_PWM_HAL+0x66>
	__HAL_TIM_SET_COMPARE(htim, channel, PWM_us_value);
 8001d0a:	7afb      	ldrb	r3, [r7, #11]
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d104      	bne.n	8001d1a <Supercluster_Set_PWM_HAL+0x3e>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	63d3      	str	r3, [r2, #60]	; 0x3c
}//Works OK
 8001d18:	e013      	b.n	8001d42 <Supercluster_Set_PWM_HAL+0x66>
	__HAL_TIM_SET_COMPARE(htim, channel, PWM_us_value);
 8001d1a:	7afb      	ldrb	r3, [r7, #11]
 8001d1c:	2b0c      	cmp	r3, #12
 8001d1e:	d104      	bne.n	8001d2a <Supercluster_Set_PWM_HAL+0x4e>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6413      	str	r3, [r2, #64]	; 0x40
}//Works OK
 8001d28:	e00b      	b.n	8001d42 <Supercluster_Set_PWM_HAL+0x66>
	__HAL_TIM_SET_COMPARE(htim, channel, PWM_us_value);
 8001d2a:	7afb      	ldrb	r3, [r7, #11]
 8001d2c:	2b10      	cmp	r3, #16
 8001d2e:	d104      	bne.n	8001d3a <Supercluster_Set_PWM_HAL+0x5e>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6593      	str	r3, [r2, #88]	; 0x58
}//Works OK
 8001d38:	e003      	b.n	8001d42 <Supercluster_Set_PWM_HAL+0x66>
	__HAL_TIM_SET_COMPARE(htim, channel, PWM_us_value);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	65d3      	str	r3, [r2, #92]	; 0x5c
}//Works OK
 8001d42:	bf00      	nop
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <Supercluster_PWM_Init>:
//			Input:	-
//			Output: -
//
****************************************************************************************************/
void Supercluster_PWM_Init()
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	af00      	add	r7, sp, #0
	Supercluster_Init_PWM_HAL();
 8001d52:	f7ff ff8d 	bl	8001c70 <Supercluster_Init_PWM_HAL>
}//Works OK
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <Supercluster_PWM_Generate>:
//			Output: 1 when the channel number was correct
//					0 when the channel number was put incorrect
//
****************************************************************************************************/
uint8_t Supercluster_PWM_Generate(uint8_t PWM_ChannelNumber, int32_t duty_cycle)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b098      	sub	sp, #96	; 0x60
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	6039      	str	r1, [r7, #0]
 8001d66:	71fb      	strb	r3, [r7, #7]
	TIM_HandleTypeDef tim_pwm;
	uint8_t pwm_channel;
	uint32_t pwm_duty_us;

	if(duty_cycle > 100)	duty_cycle = 100;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	2b64      	cmp	r3, #100	; 0x64
 8001d6c:	dd02      	ble.n	8001d74 <Supercluster_PWM_Generate+0x18>
 8001d6e:	2364      	movs	r3, #100	; 0x64
 8001d70:	603b      	str	r3, [r7, #0]
 8001d72:	e006      	b.n	8001d82 <Supercluster_PWM_Generate+0x26>
	else if(duty_cycle < -100)	duty_cycle = -100;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8001d7a:	da02      	bge.n	8001d82 <Supercluster_PWM_Generate+0x26>
 8001d7c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001d80:	603b      	str	r3, [r7, #0]

	switch (PWM_ChannelNumber)
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	3b01      	subs	r3, #1
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d848      	bhi.n	8001e1c <Supercluster_PWM_Generate+0xc0>
 8001d8a:	a201      	add	r2, pc, #4	; (adr r2, 8001d90 <Supercluster_PWM_Generate+0x34>)
 8001d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d90:	08001da5 	.word	0x08001da5
 8001d94:	08001dbd 	.word	0x08001dbd
 8001d98:	08001dd5 	.word	0x08001dd5
 8001d9c:	08001ded 	.word	0x08001ded
 8001da0:	08001e05 	.word	0x08001e05
	{
	case 1:
		tim_pwm = PMW_OUT1;
 8001da4:	4a28      	ldr	r2, [pc, #160]	; (8001e48 <Supercluster_PWM_Generate+0xec>)
 8001da6:	f107 030c 	add.w	r3, r7, #12
 8001daa:	4611      	mov	r1, r2
 8001dac:	224c      	movs	r2, #76	; 0x4c
 8001dae:	4618      	mov	r0, r3
 8001db0:	f005 fe9a 	bl	8007ae8 <memcpy>
		pwm_channel = PMW_CH1;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		break;
 8001dba:	e031      	b.n	8001e20 <Supercluster_PWM_Generate+0xc4>
	case 2:
		tim_pwm = PMW_OUT2;
 8001dbc:	4a22      	ldr	r2, [pc, #136]	; (8001e48 <Supercluster_PWM_Generate+0xec>)
 8001dbe:	f107 030c 	add.w	r3, r7, #12
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	224c      	movs	r2, #76	; 0x4c
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f005 fe8e 	bl	8007ae8 <memcpy>
		pwm_channel = PMW_CH2;
 8001dcc:	2304      	movs	r3, #4
 8001dce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		break;
 8001dd2:	e025      	b.n	8001e20 <Supercluster_PWM_Generate+0xc4>
	case 3:
		tim_pwm = PMW_OUT3;
 8001dd4:	4a1d      	ldr	r2, [pc, #116]	; (8001e4c <Supercluster_PWM_Generate+0xf0>)
 8001dd6:	f107 030c 	add.w	r3, r7, #12
 8001dda:	4611      	mov	r1, r2
 8001ddc:	224c      	movs	r2, #76	; 0x4c
 8001dde:	4618      	mov	r0, r3
 8001de0:	f005 fe82 	bl	8007ae8 <memcpy>
		pwm_channel = PMW_CH3;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		break;
 8001dea:	e019      	b.n	8001e20 <Supercluster_PWM_Generate+0xc4>
	case 4:
		tim_pwm = PMW_OUT4;
 8001dec:	4a17      	ldr	r2, [pc, #92]	; (8001e4c <Supercluster_PWM_Generate+0xf0>)
 8001dee:	f107 030c 	add.w	r3, r7, #12
 8001df2:	4611      	mov	r1, r2
 8001df4:	224c      	movs	r2, #76	; 0x4c
 8001df6:	4618      	mov	r0, r3
 8001df8:	f005 fe76 	bl	8007ae8 <memcpy>
		pwm_channel = PMW_CH4;
 8001dfc:	2304      	movs	r3, #4
 8001dfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		break;
 8001e02:	e00d      	b.n	8001e20 <Supercluster_PWM_Generate+0xc4>
	case 5:
		tim_pwm = PMW_OUT5;
 8001e04:	4a11      	ldr	r2, [pc, #68]	; (8001e4c <Supercluster_PWM_Generate+0xf0>)
 8001e06:	f107 030c 	add.w	r3, r7, #12
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	224c      	movs	r2, #76	; 0x4c
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f005 fe6a 	bl	8007ae8 <memcpy>
		pwm_channel = PMW_CH5;
 8001e14:	2308      	movs	r3, #8
 8001e16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		break;
 8001e1a:	e001      	b.n	8001e20 <Supercluster_PWM_Generate+0xc4>
	default:
		return 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	e00f      	b.n	8001e40 <Supercluster_PWM_Generate+0xe4>
	}
	pwm_duty_us = (PWM_MIN_US + PWM_MAX_US)/2 + (5 * duty_cycle); // Tutaj jako jedno makro
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001e2c:	65bb      	str	r3, [r7, #88]	; 0x58
	Supercluster_Set_PWM_HAL(&tim_pwm, pwm_channel, pwm_duty_us);
 8001e2e:	f897 105f 	ldrb.w	r1, [r7, #95]	; 0x5f
 8001e32:	f107 030c 	add.w	r3, r7, #12
 8001e36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff4f 	bl	8001cdc <Supercluster_Set_PWM_HAL>
	return 1;
 8001e3e:	2301      	movs	r3, #1
}//Works OK
 8001e40:	4618      	mov	r0, r3
 8001e42:	3760      	adds	r7, #96	; 0x60
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	200004f8 	.word	0x200004f8
 8001e4c:	200004ac 	.word	0x200004ac

08001e50 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e56:	463b      	mov	r3, r7
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
 8001e64:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8001e66:	4b30      	ldr	r3, [pc, #192]	; (8001f28 <MX_ADC3_Init+0xd8>)
 8001e68:	4a30      	ldr	r2, [pc, #192]	; (8001f2c <MX_ADC3_Init+0xdc>)
 8001e6a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e6c:	4b2e      	ldr	r3, [pc, #184]	; (8001f28 <MX_ADC3_Init+0xd8>)
 8001e6e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001e72:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001e74:	4b2c      	ldr	r3, [pc, #176]	; (8001f28 <MX_ADC3_Init+0xd8>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e7a:	4b2b      	ldr	r3, [pc, #172]	; (8001f28 <MX_ADC3_Init+0xd8>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001e80:	4b29      	ldr	r3, [pc, #164]	; (8001f28 <MX_ADC3_Init+0xd8>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e86:	4b28      	ldr	r3, [pc, #160]	; (8001f28 <MX_ADC3_Init+0xd8>)
 8001e88:	2204      	movs	r2, #4
 8001e8a:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001e8c:	4b26      	ldr	r3, [pc, #152]	; (8001f28 <MX_ADC3_Init+0xd8>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001e92:	4b25      	ldr	r3, [pc, #148]	; (8001f28 <MX_ADC3_Init+0xd8>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 2;
 8001e98:	4b23      	ldr	r3, [pc, #140]	; (8001f28 <MX_ADC3_Init+0xd8>)
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001e9e:	4b22      	ldr	r3, [pc, #136]	; (8001f28 <MX_ADC3_Init+0xd8>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ea6:	4b20      	ldr	r3, [pc, #128]	; (8001f28 <MX_ADC3_Init+0xd8>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001eac:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <MX_ADC3_Init+0xd8>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001eb2:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <MX_ADC3_Init+0xd8>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001eba:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <MX_ADC3_Init+0xd8>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001ec0:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <MX_ADC3_Init+0xd8>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001ec8:	4817      	ldr	r0, [pc, #92]	; (8001f28 <MX_ADC3_Init+0xd8>)
 8001eca:	f000 ff8f 	bl	8002dec <HAL_ADC_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8001ed4:	f000 f981 	bl	80021da <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ed8:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <MX_ADC3_Init+0xe0>)
 8001eda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001edc:	2306      	movs	r3, #6
 8001ede:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001ee0:	2304      	movs	r3, #4
 8001ee2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ee4:	237f      	movs	r3, #127	; 0x7f
 8001ee6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ee8:	2304      	movs	r3, #4
 8001eea:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001ef0:	463b      	mov	r3, r7
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480c      	ldr	r0, [pc, #48]	; (8001f28 <MX_ADC3_Init+0xd8>)
 8001ef6:	f001 f8cf 	bl	8003098 <HAL_ADC_ConfigChannel>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8001f00:	f000 f96b 	bl	80021da <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <MX_ADC3_Init+0xe4>)
 8001f06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001f08:	230c      	movs	r3, #12
 8001f0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001f0c:	463b      	mov	r3, r7
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4805      	ldr	r0, [pc, #20]	; (8001f28 <MX_ADC3_Init+0xd8>)
 8001f12:	f001 f8c1 	bl	8003098 <HAL_ADC_ConfigChannel>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8001f1c:	f000 f95d 	bl	80021da <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001f20:	bf00      	nop
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000448 	.word	0x20000448
 8001f2c:	50040200 	.word	0x50040200
 8001f30:	04300002 	.word	0x04300002
 8001f34:	08600004 	.word	0x08600004

08001f38 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b0ac      	sub	sp, #176	; 0xb0
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	2288      	movs	r2, #136	; 0x88
 8001f56:	2100      	movs	r1, #0
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f005 fdd3 	bl	8007b04 <memset>
  if(adcHandle->Instance==ADC3)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a3c      	ldr	r2, [pc, #240]	; (8002054 <HAL_ADC_MspInit+0x11c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d171      	bne.n	800204c <HAL_ADC_MspInit+0x114>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f6c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001f6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001f76:	2301      	movs	r3, #1
 8001f78:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001f7e:	2310      	movs	r3, #16
 8001f80:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001f82:	2307      	movs	r3, #7
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001f86:	2302      	movs	r3, #2
 8001f88:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001f8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f92:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f002 ff71 	bl	8004e80 <HAL_RCCEx_PeriphCLKConfig>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001fa4:	f000 f919 	bl	80021da <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001fa8:	4b2b      	ldr	r3, [pc, #172]	; (8002058 <HAL_ADC_MspInit+0x120>)
 8001faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fac:	4a2a      	ldr	r2, [pc, #168]	; (8002058 <HAL_ADC_MspInit+0x120>)
 8001fae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb4:	4b28      	ldr	r3, [pc, #160]	; (8002058 <HAL_ADC_MspInit+0x120>)
 8001fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc0:	4b25      	ldr	r3, [pc, #148]	; (8002058 <HAL_ADC_MspInit+0x120>)
 8001fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc4:	4a24      	ldr	r2, [pc, #144]	; (8002058 <HAL_ADC_MspInit+0x120>)
 8001fc6:	f043 0304 	orr.w	r3, r3, #4
 8001fca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fcc:	4b22      	ldr	r3, [pc, #136]	; (8002058 <HAL_ADC_MspInit+0x120>)
 8001fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC0     ------> ADC3_IN1
    PC1     ------> ADC3_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001fde:	230b      	movs	r3, #11
 8001fe0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fee:	4619      	mov	r1, r3
 8001ff0:	481a      	ldr	r0, [pc, #104]	; (800205c <HAL_ADC_MspInit+0x124>)
 8001ff2:	f001 ff39 	bl	8003e68 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Channel3;
 8001ff6:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <HAL_ADC_MspInit+0x128>)
 8001ff8:	4a1a      	ldr	r2, [pc, #104]	; (8002064 <HAL_ADC_MspInit+0x12c>)
 8001ffa:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_0;
 8001ffc:	4b18      	ldr	r3, [pc, #96]	; (8002060 <HAL_ADC_MspInit+0x128>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002002:	4b17      	ldr	r3, [pc, #92]	; (8002060 <HAL_ADC_MspInit+0x128>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002008:	4b15      	ldr	r3, [pc, #84]	; (8002060 <HAL_ADC_MspInit+0x128>)
 800200a:	2200      	movs	r2, #0
 800200c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800200e:	4b14      	ldr	r3, [pc, #80]	; (8002060 <HAL_ADC_MspInit+0x128>)
 8002010:	2280      	movs	r2, #128	; 0x80
 8002012:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002014:	4b12      	ldr	r3, [pc, #72]	; (8002060 <HAL_ADC_MspInit+0x128>)
 8002016:	f44f 7280 	mov.w	r2, #256	; 0x100
 800201a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800201c:	4b10      	ldr	r3, [pc, #64]	; (8002060 <HAL_ADC_MspInit+0x128>)
 800201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002022:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002024:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <HAL_ADC_MspInit+0x128>)
 8002026:	2220      	movs	r2, #32
 8002028:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800202a:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <HAL_ADC_MspInit+0x128>)
 800202c:	2200      	movs	r2, #0
 800202e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002030:	480b      	ldr	r0, [pc, #44]	; (8002060 <HAL_ADC_MspInit+0x128>)
 8002032:	f001 fd33 	bl	8003a9c <HAL_DMA_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 800203c:	f000 f8cd 	bl	80021da <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a07      	ldr	r2, [pc, #28]	; (8002060 <HAL_ADC_MspInit+0x128>)
 8002044:	64da      	str	r2, [r3, #76]	; 0x4c
 8002046:	4a06      	ldr	r2, [pc, #24]	; (8002060 <HAL_ADC_MspInit+0x128>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800204c:	bf00      	nop
 800204e:	37b0      	adds	r7, #176	; 0xb0
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	50040200 	.word	0x50040200
 8002058:	40021000 	.word	0x40021000
 800205c:	48000800 	.word	0x48000800
 8002060:	20000400 	.word	0x20000400
 8002064:	40020030 	.word	0x40020030

08002068 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800206e:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <MX_DMA_Init+0x38>)
 8002070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002072:	4a0b      	ldr	r2, [pc, #44]	; (80020a0 <MX_DMA_Init+0x38>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	6493      	str	r3, [r2, #72]	; 0x48
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <MX_DMA_Init+0x38>)
 800207c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002086:	2200      	movs	r2, #0
 8002088:	2100      	movs	r1, #0
 800208a:	200d      	movs	r0, #13
 800208c:	f001 fccf 	bl	8003a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002090:	200d      	movs	r0, #13
 8002092:	f001 fce8 	bl	8003a66 <HAL_NVIC_EnableIRQ>

}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000

080020a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <MX_GPIO_Init+0x5c>)
 80020ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ae:	4a14      	ldr	r2, [pc, #80]	; (8002100 <MX_GPIO_Init+0x5c>)
 80020b0:	f043 0304 	orr.w	r3, r3, #4
 80020b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020b6:	4b12      	ldr	r3, [pc, #72]	; (8002100 <MX_GPIO_Init+0x5c>)
 80020b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c2:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <MX_GPIO_Init+0x5c>)
 80020c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c6:	4a0e      	ldr	r2, [pc, #56]	; (8002100 <MX_GPIO_Init+0x5c>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ce:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <MX_GPIO_Init+0x5c>)
 80020d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <MX_GPIO_Init+0x5c>)
 80020dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020de:	4a08      	ldr	r2, [pc, #32]	; (8002100 <MX_GPIO_Init+0x5c>)
 80020e0:	f043 0302 	orr.w	r3, r3, #2
 80020e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <MX_GPIO_Init+0x5c>)
 80020e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]

}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000

08002104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002108:	f000 fc6f 	bl	80029ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800210c:	f000 f813 	bl	8002136 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002110:	f7ff ffc8 	bl	80020a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002114:	f7ff ffa8 	bl	8002068 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002118:	f000 fb2c 	bl	8002774 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800211c:	f000 fb5a 	bl	80027d4 <MX_USART2_UART_Init>
  MX_ADC3_Init();
 8002120:	f7ff fe96 	bl	8001e50 <MX_ADC3_Init>
  MX_TIM2_Init();
 8002124:	f000 f9a4 	bl	8002470 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002128:	f000 fa08 	bl	800253c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  Supercluster_Init();
 800212c:	f7fe ff30 	bl	8000f90 <Supercluster_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Supercluster_Body_Loop();
 8002130:	f7fe ff36 	bl	8000fa0 <Supercluster_Body_Loop>
 8002134:	e7fc      	b.n	8002130 <main+0x2c>

08002136 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b096      	sub	sp, #88	; 0x58
 800213a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800213c:	f107 0314 	add.w	r3, r7, #20
 8002140:	2244      	movs	r2, #68	; 0x44
 8002142:	2100      	movs	r1, #0
 8002144:	4618      	mov	r0, r3
 8002146:	f005 fcdd 	bl	8007b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800214a:	463b      	mov	r3, r7
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002158:	f44f 7000 	mov.w	r0, #512	; 0x200
 800215c:	f002 f83c 	bl	80041d8 <HAL_PWREx_ControlVoltageScaling>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002166:	f000 f838 	bl	80021da <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800216a:	2310      	movs	r3, #16
 800216c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800216e:	2301      	movs	r3, #1
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002176:	2360      	movs	r3, #96	; 0x60
 8002178:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800217a:	2302      	movs	r3, #2
 800217c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800217e:	2301      	movs	r3, #1
 8002180:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002182:	2301      	movs	r3, #1
 8002184:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002186:	2328      	movs	r3, #40	; 0x28
 8002188:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800218a:	2307      	movs	r3, #7
 800218c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800218e:	2302      	movs	r3, #2
 8002190:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002192:	2302      	movs	r3, #2
 8002194:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	4618      	mov	r0, r3
 800219c:	f002 f872 	bl	8004284 <HAL_RCC_OscConfig>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <SystemClock_Config+0x74>
  {
    Error_Handler();
 80021a6:	f000 f818 	bl	80021da <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021aa:	230f      	movs	r3, #15
 80021ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ae:	2303      	movs	r3, #3
 80021b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80021be:	463b      	mov	r3, r7
 80021c0:	2104      	movs	r1, #4
 80021c2:	4618      	mov	r0, r3
 80021c4:	f002 fc38 	bl	8004a38 <HAL_RCC_ClockConfig>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80021ce:	f000 f804 	bl	80021da <Error_Handler>
  }
}
 80021d2:	bf00      	nop
 80021d4:	3758      	adds	r7, #88	; 0x58
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021de:	b672      	cpsid	i
}
 80021e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021e2:	e7fe      	b.n	80021e2 <Error_Handler+0x8>

080021e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ea:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <HAL_MspInit+0x44>)
 80021ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ee:	4a0e      	ldr	r2, [pc, #56]	; (8002228 <HAL_MspInit+0x44>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6613      	str	r3, [r2, #96]	; 0x60
 80021f6:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <HAL_MspInit+0x44>)
 80021f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_MspInit+0x44>)
 8002204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002206:	4a08      	ldr	r2, [pc, #32]	; (8002228 <HAL_MspInit+0x44>)
 8002208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220c:	6593      	str	r3, [r2, #88]	; 0x58
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_MspInit+0x44>)
 8002210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000

0800222c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002230:	e7fe      	b.n	8002230 <NMI_Handler+0x4>

08002232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002236:	e7fe      	b.n	8002236 <HardFault_Handler+0x4>

08002238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800223c:	e7fe      	b.n	800223c <MemManage_Handler+0x4>

0800223e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002242:	e7fe      	b.n	8002242 <BusFault_Handler+0x4>

08002244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002248:	e7fe      	b.n	8002248 <UsageFault_Handler+0x4>

0800224a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	Supercluster_SysTick();
 8002278:	f7fe fecc 	bl	8001014 <Supercluster_SysTick>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800227c:	f000 fc0a 	bl	8002a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}

08002284 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002288:	4802      	ldr	r0, [pc, #8]	; (8002294 <DMA1_Channel3_IRQHandler+0x10>)
 800228a:	f001 fd3e 	bl	8003d0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000400 	.word	0x20000400

08002298 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <USART1_IRQHandler+0x10>)
 800229e:	f004 f9df 	bl	8006660 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000544 	.word	0x20000544

080022ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <USART2_IRQHandler+0x10>)
 80022b2:	f004 f9d5 	bl	8006660 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200005c8 	.word	0x200005c8

080022c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
	return 1;
 80022c4:	2301      	movs	r3, #1
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <_kill>:

int _kill(int pid, int sig)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022da:	f005 fbdb 	bl	8007a94 <__errno>
 80022de:	4603      	mov	r3, r0
 80022e0:	2216      	movs	r2, #22
 80022e2:	601a      	str	r2, [r3, #0]
	return -1;
 80022e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <_exit>:

void _exit (int status)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022f8:	f04f 31ff 	mov.w	r1, #4294967295
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff ffe7 	bl	80022d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002302:	e7fe      	b.n	8002302 <_exit+0x12>

08002304 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	e00a      	b.n	800232c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002316:	f3af 8000 	nop.w
 800231a:	4601      	mov	r1, r0
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	60ba      	str	r2, [r7, #8]
 8002322:	b2ca      	uxtb	r2, r1
 8002324:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	3301      	adds	r3, #1
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	429a      	cmp	r2, r3
 8002332:	dbf0      	blt.n	8002316 <_read+0x12>
	}

return len;
 8002334:	687b      	ldr	r3, [r7, #4]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b086      	sub	sp, #24
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	e009      	b.n	8002364 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	60ba      	str	r2, [r7, #8]
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	3301      	adds	r3, #1
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	429a      	cmp	r2, r3
 800236a:	dbf1      	blt.n	8002350 <_write+0x12>
	}
	return len;
 800236c:	687b      	ldr	r3, [r7, #4]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <_close>:

int _close(int file)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
	return -1;
 800237e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800239e:	605a      	str	r2, [r3, #4]
	return 0;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <_isatty>:

int _isatty(int file)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
	return 1;
 80023b6:	2301      	movs	r3, #1
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
	return 0;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023e8:	4a14      	ldr	r2, [pc, #80]	; (800243c <_sbrk+0x5c>)
 80023ea:	4b15      	ldr	r3, [pc, #84]	; (8002440 <_sbrk+0x60>)
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f4:	4b13      	ldr	r3, [pc, #76]	; (8002444 <_sbrk+0x64>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d102      	bne.n	8002402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023fc:	4b11      	ldr	r3, [pc, #68]	; (8002444 <_sbrk+0x64>)
 80023fe:	4a12      	ldr	r2, [pc, #72]	; (8002448 <_sbrk+0x68>)
 8002400:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002402:	4b10      	ldr	r3, [pc, #64]	; (8002444 <_sbrk+0x64>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	429a      	cmp	r2, r3
 800240e:	d207      	bcs.n	8002420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002410:	f005 fb40 	bl	8007a94 <__errno>
 8002414:	4603      	mov	r3, r0
 8002416:	220c      	movs	r2, #12
 8002418:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800241a:	f04f 33ff 	mov.w	r3, #4294967295
 800241e:	e009      	b.n	8002434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <_sbrk+0x64>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002426:	4b07      	ldr	r3, [pc, #28]	; (8002444 <_sbrk+0x64>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4413      	add	r3, r2
 800242e:	4a05      	ldr	r2, [pc, #20]	; (8002444 <_sbrk+0x64>)
 8002430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002432:	68fb      	ldr	r3, [r7, #12]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20018000 	.word	0x20018000
 8002440:	00000400 	.word	0x00000400
 8002444:	20000204 	.word	0x20000204
 8002448:	20000660 	.word	0x20000660

0800244c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <SystemInit+0x20>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002456:	4a05      	ldr	r2, [pc, #20]	; (800246c <SystemInit+0x20>)
 8002458:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800245c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08a      	sub	sp, #40	; 0x28
 8002474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002476:	f107 031c 	add.w	r3, r7, #28
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	605a      	str	r2, [r3, #4]
 8002480:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002482:	463b      	mov	r3, r7
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	611a      	str	r2, [r3, #16]
 8002490:	615a      	str	r2, [r3, #20]
 8002492:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002494:	4b28      	ldr	r3, [pc, #160]	; (8002538 <MX_TIM2_Init+0xc8>)
 8002496:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800249a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 800249c:	4b26      	ldr	r3, [pc, #152]	; (8002538 <MX_TIM2_Init+0xc8>)
 800249e:	224f      	movs	r2, #79	; 0x4f
 80024a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a2:	4b25      	ldr	r3, [pc, #148]	; (8002538 <MX_TIM2_Init+0xc8>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 80024a8:	4b23      	ldr	r3, [pc, #140]	; (8002538 <MX_TIM2_Init+0xc8>)
 80024aa:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80024ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b0:	4b21      	ldr	r3, [pc, #132]	; (8002538 <MX_TIM2_Init+0xc8>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b6:	4b20      	ldr	r3, [pc, #128]	; (8002538 <MX_TIM2_Init+0xc8>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80024bc:	481e      	ldr	r0, [pc, #120]	; (8002538 <MX_TIM2_Init+0xc8>)
 80024be:	f003 f99b 	bl	80057f8 <HAL_TIM_PWM_Init>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80024c8:	f7ff fe87 	bl	80021da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d0:	2300      	movs	r3, #0
 80024d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024d4:	f107 031c 	add.w	r3, r7, #28
 80024d8:	4619      	mov	r1, r3
 80024da:	4817      	ldr	r0, [pc, #92]	; (8002538 <MX_TIM2_Init+0xc8>)
 80024dc:	f003 ff94 	bl	8006408 <HAL_TIMEx_MasterConfigSynchronization>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80024e6:	f7ff fe78 	bl	80021da <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024ea:	2360      	movs	r3, #96	; 0x60
 80024ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 80024ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024f8:	2300      	movs	r3, #0
 80024fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024fc:	463b      	mov	r3, r7
 80024fe:	2200      	movs	r2, #0
 8002500:	4619      	mov	r1, r3
 8002502:	480d      	ldr	r0, [pc, #52]	; (8002538 <MX_TIM2_Init+0xc8>)
 8002504:	f003 fad6 	bl	8005ab4 <HAL_TIM_PWM_ConfigChannel>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800250e:	f7ff fe64 	bl	80021da <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002512:	463b      	mov	r3, r7
 8002514:	2204      	movs	r2, #4
 8002516:	4619      	mov	r1, r3
 8002518:	4807      	ldr	r0, [pc, #28]	; (8002538 <MX_TIM2_Init+0xc8>)
 800251a:	f003 facb 	bl	8005ab4 <HAL_TIM_PWM_ConfigChannel>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8002524:	f7ff fe59 	bl	80021da <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002528:	4803      	ldr	r0, [pc, #12]	; (8002538 <MX_TIM2_Init+0xc8>)
 800252a:	f000 f8ab 	bl	8002684 <HAL_TIM_MspPostInit>

}
 800252e:	bf00      	nop
 8002530:	3728      	adds	r7, #40	; 0x28
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	200004f8 	.word	0x200004f8

0800253c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08a      	sub	sp, #40	; 0x28
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002542:	f107 031c 	add.w	r3, r7, #28
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	605a      	str	r2, [r3, #4]
 800254c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800254e:	463b      	mov	r3, r7
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
 800255c:	615a      	str	r2, [r3, #20]
 800255e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002560:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <MX_TIM3_Init+0xdc>)
 8002562:	4a2e      	ldr	r2, [pc, #184]	; (800261c <MX_TIM3_Init+0xe0>)
 8002564:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8002566:	4b2c      	ldr	r3, [pc, #176]	; (8002618 <MX_TIM3_Init+0xdc>)
 8002568:	224f      	movs	r2, #79	; 0x4f
 800256a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800256c:	4b2a      	ldr	r3, [pc, #168]	; (8002618 <MX_TIM3_Init+0xdc>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8002572:	4b29      	ldr	r3, [pc, #164]	; (8002618 <MX_TIM3_Init+0xdc>)
 8002574:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002578:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800257a:	4b27      	ldr	r3, [pc, #156]	; (8002618 <MX_TIM3_Init+0xdc>)
 800257c:	2200      	movs	r2, #0
 800257e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002580:	4b25      	ldr	r3, [pc, #148]	; (8002618 <MX_TIM3_Init+0xdc>)
 8002582:	2200      	movs	r2, #0
 8002584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002586:	4824      	ldr	r0, [pc, #144]	; (8002618 <MX_TIM3_Init+0xdc>)
 8002588:	f003 f936 	bl	80057f8 <HAL_TIM_PWM_Init>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002592:	f7ff fe22 	bl	80021da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002596:	2300      	movs	r3, #0
 8002598:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800259e:	f107 031c 	add.w	r3, r7, #28
 80025a2:	4619      	mov	r1, r3
 80025a4:	481c      	ldr	r0, [pc, #112]	; (8002618 <MX_TIM3_Init+0xdc>)
 80025a6:	f003 ff2f 	bl	8006408 <HAL_TIMEx_MasterConfigSynchronization>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80025b0:	f7ff fe13 	bl	80021da <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025b4:	2360      	movs	r3, #96	; 0x60
 80025b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 80025b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025be:	2300      	movs	r3, #0
 80025c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025c6:	463b      	mov	r3, r7
 80025c8:	2200      	movs	r2, #0
 80025ca:	4619      	mov	r1, r3
 80025cc:	4812      	ldr	r0, [pc, #72]	; (8002618 <MX_TIM3_Init+0xdc>)
 80025ce:	f003 fa71 	bl	8005ab4 <HAL_TIM_PWM_ConfigChannel>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80025d8:	f7ff fdff 	bl	80021da <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025dc:	463b      	mov	r3, r7
 80025de:	2204      	movs	r2, #4
 80025e0:	4619      	mov	r1, r3
 80025e2:	480d      	ldr	r0, [pc, #52]	; (8002618 <MX_TIM3_Init+0xdc>)
 80025e4:	f003 fa66 	bl	8005ab4 <HAL_TIM_PWM_ConfigChannel>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 80025ee:	f7ff fdf4 	bl	80021da <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025f2:	463b      	mov	r3, r7
 80025f4:	2208      	movs	r2, #8
 80025f6:	4619      	mov	r1, r3
 80025f8:	4807      	ldr	r0, [pc, #28]	; (8002618 <MX_TIM3_Init+0xdc>)
 80025fa:	f003 fa5b 	bl	8005ab4 <HAL_TIM_PWM_ConfigChannel>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8002604:	f7ff fde9 	bl	80021da <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002608:	4803      	ldr	r0, [pc, #12]	; (8002618 <MX_TIM3_Init+0xdc>)
 800260a:	f000 f83b 	bl	8002684 <HAL_TIM_MspPostInit>

}
 800260e:	bf00      	nop
 8002610:	3728      	adds	r7, #40	; 0x28
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	200004ac 	.word	0x200004ac
 800261c:	40000400 	.word	0x40000400

08002620 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002630:	d10c      	bne.n	800264c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002632:	4b12      	ldr	r3, [pc, #72]	; (800267c <HAL_TIM_PWM_MspInit+0x5c>)
 8002634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002636:	4a11      	ldr	r2, [pc, #68]	; (800267c <HAL_TIM_PWM_MspInit+0x5c>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6593      	str	r3, [r2, #88]	; 0x58
 800263e:	4b0f      	ldr	r3, [pc, #60]	; (800267c <HAL_TIM_PWM_MspInit+0x5c>)
 8002640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800264a:	e010      	b.n	800266e <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM3)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a0b      	ldr	r2, [pc, #44]	; (8002680 <HAL_TIM_PWM_MspInit+0x60>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d10b      	bne.n	800266e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002656:	4b09      	ldr	r3, [pc, #36]	; (800267c <HAL_TIM_PWM_MspInit+0x5c>)
 8002658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265a:	4a08      	ldr	r2, [pc, #32]	; (800267c <HAL_TIM_PWM_MspInit+0x5c>)
 800265c:	f043 0302 	orr.w	r3, r3, #2
 8002660:	6593      	str	r3, [r2, #88]	; 0x58
 8002662:	4b06      	ldr	r3, [pc, #24]	; (800267c <HAL_TIM_PWM_MspInit+0x5c>)
 8002664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]
}
 800266e:	bf00      	nop
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40021000 	.word	0x40021000
 8002680:	40000400 	.word	0x40000400

08002684 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	; 0x28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a4:	d11d      	bne.n	80026e2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a6:	4b30      	ldr	r3, [pc, #192]	; (8002768 <HAL_TIM_MspPostInit+0xe4>)
 80026a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026aa:	4a2f      	ldr	r2, [pc, #188]	; (8002768 <HAL_TIM_MspPostInit+0xe4>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026b2:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <HAL_TIM_MspPostInit+0xe4>)
 80026b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026be:	2303      	movs	r3, #3
 80026c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c2:	2302      	movs	r3, #2
 80026c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ca:	2300      	movs	r3, #0
 80026cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026ce:	2301      	movs	r3, #1
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d2:	f107 0314 	add.w	r3, r7, #20
 80026d6:	4619      	mov	r1, r3
 80026d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026dc:	f001 fbc4 	bl	8003e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80026e0:	e03d      	b.n	800275e <HAL_TIM_MspPostInit+0xda>
  else if(timHandle->Instance==TIM3)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a21      	ldr	r2, [pc, #132]	; (800276c <HAL_TIM_MspPostInit+0xe8>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d138      	bne.n	800275e <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ec:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <HAL_TIM_MspPostInit+0xe4>)
 80026ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f0:	4a1d      	ldr	r2, [pc, #116]	; (8002768 <HAL_TIM_MspPostInit+0xe4>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026f8:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <HAL_TIM_MspPostInit+0xe4>)
 80026fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002704:	4b18      	ldr	r3, [pc, #96]	; (8002768 <HAL_TIM_MspPostInit+0xe4>)
 8002706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002708:	4a17      	ldr	r2, [pc, #92]	; (8002768 <HAL_TIM_MspPostInit+0xe4>)
 800270a:	f043 0302 	orr.w	r3, r3, #2
 800270e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002710:	4b15      	ldr	r3, [pc, #84]	; (8002768 <HAL_TIM_MspPostInit+0xe4>)
 8002712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800271c:	23c0      	movs	r3, #192	; 0xc0
 800271e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002728:	2300      	movs	r3, #0
 800272a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800272c:	2302      	movs	r3, #2
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	4619      	mov	r1, r3
 8002736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800273a:	f001 fb95 	bl	8003e68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800273e:	2301      	movs	r3, #1
 8002740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002742:	2302      	movs	r3, #2
 8002744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274a:	2300      	movs	r3, #0
 800274c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800274e:	2302      	movs	r3, #2
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002752:	f107 0314 	add.w	r3, r7, #20
 8002756:	4619      	mov	r1, r3
 8002758:	4805      	ldr	r0, [pc, #20]	; (8002770 <HAL_TIM_MspPostInit+0xec>)
 800275a:	f001 fb85 	bl	8003e68 <HAL_GPIO_Init>
}
 800275e:	bf00      	nop
 8002760:	3728      	adds	r7, #40	; 0x28
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40021000 	.word	0x40021000
 800276c:	40000400 	.word	0x40000400
 8002770:	48000400 	.word	0x48000400

08002774 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002778:	4b14      	ldr	r3, [pc, #80]	; (80027cc <MX_USART1_UART_Init+0x58>)
 800277a:	4a15      	ldr	r2, [pc, #84]	; (80027d0 <MX_USART1_UART_Init+0x5c>)
 800277c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800277e:	4b13      	ldr	r3, [pc, #76]	; (80027cc <MX_USART1_UART_Init+0x58>)
 8002780:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002784:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002786:	4b11      	ldr	r3, [pc, #68]	; (80027cc <MX_USART1_UART_Init+0x58>)
 8002788:	2200      	movs	r2, #0
 800278a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800278c:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <MX_USART1_UART_Init+0x58>)
 800278e:	2200      	movs	r2, #0
 8002790:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002792:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <MX_USART1_UART_Init+0x58>)
 8002794:	2200      	movs	r2, #0
 8002796:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002798:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <MX_USART1_UART_Init+0x58>)
 800279a:	220c      	movs	r2, #12
 800279c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800279e:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <MX_USART1_UART_Init+0x58>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027a4:	4b09      	ldr	r3, [pc, #36]	; (80027cc <MX_USART1_UART_Init+0x58>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027aa:	4b08      	ldr	r3, [pc, #32]	; (80027cc <MX_USART1_UART_Init+0x58>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <MX_USART1_UART_Init+0x58>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027b6:	4805      	ldr	r0, [pc, #20]	; (80027cc <MX_USART1_UART_Init+0x58>)
 80027b8:	f003 feae 	bl	8006518 <HAL_UART_Init>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80027c2:	f7ff fd0a 	bl	80021da <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000544 	.word	0x20000544
 80027d0:	40013800 	.word	0x40013800

080027d4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027d8:	4b14      	ldr	r3, [pc, #80]	; (800282c <MX_USART2_UART_Init+0x58>)
 80027da:	4a15      	ldr	r2, [pc, #84]	; (8002830 <MX_USART2_UART_Init+0x5c>)
 80027dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027de:	4b13      	ldr	r3, [pc, #76]	; (800282c <MX_USART2_UART_Init+0x58>)
 80027e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027e6:	4b11      	ldr	r3, [pc, #68]	; (800282c <MX_USART2_UART_Init+0x58>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027ec:	4b0f      	ldr	r3, [pc, #60]	; (800282c <MX_USART2_UART_Init+0x58>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027f2:	4b0e      	ldr	r3, [pc, #56]	; (800282c <MX_USART2_UART_Init+0x58>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027f8:	4b0c      	ldr	r3, [pc, #48]	; (800282c <MX_USART2_UART_Init+0x58>)
 80027fa:	220c      	movs	r2, #12
 80027fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027fe:	4b0b      	ldr	r3, [pc, #44]	; (800282c <MX_USART2_UART_Init+0x58>)
 8002800:	2200      	movs	r2, #0
 8002802:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002804:	4b09      	ldr	r3, [pc, #36]	; (800282c <MX_USART2_UART_Init+0x58>)
 8002806:	2200      	movs	r2, #0
 8002808:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800280a:	4b08      	ldr	r3, [pc, #32]	; (800282c <MX_USART2_UART_Init+0x58>)
 800280c:	2200      	movs	r2, #0
 800280e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002810:	4b06      	ldr	r3, [pc, #24]	; (800282c <MX_USART2_UART_Init+0x58>)
 8002812:	2200      	movs	r2, #0
 8002814:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002816:	4805      	ldr	r0, [pc, #20]	; (800282c <MX_USART2_UART_Init+0x58>)
 8002818:	f003 fe7e 	bl	8006518 <HAL_UART_Init>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002822:	f7ff fcda 	bl	80021da <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	200005c8 	.word	0x200005c8
 8002830:	40004400 	.word	0x40004400

08002834 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b0ae      	sub	sp, #184	; 0xb8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800284c:	f107 031c 	add.w	r3, r7, #28
 8002850:	2288      	movs	r2, #136	; 0x88
 8002852:	2100      	movs	r1, #0
 8002854:	4618      	mov	r0, r3
 8002856:	f005 f955 	bl	8007b04 <memset>
  if(uartHandle->Instance==USART1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a4a      	ldr	r2, [pc, #296]	; (8002988 <HAL_UART_MspInit+0x154>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d143      	bne.n	80028ec <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002864:	2301      	movs	r3, #1
 8002866:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002868:	2300      	movs	r3, #0
 800286a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800286c:	f107 031c 	add.w	r3, r7, #28
 8002870:	4618      	mov	r0, r3
 8002872:	f002 fb05 	bl	8004e80 <HAL_RCCEx_PeriphCLKConfig>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800287c:	f7ff fcad 	bl	80021da <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002880:	4b42      	ldr	r3, [pc, #264]	; (800298c <HAL_UART_MspInit+0x158>)
 8002882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002884:	4a41      	ldr	r2, [pc, #260]	; (800298c <HAL_UART_MspInit+0x158>)
 8002886:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800288a:	6613      	str	r3, [r2, #96]	; 0x60
 800288c:	4b3f      	ldr	r3, [pc, #252]	; (800298c <HAL_UART_MspInit+0x158>)
 800288e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002898:	4b3c      	ldr	r3, [pc, #240]	; (800298c <HAL_UART_MspInit+0x158>)
 800289a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289c:	4a3b      	ldr	r2, [pc, #236]	; (800298c <HAL_UART_MspInit+0x158>)
 800289e:	f043 0302 	orr.w	r3, r3, #2
 80028a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028a4:	4b39      	ldr	r3, [pc, #228]	; (800298c <HAL_UART_MspInit+0x158>)
 80028a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028b0:	23c0      	movs	r3, #192	; 0xc0
 80028b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b6:	2302      	movs	r3, #2
 80028b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c2:	2303      	movs	r3, #3
 80028c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028c8:	2307      	movs	r3, #7
 80028ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028d2:	4619      	mov	r1, r3
 80028d4:	482e      	ldr	r0, [pc, #184]	; (8002990 <HAL_UART_MspInit+0x15c>)
 80028d6:	f001 fac7 	bl	8003e68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028da:	2200      	movs	r2, #0
 80028dc:	2100      	movs	r1, #0
 80028de:	2025      	movs	r0, #37	; 0x25
 80028e0:	f001 f8a5 	bl	8003a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028e4:	2025      	movs	r0, #37	; 0x25
 80028e6:	f001 f8be 	bl	8003a66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80028ea:	e048      	b.n	800297e <HAL_UART_MspInit+0x14a>
  else if(uartHandle->Instance==USART2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a28      	ldr	r2, [pc, #160]	; (8002994 <HAL_UART_MspInit+0x160>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d143      	bne.n	800297e <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80028f6:	2302      	movs	r3, #2
 80028f8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80028fa:	2300      	movs	r3, #0
 80028fc:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028fe:	f107 031c 	add.w	r3, r7, #28
 8002902:	4618      	mov	r0, r3
 8002904:	f002 fabc 	bl	8004e80 <HAL_RCCEx_PeriphCLKConfig>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_UART_MspInit+0xde>
      Error_Handler();
 800290e:	f7ff fc64 	bl	80021da <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002912:	4b1e      	ldr	r3, [pc, #120]	; (800298c <HAL_UART_MspInit+0x158>)
 8002914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002916:	4a1d      	ldr	r2, [pc, #116]	; (800298c <HAL_UART_MspInit+0x158>)
 8002918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800291c:	6593      	str	r3, [r2, #88]	; 0x58
 800291e:	4b1b      	ldr	r3, [pc, #108]	; (800298c <HAL_UART_MspInit+0x158>)
 8002920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292a:	4b18      	ldr	r3, [pc, #96]	; (800298c <HAL_UART_MspInit+0x158>)
 800292c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292e:	4a17      	ldr	r2, [pc, #92]	; (800298c <HAL_UART_MspInit+0x158>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002936:	4b15      	ldr	r3, [pc, #84]	; (800298c <HAL_UART_MspInit+0x158>)
 8002938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002942:	230c      	movs	r3, #12
 8002944:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002948:	2302      	movs	r3, #2
 800294a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002954:	2303      	movs	r3, #3
 8002956:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800295a:	2307      	movs	r3, #7
 800295c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002960:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002964:	4619      	mov	r1, r3
 8002966:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800296a:	f001 fa7d 	bl	8003e68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800296e:	2200      	movs	r2, #0
 8002970:	2100      	movs	r1, #0
 8002972:	2026      	movs	r0, #38	; 0x26
 8002974:	f001 f85b 	bl	8003a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002978:	2026      	movs	r0, #38	; 0x26
 800297a:	f001 f874 	bl	8003a66 <HAL_NVIC_EnableIRQ>
}
 800297e:	bf00      	nop
 8002980:	37b8      	adds	r7, #184	; 0xb8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40013800 	.word	0x40013800
 800298c:	40021000 	.word	0x40021000
 8002990:	48000400 	.word	0x48000400
 8002994:	40004400 	.word	0x40004400

08002998 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800299c:	f7ff fd56 	bl	800244c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029a0:	480c      	ldr	r0, [pc, #48]	; (80029d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80029a2:	490d      	ldr	r1, [pc, #52]	; (80029d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029a4:	4a0d      	ldr	r2, [pc, #52]	; (80029dc <LoopForever+0xe>)
  movs r3, #0
 80029a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029a8:	e002      	b.n	80029b0 <LoopCopyDataInit>

080029aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ae:	3304      	adds	r3, #4

080029b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029b4:	d3f9      	bcc.n	80029aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029b6:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029b8:	4c0a      	ldr	r4, [pc, #40]	; (80029e4 <LoopForever+0x16>)
  movs r3, #0
 80029ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029bc:	e001      	b.n	80029c2 <LoopFillZerobss>

080029be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029c0:	3204      	adds	r2, #4

080029c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029c4:	d3fb      	bcc.n	80029be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029c6:	f005 f86b 	bl	8007aa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029ca:	f7ff fb9b 	bl	8002104 <main>

080029ce <LoopForever>:

LoopForever:
    b LoopForever
 80029ce:	e7fe      	b.n	80029ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80029d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80029d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029d8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80029dc:	0800adfc 	.word	0x0800adfc
  ldr r2, =_sbss
 80029e0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80029e4:	20000660 	.word	0x20000660

080029e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029e8:	e7fe      	b.n	80029e8 <ADC1_2_IRQHandler>

080029ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f4:	2003      	movs	r0, #3
 80029f6:	f001 f80f 	bl	8003a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029fa:	200f      	movs	r0, #15
 80029fc:	f000 f80e 	bl	8002a1c <HAL_InitTick>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	71fb      	strb	r3, [r7, #7]
 8002a0a:	e001      	b.n	8002a10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a0c:	f7ff fbea 	bl	80021e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a10:	79fb      	ldrb	r3, [r7, #7]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002a28:	4b17      	ldr	r3, [pc, #92]	; (8002a88 <HAL_InitTick+0x6c>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d023      	beq.n	8002a78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002a30:	4b16      	ldr	r3, [pc, #88]	; (8002a8c <HAL_InitTick+0x70>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <HAL_InitTick+0x6c>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a46:	4618      	mov	r0, r3
 8002a48:	f001 f81b 	bl	8003a82 <HAL_SYSTICK_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10f      	bne.n	8002a72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b0f      	cmp	r3, #15
 8002a56:	d809      	bhi.n	8002a6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a60:	f000 ffe5 	bl	8003a2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a64:	4a0a      	ldr	r2, [pc, #40]	; (8002a90 <HAL_InitTick+0x74>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	e007      	b.n	8002a7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	73fb      	strb	r3, [r7, #15]
 8002a70:	e004      	b.n	8002a7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	73fb      	strb	r3, [r7, #15]
 8002a76:	e001      	b.n	8002a7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20000008 	.word	0x20000008
 8002a8c:	20000000 	.word	0x20000000
 8002a90:	20000004 	.word	0x20000004

08002a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <HAL_IncTick+0x20>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_IncTick+0x24>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <HAL_IncTick+0x24>)
 8002aa6:	6013      	str	r3, [r2, #0]
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20000008 	.word	0x20000008
 8002ab8:	2000064c 	.word	0x2000064c

08002abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return uwTick;
 8002ac0:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <HAL_GetTick+0x14>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	2000064c 	.word	0x2000064c

08002ad4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	609a      	str	r2, [r3, #8]
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	609a      	str	r2, [r3, #8]
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
 8002b48:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	3360      	adds	r3, #96	; 0x60
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <LL_ADC_SetOffset+0x44>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002b74:	bf00      	nop
 8002b76:	371c      	adds	r7, #28
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	03fff000 	.word	0x03fff000

08002b84 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3360      	adds	r3, #96	; 0x60
 8002b92:	461a      	mov	r2, r3
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	3360      	adds	r3, #96	; 0x60
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002bda:	bf00      	nop
 8002bdc:	371c      	adds	r7, #28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b087      	sub	sp, #28
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	3330      	adds	r3, #48	; 0x30
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	0a1b      	lsrs	r3, r3, #8
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	f003 030c 	and.w	r3, r3, #12
 8002c02:	4413      	add	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	211f      	movs	r1, #31
 8002c12:	fa01 f303 	lsl.w	r3, r1, r3
 8002c16:	43db      	mvns	r3, r3
 8002c18:	401a      	ands	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	0e9b      	lsrs	r3, r3, #26
 8002c1e:	f003 011f 	and.w	r1, r3, #31
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	f003 031f 	and.w	r3, r3, #31
 8002c28:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c32:	bf00      	nop
 8002c34:	371c      	adds	r7, #28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b087      	sub	sp, #28
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	3314      	adds	r3, #20
 8002c4e:	461a      	mov	r2, r3
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	0e5b      	lsrs	r3, r3, #25
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	f003 0304 	and.w	r3, r3, #4
 8002c5a:	4413      	add	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	0d1b      	lsrs	r3, r3, #20
 8002c66:	f003 031f 	and.w	r3, r3, #31
 8002c6a:	2107      	movs	r1, #7
 8002c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	401a      	ands	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	0d1b      	lsrs	r3, r3, #20
 8002c78:	f003 031f 	and.w	r3, r3, #31
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c82:	431a      	orrs	r2, r3
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c88:	bf00      	nop
 8002c8a:	371c      	adds	r7, #28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cac:	43db      	mvns	r3, r3
 8002cae:	401a      	ands	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f003 0318 	and.w	r3, r3, #24
 8002cb6:	4908      	ldr	r1, [pc, #32]	; (8002cd8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002cb8:	40d9      	lsrs	r1, r3
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	400b      	ands	r3, r1
 8002cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002cca:	bf00      	nop
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	0007ffff 	.word	0x0007ffff

08002cdc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002cec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6093      	str	r3, [r2, #8]
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d14:	d101      	bne.n	8002d1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002d38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d64:	d101      	bne.n	8002d6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <LL_ADC_IsEnabled+0x18>
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <LL_ADC_IsEnabled+0x1a>
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 0304 	and.w	r3, r3, #4
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d101      	bne.n	8002db6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d101      	bne.n	8002ddc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002dec:	b590      	push	{r4, r7, lr}
 8002dee:	b089      	sub	sp, #36	; 0x24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e136      	b.n	8003074 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d109      	bne.n	8002e28 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff f88f 	bl	8001f38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff ff67 	bl	8002d00 <LL_ADC_IsDeepPowerDownEnabled>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d004      	beq.n	8002e42 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff ff4d 	bl	8002cdc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff ff82 	bl	8002d50 <LL_ADC_IsInternalRegulatorEnabled>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d115      	bne.n	8002e7e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff ff66 	bl	8002d28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e5c:	4b87      	ldr	r3, [pc, #540]	; (800307c <HAL_ADC_Init+0x290>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	099b      	lsrs	r3, r3, #6
 8002e62:	4a87      	ldr	r2, [pc, #540]	; (8003080 <HAL_ADC_Init+0x294>)
 8002e64:	fba2 2303 	umull	r2, r3, r2, r3
 8002e68:	099b      	lsrs	r3, r3, #6
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e70:	e002      	b.n	8002e78 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	3b01      	subs	r3, #1
 8002e76:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f9      	bne.n	8002e72 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff ff64 	bl	8002d50 <LL_ADC_IsInternalRegulatorEnabled>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10d      	bne.n	8002eaa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e92:	f043 0210 	orr.w	r2, r3, #16
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9e:	f043 0201 	orr.w	r2, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff ff75 	bl	8002d9e <LL_ADC_REG_IsConversionOngoing>
 8002eb4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f040 80cf 	bne.w	8003062 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f040 80cb 	bne.w	8003062 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ed4:	f043 0202 	orr.w	r2, r3, #2
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff ff49 	bl	8002d78 <LL_ADC_IsEnabled>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d115      	bne.n	8002f18 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002eec:	4865      	ldr	r0, [pc, #404]	; (8003084 <HAL_ADC_Init+0x298>)
 8002eee:	f7ff ff43 	bl	8002d78 <LL_ADC_IsEnabled>
 8002ef2:	4604      	mov	r4, r0
 8002ef4:	4864      	ldr	r0, [pc, #400]	; (8003088 <HAL_ADC_Init+0x29c>)
 8002ef6:	f7ff ff3f 	bl	8002d78 <LL_ADC_IsEnabled>
 8002efa:	4603      	mov	r3, r0
 8002efc:	431c      	orrs	r4, r3
 8002efe:	4863      	ldr	r0, [pc, #396]	; (800308c <HAL_ADC_Init+0x2a0>)
 8002f00:	f7ff ff3a 	bl	8002d78 <LL_ADC_IsEnabled>
 8002f04:	4603      	mov	r3, r0
 8002f06:	4323      	orrs	r3, r4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d105      	bne.n	8002f18 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4619      	mov	r1, r3
 8002f12:	485f      	ldr	r0, [pc, #380]	; (8003090 <HAL_ADC_Init+0x2a4>)
 8002f14:	f7ff fdde 	bl	8002ad4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	7e5b      	ldrb	r3, [r3, #25]
 8002f1c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f22:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002f28:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002f2e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f36:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d106      	bne.n	8002f54 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	045b      	lsls	r3, r3, #17
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d009      	beq.n	8002f70 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	4b47      	ldr	r3, [pc, #284]	; (8003094 <HAL_ADC_Init+0x2a8>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6812      	ldr	r2, [r2, #0]
 8002f7e:	69b9      	ldr	r1, [r7, #24]
 8002f80:	430b      	orrs	r3, r1
 8002f82:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ff08 	bl	8002d9e <LL_ADC_REG_IsConversionOngoing>
 8002f8e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff ff15 	bl	8002dc4 <LL_ADC_INJ_IsConversionOngoing>
 8002f9a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d13d      	bne.n	800301e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d13a      	bne.n	800301e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fac:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fb4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fc4:	f023 0302 	bic.w	r3, r3, #2
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	69b9      	ldr	r1, [r7, #24]
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d118      	bne.n	800300e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002fe6:	f023 0304 	bic.w	r3, r3, #4
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ff2:	4311      	orrs	r1, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ff8:	4311      	orrs	r1, r2
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ffe:	430a      	orrs	r2, r1
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	611a      	str	r2, [r3, #16]
 800300c:	e007      	b.n	800301e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0201 	bic.w	r2, r2, #1
 800301c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d10c      	bne.n	8003040 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302c:	f023 010f 	bic.w	r1, r3, #15
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	1e5a      	subs	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	631a      	str	r2, [r3, #48]	; 0x30
 800303e:	e007      	b.n	8003050 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 020f 	bic.w	r2, r2, #15
 800304e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003054:	f023 0303 	bic.w	r3, r3, #3
 8003058:	f043 0201 	orr.w	r2, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	655a      	str	r2, [r3, #84]	; 0x54
 8003060:	e007      	b.n	8003072 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003066:	f043 0210 	orr.w	r2, r3, #16
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003072:	7ffb      	ldrb	r3, [r7, #31]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3724      	adds	r7, #36	; 0x24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd90      	pop	{r4, r7, pc}
 800307c:	20000000 	.word	0x20000000
 8003080:	053e2d63 	.word	0x053e2d63
 8003084:	50040000 	.word	0x50040000
 8003088:	50040100 	.word	0x50040100
 800308c:	50040200 	.word	0x50040200
 8003090:	50040300 	.word	0x50040300
 8003094:	fff0c007 	.word	0xfff0c007

08003098 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b0b6      	sub	sp, #216	; 0xd8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x22>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e3c7      	b.n	800384a <HAL_ADC_ConfigChannel+0x7b2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff fe69 	bl	8002d9e <LL_ADC_REG_IsConversionOngoing>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f040 83a8 	bne.w	8003824 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b05      	cmp	r3, #5
 80030da:	d824      	bhi.n	8003126 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	3b02      	subs	r3, #2
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	d81b      	bhi.n	800311e <HAL_ADC_ConfigChannel+0x86>
 80030e6:	a201      	add	r2, pc, #4	; (adr r2, 80030ec <HAL_ADC_ConfigChannel+0x54>)
 80030e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ec:	080030fd 	.word	0x080030fd
 80030f0:	08003105 	.word	0x08003105
 80030f4:	0800310d 	.word	0x0800310d
 80030f8:	08003115 	.word	0x08003115
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	220c      	movs	r2, #12
 8003100:	605a      	str	r2, [r3, #4]
          break;
 8003102:	e011      	b.n	8003128 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	2212      	movs	r2, #18
 8003108:	605a      	str	r2, [r3, #4]
          break;
 800310a:	e00d      	b.n	8003128 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	2218      	movs	r2, #24
 8003110:	605a      	str	r2, [r3, #4]
          break;
 8003112:	e009      	b.n	8003128 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	f44f 7280 	mov.w	r2, #256	; 0x100
 800311a:	605a      	str	r2, [r3, #4]
          break;
 800311c:	e004      	b.n	8003128 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2206      	movs	r2, #6
 8003122:	605a      	str	r2, [r3, #4]
          break;
 8003124:	e000      	b.n	8003128 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003126:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6818      	ldr	r0, [r3, #0]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	6859      	ldr	r1, [r3, #4]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	461a      	mov	r2, r3
 8003136:	f7ff fd56 	bl	8002be6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff fe2d 	bl	8002d9e <LL_ADC_REG_IsConversionOngoing>
 8003144:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fe39 	bl	8002dc4 <LL_ADC_INJ_IsConversionOngoing>
 8003152:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003156:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800315a:	2b00      	cmp	r3, #0
 800315c:	f040 81a6 	bne.w	80034ac <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003160:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003164:	2b00      	cmp	r3, #0
 8003166:	f040 81a1 	bne.w	80034ac <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	6819      	ldr	r1, [r3, #0]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	461a      	mov	r2, r3
 8003178:	f7ff fd61 	bl	8002c3e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	695a      	ldr	r2, [r3, #20]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	08db      	lsrs	r3, r3, #3
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	2b04      	cmp	r3, #4
 800319c:	d00a      	beq.n	80031b4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6818      	ldr	r0, [r3, #0]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	6919      	ldr	r1, [r3, #16]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031ae:	f7ff fcc5 	bl	8002b3c <LL_ADC_SetOffset>
 80031b2:	e17b      	b.n	80034ac <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2100      	movs	r1, #0
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff fce2 	bl	8002b84 <LL_ADC_GetOffsetChannel>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10a      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x148>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2100      	movs	r1, #0
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff fcd7 	bl	8002b84 <LL_ADC_GetOffsetChannel>
 80031d6:	4603      	mov	r3, r0
 80031d8:	0e9b      	lsrs	r3, r3, #26
 80031da:	f003 021f 	and.w	r2, r3, #31
 80031de:	e01e      	b.n	800321e <HAL_ADC_ConfigChannel+0x186>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2100      	movs	r1, #0
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff fccc 	bl	8002b84 <LL_ADC_GetOffsetChannel>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80031f6:	fa93 f3a3 	rbit	r3, r3
 80031fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003202:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003206:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800320e:	2320      	movs	r3, #32
 8003210:	e004      	b.n	800321c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003212:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003216:	fab3 f383 	clz	r3, r3
 800321a:	b2db      	uxtb	r3, r3
 800321c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003226:	2b00      	cmp	r3, #0
 8003228:	d105      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x19e>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	0e9b      	lsrs	r3, r3, #26
 8003230:	f003 031f 	and.w	r3, r3, #31
 8003234:	e018      	b.n	8003268 <HAL_ADC_ConfigChannel+0x1d0>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003242:	fa93 f3a3 	rbit	r3, r3
 8003246:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800324a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800324e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003252:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800325a:	2320      	movs	r3, #32
 800325c:	e004      	b.n	8003268 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800325e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003262:	fab3 f383 	clz	r3, r3
 8003266:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003268:	429a      	cmp	r2, r3
 800326a:	d106      	bne.n	800327a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2200      	movs	r2, #0
 8003272:	2100      	movs	r1, #0
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff fc9b 	bl	8002bb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2101      	movs	r1, #1
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff fc7f 	bl	8002b84 <LL_ADC_GetOffsetChannel>
 8003286:	4603      	mov	r3, r0
 8003288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10a      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x20e>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2101      	movs	r1, #1
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff fc74 	bl	8002b84 <LL_ADC_GetOffsetChannel>
 800329c:	4603      	mov	r3, r0
 800329e:	0e9b      	lsrs	r3, r3, #26
 80032a0:	f003 021f 	and.w	r2, r3, #31
 80032a4:	e01e      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x24c>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2101      	movs	r1, #1
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff fc69 	bl	8002b84 <LL_ADC_GetOffsetChannel>
 80032b2:	4603      	mov	r3, r0
 80032b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80032bc:	fa93 f3a3 	rbit	r3, r3
 80032c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80032c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80032cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80032d4:	2320      	movs	r3, #32
 80032d6:	e004      	b.n	80032e2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80032d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032dc:	fab3 f383 	clz	r3, r3
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d105      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x264>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	0e9b      	lsrs	r3, r3, #26
 80032f6:	f003 031f 	and.w	r3, r3, #31
 80032fa:	e018      	b.n	800332e <HAL_ADC_ConfigChannel+0x296>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003304:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003308:	fa93 f3a3 	rbit	r3, r3
 800330c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003310:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003314:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003318:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003320:	2320      	movs	r3, #32
 8003322:	e004      	b.n	800332e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003324:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003328:	fab3 f383 	clz	r3, r3
 800332c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800332e:	429a      	cmp	r2, r3
 8003330:	d106      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2200      	movs	r2, #0
 8003338:	2101      	movs	r1, #1
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff fc38 	bl	8002bb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2102      	movs	r1, #2
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff fc1c 	bl	8002b84 <LL_ADC_GetOffsetChannel>
 800334c:	4603      	mov	r3, r0
 800334e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10a      	bne.n	800336c <HAL_ADC_ConfigChannel+0x2d4>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2102      	movs	r1, #2
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff fc11 	bl	8002b84 <LL_ADC_GetOffsetChannel>
 8003362:	4603      	mov	r3, r0
 8003364:	0e9b      	lsrs	r3, r3, #26
 8003366:	f003 021f 	and.w	r2, r3, #31
 800336a:	e01e      	b.n	80033aa <HAL_ADC_ConfigChannel+0x312>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2102      	movs	r1, #2
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fc06 	bl	8002b84 <LL_ADC_GetOffsetChannel>
 8003378:	4603      	mov	r3, r0
 800337a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003382:	fa93 f3a3 	rbit	r3, r3
 8003386:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800338a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800338e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003392:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800339a:	2320      	movs	r3, #32
 800339c:	e004      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800339e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033a2:	fab3 f383 	clz	r3, r3
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d105      	bne.n	80033c2 <HAL_ADC_ConfigChannel+0x32a>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	0e9b      	lsrs	r3, r3, #26
 80033bc:	f003 031f 	and.w	r3, r3, #31
 80033c0:	e016      	b.n	80033f0 <HAL_ADC_ConfigChannel+0x358>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033ce:	fa93 f3a3 	rbit	r3, r3
 80033d2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80033d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80033da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80033e2:	2320      	movs	r3, #32
 80033e4:	e004      	b.n	80033f0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80033e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033ea:	fab3 f383 	clz	r3, r3
 80033ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d106      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2200      	movs	r2, #0
 80033fa:	2102      	movs	r1, #2
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff fbd7 	bl	8002bb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2103      	movs	r1, #3
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff fbbb 	bl	8002b84 <LL_ADC_GetOffsetChannel>
 800340e:	4603      	mov	r3, r0
 8003410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10a      	bne.n	800342e <HAL_ADC_ConfigChannel+0x396>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2103      	movs	r1, #3
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff fbb0 	bl	8002b84 <LL_ADC_GetOffsetChannel>
 8003424:	4603      	mov	r3, r0
 8003426:	0e9b      	lsrs	r3, r3, #26
 8003428:	f003 021f 	and.w	r2, r3, #31
 800342c:	e017      	b.n	800345e <HAL_ADC_ConfigChannel+0x3c6>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2103      	movs	r1, #3
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff fba5 	bl	8002b84 <LL_ADC_GetOffsetChannel>
 800343a:	4603      	mov	r3, r0
 800343c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003440:	fa93 f3a3 	rbit	r3, r3
 8003444:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003446:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003448:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800344a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003450:	2320      	movs	r3, #32
 8003452:	e003      	b.n	800345c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003456:	fab3 f383 	clz	r3, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003466:	2b00      	cmp	r3, #0
 8003468:	d105      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x3de>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	0e9b      	lsrs	r3, r3, #26
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	e011      	b.n	800349a <HAL_ADC_ConfigChannel+0x402>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800347e:	fa93 f3a3 	rbit	r3, r3
 8003482:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003486:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800348e:	2320      	movs	r3, #32
 8003490:	e003      	b.n	800349a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003494:	fab3 f383 	clz	r3, r3
 8003498:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800349a:	429a      	cmp	r2, r3
 800349c:	d106      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2200      	movs	r2, #0
 80034a4:	2103      	movs	r1, #3
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fb82 	bl	8002bb0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff fc61 	bl	8002d78 <LL_ADC_IsEnabled>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f040 813f 	bne.w	800373c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	6819      	ldr	r1, [r3, #0]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	461a      	mov	r2, r3
 80034cc:	f7ff fbe2 	bl	8002c94 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	4a8e      	ldr	r2, [pc, #568]	; (8003710 <HAL_ADC_ConfigChannel+0x678>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	f040 8130 	bne.w	800373c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10b      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x46c>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	0e9b      	lsrs	r3, r3, #26
 80034f2:	3301      	adds	r3, #1
 80034f4:	f003 031f 	and.w	r3, r3, #31
 80034f8:	2b09      	cmp	r3, #9
 80034fa:	bf94      	ite	ls
 80034fc:	2301      	movls	r3, #1
 80034fe:	2300      	movhi	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	e019      	b.n	8003538 <HAL_ADC_ConfigChannel+0x4a0>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800350c:	fa93 f3a3 	rbit	r3, r3
 8003510:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003512:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003514:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003516:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800351c:	2320      	movs	r3, #32
 800351e:	e003      	b.n	8003528 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003520:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003522:	fab3 f383 	clz	r3, r3
 8003526:	b2db      	uxtb	r3, r3
 8003528:	3301      	adds	r3, #1
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	2b09      	cmp	r3, #9
 8003530:	bf94      	ite	ls
 8003532:	2301      	movls	r3, #1
 8003534:	2300      	movhi	r3, #0
 8003536:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003538:	2b00      	cmp	r3, #0
 800353a:	d079      	beq.n	8003630 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003544:	2b00      	cmp	r3, #0
 8003546:	d107      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x4c0>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	0e9b      	lsrs	r3, r3, #26
 800354e:	3301      	adds	r3, #1
 8003550:	069b      	lsls	r3, r3, #26
 8003552:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003556:	e015      	b.n	8003584 <HAL_ADC_ConfigChannel+0x4ec>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003560:	fa93 f3a3 	rbit	r3, r3
 8003564:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003568:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800356a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003570:	2320      	movs	r3, #32
 8003572:	e003      	b.n	800357c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003576:	fab3 f383 	clz	r3, r3
 800357a:	b2db      	uxtb	r3, r3
 800357c:	3301      	adds	r3, #1
 800357e:	069b      	lsls	r3, r3, #26
 8003580:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800358c:	2b00      	cmp	r3, #0
 800358e:	d109      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x50c>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	0e9b      	lsrs	r3, r3, #26
 8003596:	3301      	adds	r3, #1
 8003598:	f003 031f 	and.w	r3, r3, #31
 800359c:	2101      	movs	r1, #1
 800359e:	fa01 f303 	lsl.w	r3, r1, r3
 80035a2:	e017      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x53c>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ac:	fa93 f3a3 	rbit	r3, r3
 80035b0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80035b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035b4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80035b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80035bc:	2320      	movs	r3, #32
 80035be:	e003      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80035c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035c2:	fab3 f383 	clz	r3, r3
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	3301      	adds	r3, #1
 80035ca:	f003 031f 	and.w	r3, r3, #31
 80035ce:	2101      	movs	r1, #1
 80035d0:	fa01 f303 	lsl.w	r3, r1, r3
 80035d4:	ea42 0103 	orr.w	r1, r2, r3
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10a      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x562>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	0e9b      	lsrs	r3, r3, #26
 80035ea:	3301      	adds	r3, #1
 80035ec:	f003 021f 	and.w	r2, r3, #31
 80035f0:	4613      	mov	r3, r2
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	4413      	add	r3, r2
 80035f6:	051b      	lsls	r3, r3, #20
 80035f8:	e018      	b.n	800362c <HAL_ADC_ConfigChannel+0x594>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003602:	fa93 f3a3 	rbit	r3, r3
 8003606:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800360a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800360c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003612:	2320      	movs	r3, #32
 8003614:	e003      	b.n	800361e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003618:	fab3 f383 	clz	r3, r3
 800361c:	b2db      	uxtb	r3, r3
 800361e:	3301      	adds	r3, #1
 8003620:	f003 021f 	and.w	r2, r3, #31
 8003624:	4613      	mov	r3, r2
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	4413      	add	r3, r2
 800362a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800362c:	430b      	orrs	r3, r1
 800362e:	e080      	b.n	8003732 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003638:	2b00      	cmp	r3, #0
 800363a:	d107      	bne.n	800364c <HAL_ADC_ConfigChannel+0x5b4>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	0e9b      	lsrs	r3, r3, #26
 8003642:	3301      	adds	r3, #1
 8003644:	069b      	lsls	r3, r3, #26
 8003646:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800364a:	e015      	b.n	8003678 <HAL_ADC_ConfigChannel+0x5e0>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003654:	fa93 f3a3 	rbit	r3, r3
 8003658:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800365a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003664:	2320      	movs	r3, #32
 8003666:	e003      	b.n	8003670 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366a:	fab3 f383 	clz	r3, r3
 800366e:	b2db      	uxtb	r3, r3
 8003670:	3301      	adds	r3, #1
 8003672:	069b      	lsls	r3, r3, #26
 8003674:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003680:	2b00      	cmp	r3, #0
 8003682:	d109      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x600>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	0e9b      	lsrs	r3, r3, #26
 800368a:	3301      	adds	r3, #1
 800368c:	f003 031f 	and.w	r3, r3, #31
 8003690:	2101      	movs	r1, #1
 8003692:	fa01 f303 	lsl.w	r3, r1, r3
 8003696:	e017      	b.n	80036c8 <HAL_ADC_ConfigChannel+0x630>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	fa93 f3a3 	rbit	r3, r3
 80036a4:	61fb      	str	r3, [r7, #28]
  return result;
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80036b0:	2320      	movs	r3, #32
 80036b2:	e003      	b.n	80036bc <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	fab3 f383 	clz	r3, r3
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	3301      	adds	r3, #1
 80036be:	f003 031f 	and.w	r3, r3, #31
 80036c2:	2101      	movs	r1, #1
 80036c4:	fa01 f303 	lsl.w	r3, r1, r3
 80036c8:	ea42 0103 	orr.w	r1, r2, r3
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10d      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x65c>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	0e9b      	lsrs	r3, r3, #26
 80036de:	3301      	adds	r3, #1
 80036e0:	f003 021f 	and.w	r2, r3, #31
 80036e4:	4613      	mov	r3, r2
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4413      	add	r3, r2
 80036ea:	3b1e      	subs	r3, #30
 80036ec:	051b      	lsls	r3, r3, #20
 80036ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036f2:	e01d      	b.n	8003730 <HAL_ADC_ConfigChannel+0x698>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	fa93 f3a3 	rbit	r3, r3
 8003700:	613b      	str	r3, [r7, #16]
  return result;
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d103      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800370c:	2320      	movs	r3, #32
 800370e:	e005      	b.n	800371c <HAL_ADC_ConfigChannel+0x684>
 8003710:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	fab3 f383 	clz	r3, r3
 800371a:	b2db      	uxtb	r3, r3
 800371c:	3301      	adds	r3, #1
 800371e:	f003 021f 	and.w	r2, r3, #31
 8003722:	4613      	mov	r3, r2
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	4413      	add	r3, r2
 8003728:	3b1e      	subs	r3, #30
 800372a:	051b      	lsls	r3, r3, #20
 800372c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003730:	430b      	orrs	r3, r1
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	6892      	ldr	r2, [r2, #8]
 8003736:	4619      	mov	r1, r3
 8003738:	f7ff fa81 	bl	8002c3e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	4b44      	ldr	r3, [pc, #272]	; (8003854 <HAL_ADC_ConfigChannel+0x7bc>)
 8003742:	4013      	ands	r3, r2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d07a      	beq.n	800383e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003748:	4843      	ldr	r0, [pc, #268]	; (8003858 <HAL_ADC_ConfigChannel+0x7c0>)
 800374a:	f7ff f9e9 	bl	8002b20 <LL_ADC_GetCommonPathInternalCh>
 800374e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a41      	ldr	r2, [pc, #260]	; (800385c <HAL_ADC_ConfigChannel+0x7c4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d12c      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800375c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003760:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d126      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a3c      	ldr	r2, [pc, #240]	; (8003860 <HAL_ADC_ConfigChannel+0x7c8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d004      	beq.n	800377c <HAL_ADC_ConfigChannel+0x6e4>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a3b      	ldr	r2, [pc, #236]	; (8003864 <HAL_ADC_ConfigChannel+0x7cc>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d15d      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800377c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003780:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003784:	4619      	mov	r1, r3
 8003786:	4834      	ldr	r0, [pc, #208]	; (8003858 <HAL_ADC_ConfigChannel+0x7c0>)
 8003788:	f7ff f9b7 	bl	8002afa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800378c:	4b36      	ldr	r3, [pc, #216]	; (8003868 <HAL_ADC_ConfigChannel+0x7d0>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	099b      	lsrs	r3, r3, #6
 8003792:	4a36      	ldr	r2, [pc, #216]	; (800386c <HAL_ADC_ConfigChannel+0x7d4>)
 8003794:	fba2 2303 	umull	r2, r3, r2, r3
 8003798:	099b      	lsrs	r3, r3, #6
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	4613      	mov	r3, r2
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037a6:	e002      	b.n	80037ae <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1f9      	bne.n	80037a8 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037b4:	e040      	b.n	8003838 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a2d      	ldr	r2, [pc, #180]	; (8003870 <HAL_ADC_ConfigChannel+0x7d8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d118      	bne.n	80037f2 <HAL_ADC_ConfigChannel+0x75a>
 80037c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d112      	bne.n	80037f2 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a23      	ldr	r2, [pc, #140]	; (8003860 <HAL_ADC_ConfigChannel+0x7c8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d004      	beq.n	80037e0 <HAL_ADC_ConfigChannel+0x748>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a22      	ldr	r2, [pc, #136]	; (8003864 <HAL_ADC_ConfigChannel+0x7cc>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d12d      	bne.n	800383c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037e8:	4619      	mov	r1, r3
 80037ea:	481b      	ldr	r0, [pc, #108]	; (8003858 <HAL_ADC_ConfigChannel+0x7c0>)
 80037ec:	f7ff f985 	bl	8002afa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037f0:	e024      	b.n	800383c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a1f      	ldr	r2, [pc, #124]	; (8003874 <HAL_ADC_ConfigChannel+0x7dc>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d120      	bne.n	800383e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d11a      	bne.n	800383e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a14      	ldr	r2, [pc, #80]	; (8003860 <HAL_ADC_ConfigChannel+0x7c8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d115      	bne.n	800383e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003812:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003816:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800381a:	4619      	mov	r1, r3
 800381c:	480e      	ldr	r0, [pc, #56]	; (8003858 <HAL_ADC_ConfigChannel+0x7c0>)
 800381e:	f7ff f96c 	bl	8002afa <LL_ADC_SetCommonPathInternalCh>
 8003822:	e00c      	b.n	800383e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003828:	f043 0220 	orr.w	r2, r3, #32
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003836:	e002      	b.n	800383e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003838:	bf00      	nop
 800383a:	e000      	b.n	800383e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800383c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003846:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800384a:	4618      	mov	r0, r3
 800384c:	37d8      	adds	r7, #216	; 0xd8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	80080000 	.word	0x80080000
 8003858:	50040300 	.word	0x50040300
 800385c:	c7520000 	.word	0xc7520000
 8003860:	50040000 	.word	0x50040000
 8003864:	50040200 	.word	0x50040200
 8003868:	20000000 	.word	0x20000000
 800386c:	053e2d63 	.word	0x053e2d63
 8003870:	cb840000 	.word	0xcb840000
 8003874:	80000001 	.word	0x80000001

08003878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003888:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <__NVIC_SetPriorityGrouping+0x44>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003894:	4013      	ands	r3, r2
 8003896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038aa:	4a04      	ldr	r2, [pc, #16]	; (80038bc <__NVIC_SetPriorityGrouping+0x44>)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	60d3      	str	r3, [r2, #12]
}
 80038b0:	bf00      	nop
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	e000ed00 	.word	0xe000ed00

080038c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038c4:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <__NVIC_GetPriorityGrouping+0x18>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	0a1b      	lsrs	r3, r3, #8
 80038ca:	f003 0307 	and.w	r3, r3, #7
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	e000ed00 	.word	0xe000ed00

080038dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	4603      	mov	r3, r0
 80038e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	db0b      	blt.n	8003906 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	f003 021f 	and.w	r2, r3, #31
 80038f4:	4907      	ldr	r1, [pc, #28]	; (8003914 <__NVIC_EnableIRQ+0x38>)
 80038f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fa:	095b      	lsrs	r3, r3, #5
 80038fc:	2001      	movs	r0, #1
 80038fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	e000e100 	.word	0xe000e100

08003918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	4603      	mov	r3, r0
 8003920:	6039      	str	r1, [r7, #0]
 8003922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003928:	2b00      	cmp	r3, #0
 800392a:	db0a      	blt.n	8003942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	b2da      	uxtb	r2, r3
 8003930:	490c      	ldr	r1, [pc, #48]	; (8003964 <__NVIC_SetPriority+0x4c>)
 8003932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003936:	0112      	lsls	r2, r2, #4
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	440b      	add	r3, r1
 800393c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003940:	e00a      	b.n	8003958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	b2da      	uxtb	r2, r3
 8003946:	4908      	ldr	r1, [pc, #32]	; (8003968 <__NVIC_SetPriority+0x50>)
 8003948:	79fb      	ldrb	r3, [r7, #7]
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	3b04      	subs	r3, #4
 8003950:	0112      	lsls	r2, r2, #4
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	440b      	add	r3, r1
 8003956:	761a      	strb	r2, [r3, #24]
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	e000e100 	.word	0xe000e100
 8003968:	e000ed00 	.word	0xe000ed00

0800396c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800396c:	b480      	push	{r7}
 800396e:	b089      	sub	sp, #36	; 0x24
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f1c3 0307 	rsb	r3, r3, #7
 8003986:	2b04      	cmp	r3, #4
 8003988:	bf28      	it	cs
 800398a:	2304      	movcs	r3, #4
 800398c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	3304      	adds	r3, #4
 8003992:	2b06      	cmp	r3, #6
 8003994:	d902      	bls.n	800399c <NVIC_EncodePriority+0x30>
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	3b03      	subs	r3, #3
 800399a:	e000      	b.n	800399e <NVIC_EncodePriority+0x32>
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a0:	f04f 32ff 	mov.w	r2, #4294967295
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	43da      	mvns	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	401a      	ands	r2, r3
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039b4:	f04f 31ff 	mov.w	r1, #4294967295
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	fa01 f303 	lsl.w	r3, r1, r3
 80039be:	43d9      	mvns	r1, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c4:	4313      	orrs	r3, r2
         );
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3724      	adds	r7, #36	; 0x24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
	...

080039d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3b01      	subs	r3, #1
 80039e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039e4:	d301      	bcc.n	80039ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039e6:	2301      	movs	r3, #1
 80039e8:	e00f      	b.n	8003a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039ea:	4a0a      	ldr	r2, [pc, #40]	; (8003a14 <SysTick_Config+0x40>)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039f2:	210f      	movs	r1, #15
 80039f4:	f04f 30ff 	mov.w	r0, #4294967295
 80039f8:	f7ff ff8e 	bl	8003918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039fc:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <SysTick_Config+0x40>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a02:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <SysTick_Config+0x40>)
 8003a04:	2207      	movs	r2, #7
 8003a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	e000e010 	.word	0xe000e010

08003a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff ff29 	bl	8003878 <__NVIC_SetPriorityGrouping>
}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b086      	sub	sp, #24
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	4603      	mov	r3, r0
 8003a36:	60b9      	str	r1, [r7, #8]
 8003a38:	607a      	str	r2, [r7, #4]
 8003a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a40:	f7ff ff3e 	bl	80038c0 <__NVIC_GetPriorityGrouping>
 8003a44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	68b9      	ldr	r1, [r7, #8]
 8003a4a:	6978      	ldr	r0, [r7, #20]
 8003a4c:	f7ff ff8e 	bl	800396c <NVIC_EncodePriority>
 8003a50:	4602      	mov	r2, r0
 8003a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a56:	4611      	mov	r1, r2
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff ff5d 	bl	8003918 <__NVIC_SetPriority>
}
 8003a5e:	bf00      	nop
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b082      	sub	sp, #8
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff ff31 	bl	80038dc <__NVIC_EnableIRQ>
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b082      	sub	sp, #8
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7ff ffa2 	bl	80039d4 <SysTick_Config>
 8003a90:	4603      	mov	r3, r0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e098      	b.n	8003be0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	4b4d      	ldr	r3, [pc, #308]	; (8003bec <HAL_DMA_Init+0x150>)
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d80f      	bhi.n	8003ada <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	4b4b      	ldr	r3, [pc, #300]	; (8003bf0 <HAL_DMA_Init+0x154>)
 8003ac2:	4413      	add	r3, r2
 8003ac4:	4a4b      	ldr	r2, [pc, #300]	; (8003bf4 <HAL_DMA_Init+0x158>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	091b      	lsrs	r3, r3, #4
 8003acc:	009a      	lsls	r2, r3, #2
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a48      	ldr	r2, [pc, #288]	; (8003bf8 <HAL_DMA_Init+0x15c>)
 8003ad6:	641a      	str	r2, [r3, #64]	; 0x40
 8003ad8:	e00e      	b.n	8003af8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	4b46      	ldr	r3, [pc, #280]	; (8003bfc <HAL_DMA_Init+0x160>)
 8003ae2:	4413      	add	r3, r2
 8003ae4:	4a43      	ldr	r2, [pc, #268]	; (8003bf4 <HAL_DMA_Init+0x158>)
 8003ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aea:	091b      	lsrs	r3, r3, #4
 8003aec:	009a      	lsls	r2, r3, #2
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a42      	ldr	r2, [pc, #264]	; (8003c00 <HAL_DMA_Init+0x164>)
 8003af6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b52:	d039      	beq.n	8003bc8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	4a27      	ldr	r2, [pc, #156]	; (8003bf8 <HAL_DMA_Init+0x15c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d11a      	bne.n	8003b94 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b5e:	4b29      	ldr	r3, [pc, #164]	; (8003c04 <HAL_DMA_Init+0x168>)
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b66:	f003 031c 	and.w	r3, r3, #28
 8003b6a:	210f      	movs	r1, #15
 8003b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b70:	43db      	mvns	r3, r3
 8003b72:	4924      	ldr	r1, [pc, #144]	; (8003c04 <HAL_DMA_Init+0x168>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003b78:	4b22      	ldr	r3, [pc, #136]	; (8003c04 <HAL_DMA_Init+0x168>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6859      	ldr	r1, [r3, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b84:	f003 031c 	and.w	r3, r3, #28
 8003b88:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8c:	491d      	ldr	r1, [pc, #116]	; (8003c04 <HAL_DMA_Init+0x168>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	600b      	str	r3, [r1, #0]
 8003b92:	e019      	b.n	8003bc8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b94:	4b1c      	ldr	r3, [pc, #112]	; (8003c08 <HAL_DMA_Init+0x16c>)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9c:	f003 031c 	and.w	r3, r3, #28
 8003ba0:	210f      	movs	r1, #15
 8003ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	4917      	ldr	r1, [pc, #92]	; (8003c08 <HAL_DMA_Init+0x16c>)
 8003baa:	4013      	ands	r3, r2
 8003bac:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003bae:	4b16      	ldr	r3, [pc, #88]	; (8003c08 <HAL_DMA_Init+0x16c>)
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6859      	ldr	r1, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bba:	f003 031c 	and.w	r3, r3, #28
 8003bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc2:	4911      	ldr	r1, [pc, #68]	; (8003c08 <HAL_DMA_Init+0x16c>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	40020407 	.word	0x40020407
 8003bf0:	bffdfff8 	.word	0xbffdfff8
 8003bf4:	cccccccd 	.word	0xcccccccd
 8003bf8:	40020000 	.word	0x40020000
 8003bfc:	bffdfbf8 	.word	0xbffdfbf8
 8003c00:	40020400 	.word	0x40020400
 8003c04:	400200a8 	.word	0x400200a8
 8003c08:	400204a8 	.word	0x400204a8

08003c0c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d008      	beq.n	8003c36 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2204      	movs	r2, #4
 8003c28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e022      	b.n	8003c7c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 020e 	bic.w	r2, r2, #14
 8003c44:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0201 	bic.w	r2, r2, #1
 8003c54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5a:	f003 021c 	and.w	r2, r3, #28
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	2101      	movs	r1, #1
 8003c64:	fa01 f202 	lsl.w	r2, r1, r2
 8003c68:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c90:	2300      	movs	r3, #0
 8003c92:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d005      	beq.n	8003cac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2204      	movs	r2, #4
 8003ca4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	73fb      	strb	r3, [r7, #15]
 8003caa:	e029      	b.n	8003d00 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 020e 	bic.w	r2, r2, #14
 8003cba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0201 	bic.w	r2, r2, #1
 8003cca:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd0:	f003 021c 	and.w	r2, r3, #28
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	2101      	movs	r1, #1
 8003cda:	fa01 f202 	lsl.w	r2, r1, r2
 8003cde:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	4798      	blx	r3
    }
  }
  return status;
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b084      	sub	sp, #16
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d26:	f003 031c 	and.w	r3, r3, #28
 8003d2a:	2204      	movs	r2, #4
 8003d2c:	409a      	lsls	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4013      	ands	r3, r2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d026      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x7a>
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d021      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d107      	bne.n	8003d5e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0204 	bic.w	r2, r2, #4
 8003d5c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	f003 021c 	and.w	r2, r3, #28
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	2104      	movs	r1, #4
 8003d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d70:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d071      	beq.n	8003e5e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003d82:	e06c      	b.n	8003e5e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d88:	f003 031c 	and.w	r3, r3, #28
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	409a      	lsls	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4013      	ands	r3, r2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d02e      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xec>
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d029      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0320 	and.w	r3, r3, #32
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10b      	bne.n	8003dc8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 020a 	bic.w	r2, r2, #10
 8003dbe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dcc:	f003 021c 	and.w	r2, r3, #28
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	2102      	movs	r1, #2
 8003dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dda:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d038      	beq.n	8003e5e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003df4:	e033      	b.n	8003e5e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfa:	f003 031c 	and.w	r3, r3, #28
 8003dfe:	2208      	movs	r2, #8
 8003e00:	409a      	lsls	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4013      	ands	r3, r2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d02a      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x156>
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d025      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 020e 	bic.w	r2, r2, #14
 8003e22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e28:	f003 021c 	and.w	r2, r3, #28
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	2101      	movs	r1, #1
 8003e32:	fa01 f202 	lsl.w	r2, r1, r2
 8003e36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d004      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e5e:	bf00      	nop
 8003e60:	bf00      	nop
}
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e72:	2300      	movs	r3, #0
 8003e74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e76:	e17f      	b.n	8004178 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	fa01 f303 	lsl.w	r3, r1, r3
 8003e84:	4013      	ands	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 8171 	beq.w	8004172 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f003 0303 	and.w	r3, r3, #3
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d005      	beq.n	8003ea8 <HAL_GPIO_Init+0x40>
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 0303 	and.w	r3, r3, #3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d130      	bne.n	8003f0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	2203      	movs	r2, #3
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ede:	2201      	movs	r2, #1
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4013      	ands	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	091b      	lsrs	r3, r3, #4
 8003ef4:	f003 0201 	and.w	r2, r3, #1
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	2b03      	cmp	r3, #3
 8003f14:	d118      	bne.n	8003f48 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	43db      	mvns	r3, r3
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	08db      	lsrs	r3, r3, #3
 8003f32:	f003 0201 	and.w	r2, r3, #1
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f003 0303 	and.w	r3, r3, #3
 8003f50:	2b03      	cmp	r3, #3
 8003f52:	d017      	beq.n	8003f84 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	2203      	movs	r2, #3
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	43db      	mvns	r3, r3
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 0303 	and.w	r3, r3, #3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d123      	bne.n	8003fd8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	08da      	lsrs	r2, r3, #3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3208      	adds	r2, #8
 8003f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	220f      	movs	r2, #15
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	43db      	mvns	r3, r3
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	08da      	lsrs	r2, r3, #3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3208      	adds	r2, #8
 8003fd2:	6939      	ldr	r1, [r7, #16]
 8003fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4013      	ands	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 0203 	and.w	r2, r3, #3
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80ac 	beq.w	8004172 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800401a:	4b5f      	ldr	r3, [pc, #380]	; (8004198 <HAL_GPIO_Init+0x330>)
 800401c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800401e:	4a5e      	ldr	r2, [pc, #376]	; (8004198 <HAL_GPIO_Init+0x330>)
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	6613      	str	r3, [r2, #96]	; 0x60
 8004026:	4b5c      	ldr	r3, [pc, #368]	; (8004198 <HAL_GPIO_Init+0x330>)
 8004028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	60bb      	str	r3, [r7, #8]
 8004030:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004032:	4a5a      	ldr	r2, [pc, #360]	; (800419c <HAL_GPIO_Init+0x334>)
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	089b      	lsrs	r3, r3, #2
 8004038:	3302      	adds	r3, #2
 800403a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800403e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	220f      	movs	r2, #15
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	43db      	mvns	r3, r3
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4013      	ands	r3, r2
 8004054:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800405c:	d025      	beq.n	80040aa <HAL_GPIO_Init+0x242>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a4f      	ldr	r2, [pc, #316]	; (80041a0 <HAL_GPIO_Init+0x338>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d01f      	beq.n	80040a6 <HAL_GPIO_Init+0x23e>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a4e      	ldr	r2, [pc, #312]	; (80041a4 <HAL_GPIO_Init+0x33c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d019      	beq.n	80040a2 <HAL_GPIO_Init+0x23a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a4d      	ldr	r2, [pc, #308]	; (80041a8 <HAL_GPIO_Init+0x340>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d013      	beq.n	800409e <HAL_GPIO_Init+0x236>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a4c      	ldr	r2, [pc, #304]	; (80041ac <HAL_GPIO_Init+0x344>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00d      	beq.n	800409a <HAL_GPIO_Init+0x232>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a4b      	ldr	r2, [pc, #300]	; (80041b0 <HAL_GPIO_Init+0x348>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d007      	beq.n	8004096 <HAL_GPIO_Init+0x22e>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a4a      	ldr	r2, [pc, #296]	; (80041b4 <HAL_GPIO_Init+0x34c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d101      	bne.n	8004092 <HAL_GPIO_Init+0x22a>
 800408e:	2306      	movs	r3, #6
 8004090:	e00c      	b.n	80040ac <HAL_GPIO_Init+0x244>
 8004092:	2307      	movs	r3, #7
 8004094:	e00a      	b.n	80040ac <HAL_GPIO_Init+0x244>
 8004096:	2305      	movs	r3, #5
 8004098:	e008      	b.n	80040ac <HAL_GPIO_Init+0x244>
 800409a:	2304      	movs	r3, #4
 800409c:	e006      	b.n	80040ac <HAL_GPIO_Init+0x244>
 800409e:	2303      	movs	r3, #3
 80040a0:	e004      	b.n	80040ac <HAL_GPIO_Init+0x244>
 80040a2:	2302      	movs	r3, #2
 80040a4:	e002      	b.n	80040ac <HAL_GPIO_Init+0x244>
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <HAL_GPIO_Init+0x244>
 80040aa:	2300      	movs	r3, #0
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	f002 0203 	and.w	r2, r2, #3
 80040b2:	0092      	lsls	r2, r2, #2
 80040b4:	4093      	lsls	r3, r2
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040bc:	4937      	ldr	r1, [pc, #220]	; (800419c <HAL_GPIO_Init+0x334>)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	089b      	lsrs	r3, r3, #2
 80040c2:	3302      	adds	r3, #2
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040ca:	4b3b      	ldr	r3, [pc, #236]	; (80041b8 <HAL_GPIO_Init+0x350>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	43db      	mvns	r3, r3
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4013      	ands	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040ee:	4a32      	ldr	r2, [pc, #200]	; (80041b8 <HAL_GPIO_Init+0x350>)
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040f4:	4b30      	ldr	r3, [pc, #192]	; (80041b8 <HAL_GPIO_Init+0x350>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	43db      	mvns	r3, r3
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	4013      	ands	r3, r2
 8004102:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004118:	4a27      	ldr	r2, [pc, #156]	; (80041b8 <HAL_GPIO_Init+0x350>)
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800411e:	4b26      	ldr	r3, [pc, #152]	; (80041b8 <HAL_GPIO_Init+0x350>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	43db      	mvns	r3, r3
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4013      	ands	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4313      	orrs	r3, r2
 8004140:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004142:	4a1d      	ldr	r2, [pc, #116]	; (80041b8 <HAL_GPIO_Init+0x350>)
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004148:	4b1b      	ldr	r3, [pc, #108]	; (80041b8 <HAL_GPIO_Init+0x350>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	43db      	mvns	r3, r3
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4013      	ands	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800416c:	4a12      	ldr	r2, [pc, #72]	; (80041b8 <HAL_GPIO_Init+0x350>)
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	3301      	adds	r3, #1
 8004176:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	fa22 f303 	lsr.w	r3, r2, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	f47f ae78 	bne.w	8003e78 <HAL_GPIO_Init+0x10>
  }
}
 8004188:	bf00      	nop
 800418a:	bf00      	nop
 800418c:	371c      	adds	r7, #28
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40021000 	.word	0x40021000
 800419c:	40010000 	.word	0x40010000
 80041a0:	48000400 	.word	0x48000400
 80041a4:	48000800 	.word	0x48000800
 80041a8:	48000c00 	.word	0x48000c00
 80041ac:	48001000 	.word	0x48001000
 80041b0:	48001400 	.word	0x48001400
 80041b4:	48001800 	.word	0x48001800
 80041b8:	40010400 	.word	0x40010400

080041bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80041c0:	4b04      	ldr	r3, [pc, #16]	; (80041d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40007000 	.word	0x40007000

080041d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e6:	d130      	bne.n	800424a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041e8:	4b23      	ldr	r3, [pc, #140]	; (8004278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f4:	d038      	beq.n	8004268 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041f6:	4b20      	ldr	r3, [pc, #128]	; (8004278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041fe:	4a1e      	ldr	r2, [pc, #120]	; (8004278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004200:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004204:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004206:	4b1d      	ldr	r3, [pc, #116]	; (800427c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2232      	movs	r2, #50	; 0x32
 800420c:	fb02 f303 	mul.w	r3, r2, r3
 8004210:	4a1b      	ldr	r2, [pc, #108]	; (8004280 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	0c9b      	lsrs	r3, r3, #18
 8004218:	3301      	adds	r3, #1
 800421a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800421c:	e002      	b.n	8004224 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	3b01      	subs	r3, #1
 8004222:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004224:	4b14      	ldr	r3, [pc, #80]	; (8004278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800422c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004230:	d102      	bne.n	8004238 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1f2      	bne.n	800421e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004238:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004244:	d110      	bne.n	8004268 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e00f      	b.n	800426a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800424a:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004256:	d007      	beq.n	8004268 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004258:	4b07      	ldr	r3, [pc, #28]	; (8004278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004260:	4a05      	ldr	r2, [pc, #20]	; (8004278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004266:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40007000 	.word	0x40007000
 800427c:	20000000 	.word	0x20000000
 8004280:	431bde83 	.word	0x431bde83

08004284 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e3c6      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004296:	4ba1      	ldr	r3, [pc, #644]	; (800451c <HAL_RCC_OscConfig+0x298>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 030c 	and.w	r3, r3, #12
 800429e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042a0:	4b9e      	ldr	r3, [pc, #632]	; (800451c <HAL_RCC_OscConfig+0x298>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0310 	and.w	r3, r3, #16
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 80e4 	beq.w	8004480 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d007      	beq.n	80042ce <HAL_RCC_OscConfig+0x4a>
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	2b0c      	cmp	r3, #12
 80042c2:	f040 808b 	bne.w	80043dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	f040 8087 	bne.w	80043dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042ce:	4b93      	ldr	r3, [pc, #588]	; (800451c <HAL_RCC_OscConfig+0x298>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d005      	beq.n	80042e6 <HAL_RCC_OscConfig+0x62>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e39e      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1a      	ldr	r2, [r3, #32]
 80042ea:	4b8c      	ldr	r3, [pc, #560]	; (800451c <HAL_RCC_OscConfig+0x298>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d004      	beq.n	8004300 <HAL_RCC_OscConfig+0x7c>
 80042f6:	4b89      	ldr	r3, [pc, #548]	; (800451c <HAL_RCC_OscConfig+0x298>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042fe:	e005      	b.n	800430c <HAL_RCC_OscConfig+0x88>
 8004300:	4b86      	ldr	r3, [pc, #536]	; (800451c <HAL_RCC_OscConfig+0x298>)
 8004302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004306:	091b      	lsrs	r3, r3, #4
 8004308:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800430c:	4293      	cmp	r3, r2
 800430e:	d223      	bcs.n	8004358 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fd53 	bl	8004dc0 <RCC_SetFlashLatencyFromMSIRange>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e37f      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004324:	4b7d      	ldr	r3, [pc, #500]	; (800451c <HAL_RCC_OscConfig+0x298>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a7c      	ldr	r2, [pc, #496]	; (800451c <HAL_RCC_OscConfig+0x298>)
 800432a:	f043 0308 	orr.w	r3, r3, #8
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	4b7a      	ldr	r3, [pc, #488]	; (800451c <HAL_RCC_OscConfig+0x298>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	4977      	ldr	r1, [pc, #476]	; (800451c <HAL_RCC_OscConfig+0x298>)
 800433e:	4313      	orrs	r3, r2
 8004340:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004342:	4b76      	ldr	r3, [pc, #472]	; (800451c <HAL_RCC_OscConfig+0x298>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	021b      	lsls	r3, r3, #8
 8004350:	4972      	ldr	r1, [pc, #456]	; (800451c <HAL_RCC_OscConfig+0x298>)
 8004352:	4313      	orrs	r3, r2
 8004354:	604b      	str	r3, [r1, #4]
 8004356:	e025      	b.n	80043a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004358:	4b70      	ldr	r3, [pc, #448]	; (800451c <HAL_RCC_OscConfig+0x298>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a6f      	ldr	r2, [pc, #444]	; (800451c <HAL_RCC_OscConfig+0x298>)
 800435e:	f043 0308 	orr.w	r3, r3, #8
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	4b6d      	ldr	r3, [pc, #436]	; (800451c <HAL_RCC_OscConfig+0x298>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	496a      	ldr	r1, [pc, #424]	; (800451c <HAL_RCC_OscConfig+0x298>)
 8004372:	4313      	orrs	r3, r2
 8004374:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004376:	4b69      	ldr	r3, [pc, #420]	; (800451c <HAL_RCC_OscConfig+0x298>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	021b      	lsls	r3, r3, #8
 8004384:	4965      	ldr	r1, [pc, #404]	; (800451c <HAL_RCC_OscConfig+0x298>)
 8004386:	4313      	orrs	r3, r2
 8004388:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d109      	bne.n	80043a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fd13 	bl	8004dc0 <RCC_SetFlashLatencyFromMSIRange>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e33f      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043a4:	f000 fc48 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 80043a8:	4602      	mov	r2, r0
 80043aa:	4b5c      	ldr	r3, [pc, #368]	; (800451c <HAL_RCC_OscConfig+0x298>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	091b      	lsrs	r3, r3, #4
 80043b0:	f003 030f 	and.w	r3, r3, #15
 80043b4:	495a      	ldr	r1, [pc, #360]	; (8004520 <HAL_RCC_OscConfig+0x29c>)
 80043b6:	5ccb      	ldrb	r3, [r1, r3]
 80043b8:	f003 031f 	and.w	r3, r3, #31
 80043bc:	fa22 f303 	lsr.w	r3, r2, r3
 80043c0:	4a58      	ldr	r2, [pc, #352]	; (8004524 <HAL_RCC_OscConfig+0x2a0>)
 80043c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80043c4:	4b58      	ldr	r3, [pc, #352]	; (8004528 <HAL_RCC_OscConfig+0x2a4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fe fb27 	bl	8002a1c <HAL_InitTick>
 80043ce:	4603      	mov	r3, r0
 80043d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d052      	beq.n	800447e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
 80043da:	e323      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d032      	beq.n	800444a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043e4:	4b4d      	ldr	r3, [pc, #308]	; (800451c <HAL_RCC_OscConfig+0x298>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a4c      	ldr	r2, [pc, #304]	; (800451c <HAL_RCC_OscConfig+0x298>)
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043f0:	f7fe fb64 	bl	8002abc <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043f8:	f7fe fb60 	bl	8002abc <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e30c      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800440a:	4b44      	ldr	r3, [pc, #272]	; (800451c <HAL_RCC_OscConfig+0x298>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0f0      	beq.n	80043f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004416:	4b41      	ldr	r3, [pc, #260]	; (800451c <HAL_RCC_OscConfig+0x298>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a40      	ldr	r2, [pc, #256]	; (800451c <HAL_RCC_OscConfig+0x298>)
 800441c:	f043 0308 	orr.w	r3, r3, #8
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	4b3e      	ldr	r3, [pc, #248]	; (800451c <HAL_RCC_OscConfig+0x298>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	493b      	ldr	r1, [pc, #236]	; (800451c <HAL_RCC_OscConfig+0x298>)
 8004430:	4313      	orrs	r3, r2
 8004432:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004434:	4b39      	ldr	r3, [pc, #228]	; (800451c <HAL_RCC_OscConfig+0x298>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	021b      	lsls	r3, r3, #8
 8004442:	4936      	ldr	r1, [pc, #216]	; (800451c <HAL_RCC_OscConfig+0x298>)
 8004444:	4313      	orrs	r3, r2
 8004446:	604b      	str	r3, [r1, #4]
 8004448:	e01a      	b.n	8004480 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800444a:	4b34      	ldr	r3, [pc, #208]	; (800451c <HAL_RCC_OscConfig+0x298>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a33      	ldr	r2, [pc, #204]	; (800451c <HAL_RCC_OscConfig+0x298>)
 8004450:	f023 0301 	bic.w	r3, r3, #1
 8004454:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004456:	f7fe fb31 	bl	8002abc <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800445e:	f7fe fb2d 	bl	8002abc <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e2d9      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004470:	4b2a      	ldr	r3, [pc, #168]	; (800451c <HAL_RCC_OscConfig+0x298>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1f0      	bne.n	800445e <HAL_RCC_OscConfig+0x1da>
 800447c:	e000      	b.n	8004480 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800447e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d074      	beq.n	8004576 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	2b08      	cmp	r3, #8
 8004490:	d005      	beq.n	800449e <HAL_RCC_OscConfig+0x21a>
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	2b0c      	cmp	r3, #12
 8004496:	d10e      	bne.n	80044b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2b03      	cmp	r3, #3
 800449c:	d10b      	bne.n	80044b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800449e:	4b1f      	ldr	r3, [pc, #124]	; (800451c <HAL_RCC_OscConfig+0x298>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d064      	beq.n	8004574 <HAL_RCC_OscConfig+0x2f0>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d160      	bne.n	8004574 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e2b6      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044be:	d106      	bne.n	80044ce <HAL_RCC_OscConfig+0x24a>
 80044c0:	4b16      	ldr	r3, [pc, #88]	; (800451c <HAL_RCC_OscConfig+0x298>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a15      	ldr	r2, [pc, #84]	; (800451c <HAL_RCC_OscConfig+0x298>)
 80044c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ca:	6013      	str	r3, [r2, #0]
 80044cc:	e01d      	b.n	800450a <HAL_RCC_OscConfig+0x286>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044d6:	d10c      	bne.n	80044f2 <HAL_RCC_OscConfig+0x26e>
 80044d8:	4b10      	ldr	r3, [pc, #64]	; (800451c <HAL_RCC_OscConfig+0x298>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a0f      	ldr	r2, [pc, #60]	; (800451c <HAL_RCC_OscConfig+0x298>)
 80044de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	4b0d      	ldr	r3, [pc, #52]	; (800451c <HAL_RCC_OscConfig+0x298>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a0c      	ldr	r2, [pc, #48]	; (800451c <HAL_RCC_OscConfig+0x298>)
 80044ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	e00b      	b.n	800450a <HAL_RCC_OscConfig+0x286>
 80044f2:	4b0a      	ldr	r3, [pc, #40]	; (800451c <HAL_RCC_OscConfig+0x298>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a09      	ldr	r2, [pc, #36]	; (800451c <HAL_RCC_OscConfig+0x298>)
 80044f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	4b07      	ldr	r3, [pc, #28]	; (800451c <HAL_RCC_OscConfig+0x298>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a06      	ldr	r2, [pc, #24]	; (800451c <HAL_RCC_OscConfig+0x298>)
 8004504:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004508:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d01c      	beq.n	800454c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004512:	f7fe fad3 	bl	8002abc <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004518:	e011      	b.n	800453e <HAL_RCC_OscConfig+0x2ba>
 800451a:	bf00      	nop
 800451c:	40021000 	.word	0x40021000
 8004520:	0800a96c 	.word	0x0800a96c
 8004524:	20000000 	.word	0x20000000
 8004528:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800452c:	f7fe fac6 	bl	8002abc <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b64      	cmp	r3, #100	; 0x64
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e272      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800453e:	4baf      	ldr	r3, [pc, #700]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0f0      	beq.n	800452c <HAL_RCC_OscConfig+0x2a8>
 800454a:	e014      	b.n	8004576 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454c:	f7fe fab6 	bl	8002abc <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004554:	f7fe fab2 	bl	8002abc <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b64      	cmp	r3, #100	; 0x64
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e25e      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004566:	4ba5      	ldr	r3, [pc, #660]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <HAL_RCC_OscConfig+0x2d0>
 8004572:	e000      	b.n	8004576 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d060      	beq.n	8004644 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	2b04      	cmp	r3, #4
 8004586:	d005      	beq.n	8004594 <HAL_RCC_OscConfig+0x310>
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	2b0c      	cmp	r3, #12
 800458c:	d119      	bne.n	80045c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2b02      	cmp	r3, #2
 8004592:	d116      	bne.n	80045c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004594:	4b99      	ldr	r3, [pc, #612]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <HAL_RCC_OscConfig+0x328>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e23b      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ac:	4b93      	ldr	r3, [pc, #588]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	061b      	lsls	r3, r3, #24
 80045ba:	4990      	ldr	r1, [pc, #576]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045c0:	e040      	b.n	8004644 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d023      	beq.n	8004612 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045ca:	4b8c      	ldr	r3, [pc, #560]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a8b      	ldr	r2, [pc, #556]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 80045d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d6:	f7fe fa71 	bl	8002abc <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045de:	f7fe fa6d 	bl	8002abc <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e219      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045f0:	4b82      	ldr	r3, [pc, #520]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0f0      	beq.n	80045de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045fc:	4b7f      	ldr	r3, [pc, #508]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	061b      	lsls	r3, r3, #24
 800460a:	497c      	ldr	r1, [pc, #496]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 800460c:	4313      	orrs	r3, r2
 800460e:	604b      	str	r3, [r1, #4]
 8004610:	e018      	b.n	8004644 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004612:	4b7a      	ldr	r3, [pc, #488]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a79      	ldr	r2, [pc, #484]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 8004618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800461c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461e:	f7fe fa4d 	bl	8002abc <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004626:	f7fe fa49 	bl	8002abc <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e1f5      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004638:	4b70      	ldr	r3, [pc, #448]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1f0      	bne.n	8004626 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	2b00      	cmp	r3, #0
 800464e:	d03c      	beq.n	80046ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01c      	beq.n	8004692 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004658:	4b68      	ldr	r3, [pc, #416]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 800465a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800465e:	4a67      	ldr	r2, [pc, #412]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 8004660:	f043 0301 	orr.w	r3, r3, #1
 8004664:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004668:	f7fe fa28 	bl	8002abc <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004670:	f7fe fa24 	bl	8002abc <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e1d0      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004682:	4b5e      	ldr	r3, [pc, #376]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 8004684:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0ef      	beq.n	8004670 <HAL_RCC_OscConfig+0x3ec>
 8004690:	e01b      	b.n	80046ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004692:	4b5a      	ldr	r3, [pc, #360]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 8004694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004698:	4a58      	ldr	r2, [pc, #352]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 800469a:	f023 0301 	bic.w	r3, r3, #1
 800469e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a2:	f7fe fa0b 	bl	8002abc <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046a8:	e008      	b.n	80046bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046aa:	f7fe fa07 	bl	8002abc <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e1b3      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046bc:	4b4f      	ldr	r3, [pc, #316]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 80046be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1ef      	bne.n	80046aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 80a6 	beq.w	8004824 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046d8:	2300      	movs	r3, #0
 80046da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80046dc:	4b47      	ldr	r3, [pc, #284]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 80046de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10d      	bne.n	8004704 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046e8:	4b44      	ldr	r3, [pc, #272]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 80046ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ec:	4a43      	ldr	r2, [pc, #268]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 80046ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f2:	6593      	str	r3, [r2, #88]	; 0x58
 80046f4:	4b41      	ldr	r3, [pc, #260]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 80046f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fc:	60bb      	str	r3, [r7, #8]
 80046fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004700:	2301      	movs	r3, #1
 8004702:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004704:	4b3e      	ldr	r3, [pc, #248]	; (8004800 <HAL_RCC_OscConfig+0x57c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470c:	2b00      	cmp	r3, #0
 800470e:	d118      	bne.n	8004742 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004710:	4b3b      	ldr	r3, [pc, #236]	; (8004800 <HAL_RCC_OscConfig+0x57c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a3a      	ldr	r2, [pc, #232]	; (8004800 <HAL_RCC_OscConfig+0x57c>)
 8004716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800471a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800471c:	f7fe f9ce 	bl	8002abc <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004724:	f7fe f9ca 	bl	8002abc <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e176      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004736:	4b32      	ldr	r3, [pc, #200]	; (8004800 <HAL_RCC_OscConfig+0x57c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0f0      	beq.n	8004724 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d108      	bne.n	800475c <HAL_RCC_OscConfig+0x4d8>
 800474a:	4b2c      	ldr	r3, [pc, #176]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 800474c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004750:	4a2a      	ldr	r2, [pc, #168]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 8004752:	f043 0301 	orr.w	r3, r3, #1
 8004756:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800475a:	e024      	b.n	80047a6 <HAL_RCC_OscConfig+0x522>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b05      	cmp	r3, #5
 8004762:	d110      	bne.n	8004786 <HAL_RCC_OscConfig+0x502>
 8004764:	4b25      	ldr	r3, [pc, #148]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476a:	4a24      	ldr	r2, [pc, #144]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 800476c:	f043 0304 	orr.w	r3, r3, #4
 8004770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004774:	4b21      	ldr	r3, [pc, #132]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477a:	4a20      	ldr	r2, [pc, #128]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 800477c:	f043 0301 	orr.w	r3, r3, #1
 8004780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004784:	e00f      	b.n	80047a6 <HAL_RCC_OscConfig+0x522>
 8004786:	4b1d      	ldr	r3, [pc, #116]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 8004788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478c:	4a1b      	ldr	r2, [pc, #108]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 800478e:	f023 0301 	bic.w	r3, r3, #1
 8004792:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004796:	4b19      	ldr	r3, [pc, #100]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 8004798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479c:	4a17      	ldr	r2, [pc, #92]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 800479e:	f023 0304 	bic.w	r3, r3, #4
 80047a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d016      	beq.n	80047dc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ae:	f7fe f985 	bl	8002abc <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047b4:	e00a      	b.n	80047cc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b6:	f7fe f981 	bl	8002abc <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e12b      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047cc:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <HAL_RCC_OscConfig+0x578>)
 80047ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0ed      	beq.n	80047b6 <HAL_RCC_OscConfig+0x532>
 80047da:	e01a      	b.n	8004812 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047dc:	f7fe f96e 	bl	8002abc <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047e2:	e00f      	b.n	8004804 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e4:	f7fe f96a 	bl	8002abc <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d906      	bls.n	8004804 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e114      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a0>
 80047fa:	bf00      	nop
 80047fc:	40021000 	.word	0x40021000
 8004800:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004804:	4b89      	ldr	r3, [pc, #548]	; (8004a2c <HAL_RCC_OscConfig+0x7a8>)
 8004806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1e8      	bne.n	80047e4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004812:	7ffb      	ldrb	r3, [r7, #31]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d105      	bne.n	8004824 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004818:	4b84      	ldr	r3, [pc, #528]	; (8004a2c <HAL_RCC_OscConfig+0x7a8>)
 800481a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481c:	4a83      	ldr	r2, [pc, #524]	; (8004a2c <HAL_RCC_OscConfig+0x7a8>)
 800481e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004822:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 80fa 	beq.w	8004a22 <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004832:	2b02      	cmp	r3, #2
 8004834:	f040 80d0 	bne.w	80049d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004838:	4b7c      	ldr	r3, [pc, #496]	; (8004a2c <HAL_RCC_OscConfig+0x7a8>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f003 0203 	and.w	r2, r3, #3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	429a      	cmp	r2, r3
 800484a:	d130      	bne.n	80048ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	3b01      	subs	r3, #1
 8004858:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800485a:	429a      	cmp	r2, r3
 800485c:	d127      	bne.n	80048ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004868:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800486a:	429a      	cmp	r2, r3
 800486c:	d11f      	bne.n	80048ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004878:	2a07      	cmp	r2, #7
 800487a:	bf14      	ite	ne
 800487c:	2201      	movne	r2, #1
 800487e:	2200      	moveq	r2, #0
 8004880:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004882:	4293      	cmp	r3, r2
 8004884:	d113      	bne.n	80048ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004890:	085b      	lsrs	r3, r3, #1
 8004892:	3b01      	subs	r3, #1
 8004894:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004896:	429a      	cmp	r2, r3
 8004898:	d109      	bne.n	80048ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	085b      	lsrs	r3, r3, #1
 80048a6:	3b01      	subs	r3, #1
 80048a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d06e      	beq.n	800498c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	2b0c      	cmp	r3, #12
 80048b2:	d069      	beq.n	8004988 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80048b4:	4b5d      	ldr	r3, [pc, #372]	; (8004a2c <HAL_RCC_OscConfig+0x7a8>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d105      	bne.n	80048cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80048c0:	4b5a      	ldr	r3, [pc, #360]	; (8004a2c <HAL_RCC_OscConfig+0x7a8>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e0a9      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80048d0:	4b56      	ldr	r3, [pc, #344]	; (8004a2c <HAL_RCC_OscConfig+0x7a8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a55      	ldr	r2, [pc, #340]	; (8004a2c <HAL_RCC_OscConfig+0x7a8>)
 80048d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048dc:	f7fe f8ee 	bl	8002abc <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e4:	f7fe f8ea 	bl	8002abc <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e096      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048f6:	4b4d      	ldr	r3, [pc, #308]	; (8004a2c <HAL_RCC_OscConfig+0x7a8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f0      	bne.n	80048e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004902:	4b4a      	ldr	r3, [pc, #296]	; (8004a2c <HAL_RCC_OscConfig+0x7a8>)
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	4b4a      	ldr	r3, [pc, #296]	; (8004a30 <HAL_RCC_OscConfig+0x7ac>)
 8004908:	4013      	ands	r3, r2
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004912:	3a01      	subs	r2, #1
 8004914:	0112      	lsls	r2, r2, #4
 8004916:	4311      	orrs	r1, r2
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800491c:	0212      	lsls	r2, r2, #8
 800491e:	4311      	orrs	r1, r2
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004924:	0852      	lsrs	r2, r2, #1
 8004926:	3a01      	subs	r2, #1
 8004928:	0552      	lsls	r2, r2, #21
 800492a:	4311      	orrs	r1, r2
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004930:	0852      	lsrs	r2, r2, #1
 8004932:	3a01      	subs	r2, #1
 8004934:	0652      	lsls	r2, r2, #25
 8004936:	4311      	orrs	r1, r2
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800493c:	0912      	lsrs	r2, r2, #4
 800493e:	0452      	lsls	r2, r2, #17
 8004940:	430a      	orrs	r2, r1
 8004942:	493a      	ldr	r1, [pc, #232]	; (8004a2c <HAL_RCC_OscConfig+0x7a8>)
 8004944:	4313      	orrs	r3, r2
 8004946:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004948:	4b38      	ldr	r3, [pc, #224]	; (8004a2c <HAL_RCC_OscConfig+0x7a8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a37      	ldr	r2, [pc, #220]	; (8004a2c <HAL_RCC_OscConfig+0x7a8>)
 800494e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004952:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004954:	4b35      	ldr	r3, [pc, #212]	; (8004a2c <HAL_RCC_OscConfig+0x7a8>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	4a34      	ldr	r2, [pc, #208]	; (8004a2c <HAL_RCC_OscConfig+0x7a8>)
 800495a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800495e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004960:	f7fe f8ac 	bl	8002abc <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004968:	f7fe f8a8 	bl	8002abc <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e054      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800497a:	4b2c      	ldr	r3, [pc, #176]	; (8004a2c <HAL_RCC_OscConfig+0x7a8>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0f0      	beq.n	8004968 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004986:	e04c      	b.n	8004a22 <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e04b      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800498c:	4b27      	ldr	r3, [pc, #156]	; (8004a2c <HAL_RCC_OscConfig+0x7a8>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d144      	bne.n	8004a22 <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004998:	4b24      	ldr	r3, [pc, #144]	; (8004a2c <HAL_RCC_OscConfig+0x7a8>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a23      	ldr	r2, [pc, #140]	; (8004a2c <HAL_RCC_OscConfig+0x7a8>)
 800499e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049a4:	4b21      	ldr	r3, [pc, #132]	; (8004a2c <HAL_RCC_OscConfig+0x7a8>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	4a20      	ldr	r2, [pc, #128]	; (8004a2c <HAL_RCC_OscConfig+0x7a8>)
 80049aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049b0:	f7fe f884 	bl	8002abc <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b8:	f7fe f880 	bl	8002abc <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e02c      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ca:	4b18      	ldr	r3, [pc, #96]	; (8004a2c <HAL_RCC_OscConfig+0x7a8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0f0      	beq.n	80049b8 <HAL_RCC_OscConfig+0x734>
 80049d6:	e024      	b.n	8004a22 <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	2b0c      	cmp	r3, #12
 80049dc:	d01f      	beq.n	8004a1e <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049de:	4b13      	ldr	r3, [pc, #76]	; (8004a2c <HAL_RCC_OscConfig+0x7a8>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a12      	ldr	r2, [pc, #72]	; (8004a2c <HAL_RCC_OscConfig+0x7a8>)
 80049e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ea:	f7fe f867 	bl	8002abc <HAL_GetTick>
 80049ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049f0:	e008      	b.n	8004a04 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f2:	f7fe f863 	bl	8002abc <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e00f      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a04:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <HAL_RCC_OscConfig+0x7a8>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1f0      	bne.n	80049f2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a10:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <HAL_RCC_OscConfig+0x7a8>)
 8004a12:	68da      	ldr	r2, [r3, #12]
 8004a14:	4905      	ldr	r1, [pc, #20]	; (8004a2c <HAL_RCC_OscConfig+0x7a8>)
 8004a16:	4b07      	ldr	r3, [pc, #28]	; (8004a34 <HAL_RCC_OscConfig+0x7b0>)
 8004a18:	4013      	ands	r3, r2
 8004a1a:	60cb      	str	r3, [r1, #12]
 8004a1c:	e001      	b.n	8004a22 <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e000      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3720      	adds	r7, #32
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	f99d808c 	.word	0xf99d808c
 8004a34:	feeefffc 	.word	0xfeeefffc

08004a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e0e7      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a4c:	4b75      	ldr	r3, [pc, #468]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d910      	bls.n	8004a7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a5a:	4b72      	ldr	r3, [pc, #456]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f023 0207 	bic.w	r2, r3, #7
 8004a62:	4970      	ldr	r1, [pc, #448]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a6a:	4b6e      	ldr	r3, [pc, #440]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d001      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e0cf      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d010      	beq.n	8004aaa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	4b66      	ldr	r3, [pc, #408]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d908      	bls.n	8004aaa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a98:	4b63      	ldr	r3, [pc, #396]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	4960      	ldr	r1, [pc, #384]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d04c      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d107      	bne.n	8004ace <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004abe:	4b5a      	ldr	r3, [pc, #360]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d121      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e0a6      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d107      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ad6:	4b54      	ldr	r3, [pc, #336]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d115      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e09a      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d107      	bne.n	8004afe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004aee:	4b4e      	ldr	r3, [pc, #312]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d109      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e08e      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004afe:	4b4a      	ldr	r3, [pc, #296]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e086      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b0e:	4b46      	ldr	r3, [pc, #280]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f023 0203 	bic.w	r2, r3, #3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	4943      	ldr	r1, [pc, #268]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b20:	f7fd ffcc 	bl	8002abc <HAL_GetTick>
 8004b24:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b26:	e00a      	b.n	8004b3e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b28:	f7fd ffc8 	bl	8002abc <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e06e      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b3e:	4b3a      	ldr	r3, [pc, #232]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 020c 	and.w	r2, r3, #12
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d1eb      	bne.n	8004b28 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d010      	beq.n	8004b7e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	4b31      	ldr	r3, [pc, #196]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d208      	bcs.n	8004b7e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b6c:	4b2e      	ldr	r3, [pc, #184]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	492b      	ldr	r1, [pc, #172]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b7e:	4b29      	ldr	r3, [pc, #164]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d210      	bcs.n	8004bae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b8c:	4b25      	ldr	r3, [pc, #148]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f023 0207 	bic.w	r2, r3, #7
 8004b94:	4923      	ldr	r1, [pc, #140]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b9c:	4b21      	ldr	r3, [pc, #132]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d001      	beq.n	8004bae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e036      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0304 	and.w	r3, r3, #4
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d008      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bba:	4b1b      	ldr	r3, [pc, #108]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	4918      	ldr	r1, [pc, #96]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0308 	and.w	r3, r3, #8
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d009      	beq.n	8004bec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bd8:	4b13      	ldr	r3, [pc, #76]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	4910      	ldr	r1, [pc, #64]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bec:	f000 f824 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	4b0d      	ldr	r3, [pc, #52]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	091b      	lsrs	r3, r3, #4
 8004bf8:	f003 030f 	and.w	r3, r3, #15
 8004bfc:	490b      	ldr	r1, [pc, #44]	; (8004c2c <HAL_RCC_ClockConfig+0x1f4>)
 8004bfe:	5ccb      	ldrb	r3, [r1, r3]
 8004c00:	f003 031f 	and.w	r3, r3, #31
 8004c04:	fa22 f303 	lsr.w	r3, r2, r3
 8004c08:	4a09      	ldr	r2, [pc, #36]	; (8004c30 <HAL_RCC_ClockConfig+0x1f8>)
 8004c0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c0c:	4b09      	ldr	r3, [pc, #36]	; (8004c34 <HAL_RCC_ClockConfig+0x1fc>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fd ff03 	bl	8002a1c <HAL_InitTick>
 8004c16:	4603      	mov	r3, r0
 8004c18:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c1a:	7afb      	ldrb	r3, [r7, #11]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	40022000 	.word	0x40022000
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	0800a96c 	.word	0x0800a96c
 8004c30:	20000000 	.word	0x20000000
 8004c34:	20000004 	.word	0x20000004

08004c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b089      	sub	sp, #36	; 0x24
 8004c3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61fb      	str	r3, [r7, #28]
 8004c42:	2300      	movs	r3, #0
 8004c44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c46:	4b3e      	ldr	r3, [pc, #248]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
 8004c4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c50:	4b3b      	ldr	r3, [pc, #236]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f003 0303 	and.w	r3, r3, #3
 8004c58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <HAL_RCC_GetSysClockFreq+0x34>
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	2b0c      	cmp	r3, #12
 8004c64:	d121      	bne.n	8004caa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d11e      	bne.n	8004caa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c6c:	4b34      	ldr	r3, [pc, #208]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d107      	bne.n	8004c88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c78:	4b31      	ldr	r3, [pc, #196]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c7e:	0a1b      	lsrs	r3, r3, #8
 8004c80:	f003 030f 	and.w	r3, r3, #15
 8004c84:	61fb      	str	r3, [r7, #28]
 8004c86:	e005      	b.n	8004c94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c88:	4b2d      	ldr	r3, [pc, #180]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	091b      	lsrs	r3, r3, #4
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c94:	4a2b      	ldr	r2, [pc, #172]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10d      	bne.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ca8:	e00a      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d102      	bne.n	8004cb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cb0:	4b25      	ldr	r3, [pc, #148]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cb2:	61bb      	str	r3, [r7, #24]
 8004cb4:	e004      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d101      	bne.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cbc:	4b23      	ldr	r3, [pc, #140]	; (8004d4c <HAL_RCC_GetSysClockFreq+0x114>)
 8004cbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	2b0c      	cmp	r3, #12
 8004cc4:	d134      	bne.n	8004d30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cc6:	4b1e      	ldr	r3, [pc, #120]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d003      	beq.n	8004cde <HAL_RCC_GetSysClockFreq+0xa6>
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2b03      	cmp	r3, #3
 8004cda:	d003      	beq.n	8004ce4 <HAL_RCC_GetSysClockFreq+0xac>
 8004cdc:	e005      	b.n	8004cea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004cde:	4b1a      	ldr	r3, [pc, #104]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ce0:	617b      	str	r3, [r7, #20]
      break;
 8004ce2:	e005      	b.n	8004cf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ce4:	4b19      	ldr	r3, [pc, #100]	; (8004d4c <HAL_RCC_GetSysClockFreq+0x114>)
 8004ce6:	617b      	str	r3, [r7, #20]
      break;
 8004ce8:	e002      	b.n	8004cf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	617b      	str	r3, [r7, #20]
      break;
 8004cee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cf0:	4b13      	ldr	r3, [pc, #76]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	091b      	lsrs	r3, r3, #4
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004cfe:	4b10      	ldr	r3, [pc, #64]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	0a1b      	lsrs	r3, r3, #8
 8004d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	fb02 f203 	mul.w	r2, r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d16:	4b0a      	ldr	r3, [pc, #40]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	0e5b      	lsrs	r3, r3, #25
 8004d1c:	f003 0303 	and.w	r3, r3, #3
 8004d20:	3301      	adds	r3, #1
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d30:	69bb      	ldr	r3, [r7, #24]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3724      	adds	r7, #36	; 0x24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	40021000 	.word	0x40021000
 8004d44:	0800a984 	.word	0x0800a984
 8004d48:	00f42400 	.word	0x00f42400
 8004d4c:	007a1200 	.word	0x007a1200

08004d50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d54:	4b03      	ldr	r3, [pc, #12]	; (8004d64 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d56:	681b      	ldr	r3, [r3, #0]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	20000000 	.word	0x20000000

08004d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d6c:	f7ff fff0 	bl	8004d50 <HAL_RCC_GetHCLKFreq>
 8004d70:	4602      	mov	r2, r0
 8004d72:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	0a1b      	lsrs	r3, r3, #8
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	4904      	ldr	r1, [pc, #16]	; (8004d90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d7e:	5ccb      	ldrb	r3, [r1, r3]
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	0800a97c 	.word	0x0800a97c

08004d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d98:	f7ff ffda 	bl	8004d50 <HAL_RCC_GetHCLKFreq>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	0adb      	lsrs	r3, r3, #11
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	4904      	ldr	r1, [pc, #16]	; (8004dbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004daa:	5ccb      	ldrb	r3, [r1, r3]
 8004dac:	f003 031f 	and.w	r3, r3, #31
 8004db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	0800a97c 	.word	0x0800a97c

08004dc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004dc8:	2300      	movs	r3, #0
 8004dca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004dcc:	4b2a      	ldr	r3, [pc, #168]	; (8004e78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d003      	beq.n	8004de0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004dd8:	f7ff f9f0 	bl	80041bc <HAL_PWREx_GetVoltageRange>
 8004ddc:	6178      	str	r0, [r7, #20]
 8004dde:	e014      	b.n	8004e0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004de0:	4b25      	ldr	r3, [pc, #148]	; (8004e78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de4:	4a24      	ldr	r2, [pc, #144]	; (8004e78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dea:	6593      	str	r3, [r2, #88]	; 0x58
 8004dec:	4b22      	ldr	r3, [pc, #136]	; (8004e78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004df8:	f7ff f9e0 	bl	80041bc <HAL_PWREx_GetVoltageRange>
 8004dfc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004dfe:	4b1e      	ldr	r3, [pc, #120]	; (8004e78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e02:	4a1d      	ldr	r2, [pc, #116]	; (8004e78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e10:	d10b      	bne.n	8004e2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b80      	cmp	r3, #128	; 0x80
 8004e16:	d919      	bls.n	8004e4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2ba0      	cmp	r3, #160	; 0xa0
 8004e1c:	d902      	bls.n	8004e24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e1e:	2302      	movs	r3, #2
 8004e20:	613b      	str	r3, [r7, #16]
 8004e22:	e013      	b.n	8004e4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e24:	2301      	movs	r3, #1
 8004e26:	613b      	str	r3, [r7, #16]
 8004e28:	e010      	b.n	8004e4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b80      	cmp	r3, #128	; 0x80
 8004e2e:	d902      	bls.n	8004e36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e30:	2303      	movs	r3, #3
 8004e32:	613b      	str	r3, [r7, #16]
 8004e34:	e00a      	b.n	8004e4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b80      	cmp	r3, #128	; 0x80
 8004e3a:	d102      	bne.n	8004e42 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	e004      	b.n	8004e4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b70      	cmp	r3, #112	; 0x70
 8004e46:	d101      	bne.n	8004e4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e48:	2301      	movs	r3, #1
 8004e4a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e4c:	4b0b      	ldr	r3, [pc, #44]	; (8004e7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f023 0207 	bic.w	r2, r3, #7
 8004e54:	4909      	ldr	r1, [pc, #36]	; (8004e7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e5c:	4b07      	ldr	r3, [pc, #28]	; (8004e7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0307 	and.w	r3, r3, #7
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d001      	beq.n	8004e6e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	40022000 	.word	0x40022000

08004e80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e88:	2300      	movs	r3, #0
 8004e8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d041      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ea0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ea4:	d02a      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004ea6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004eaa:	d824      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004eac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004eb0:	d008      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004eb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004eb6:	d81e      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00a      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ebc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ec0:	d010      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ec2:	e018      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ec4:	4b86      	ldr	r3, [pc, #536]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	4a85      	ldr	r2, [pc, #532]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ece:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ed0:	e015      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 fabb 	bl	8005454 <RCCEx_PLLSAI1_Config>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ee2:	e00c      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3320      	adds	r3, #32
 8004ee8:	2100      	movs	r1, #0
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fba6 	bl	800563c <RCCEx_PLLSAI2_Config>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ef4:	e003      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	74fb      	strb	r3, [r7, #19]
      break;
 8004efa:	e000      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004efc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004efe:	7cfb      	ldrb	r3, [r7, #19]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10b      	bne.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f04:	4b76      	ldr	r3, [pc, #472]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f12:	4973      	ldr	r1, [pc, #460]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f1a:	e001      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f1c:	7cfb      	ldrb	r3, [r7, #19]
 8004f1e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d041      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f34:	d02a      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004f36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f3a:	d824      	bhi.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f40:	d008      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f46:	d81e      	bhi.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00a      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f50:	d010      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f52:	e018      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f54:	4b62      	ldr	r3, [pc, #392]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	4a61      	ldr	r2, [pc, #388]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f5e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f60:	e015      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3304      	adds	r3, #4
 8004f66:	2100      	movs	r1, #0
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 fa73 	bl	8005454 <RCCEx_PLLSAI1_Config>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f72:	e00c      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	3320      	adds	r3, #32
 8004f78:	2100      	movs	r1, #0
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fb5e 	bl	800563c <RCCEx_PLLSAI2_Config>
 8004f80:	4603      	mov	r3, r0
 8004f82:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f84:	e003      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	74fb      	strb	r3, [r7, #19]
      break;
 8004f8a:	e000      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004f8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f8e:	7cfb      	ldrb	r3, [r7, #19]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10b      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f94:	4b52      	ldr	r3, [pc, #328]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fa2:	494f      	ldr	r1, [pc, #316]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004faa:	e001      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fac:	7cfb      	ldrb	r3, [r7, #19]
 8004fae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 80a0 	beq.w	80050fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fc2:	4b47      	ldr	r3, [pc, #284]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e000      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00d      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fd8:	4b41      	ldr	r3, [pc, #260]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fdc:	4a40      	ldr	r2, [pc, #256]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8004fe4:	4b3e      	ldr	r3, [pc, #248]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fec:	60bb      	str	r3, [r7, #8]
 8004fee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ff4:	4b3b      	ldr	r3, [pc, #236]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a3a      	ldr	r2, [pc, #232]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ffe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005000:	f7fd fd5c 	bl	8002abc <HAL_GetTick>
 8005004:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005006:	e009      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005008:	f7fd fd58 	bl	8002abc <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d902      	bls.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	74fb      	strb	r3, [r7, #19]
        break;
 800501a:	e005      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800501c:	4b31      	ldr	r3, [pc, #196]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005024:	2b00      	cmp	r3, #0
 8005026:	d0ef      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005028:	7cfb      	ldrb	r3, [r7, #19]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d15c      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800502e:	4b2c      	ldr	r3, [pc, #176]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005038:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d01f      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	429a      	cmp	r2, r3
 800504a:	d019      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800504c:	4b24      	ldr	r3, [pc, #144]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800504e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005056:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005058:	4b21      	ldr	r3, [pc, #132]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800505a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505e:	4a20      	ldr	r2, [pc, #128]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005068:	4b1d      	ldr	r3, [pc, #116]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800506a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506e:	4a1c      	ldr	r2, [pc, #112]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005078:	4a19      	ldr	r2, [pc, #100]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d016      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508a:	f7fd fd17 	bl	8002abc <HAL_GetTick>
 800508e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005090:	e00b      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005092:	f7fd fd13 	bl	8002abc <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d902      	bls.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	74fb      	strb	r3, [r7, #19]
            break;
 80050a8:	e006      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050aa:	4b0d      	ldr	r3, [pc, #52]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0ec      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80050b8:	7cfb      	ldrb	r3, [r7, #19]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10c      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050be:	4b08      	ldr	r3, [pc, #32]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050ce:	4904      	ldr	r1, [pc, #16]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050d6:	e009      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050d8:	7cfb      	ldrb	r3, [r7, #19]
 80050da:	74bb      	strb	r3, [r7, #18]
 80050dc:	e006      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80050de:	bf00      	nop
 80050e0:	40021000 	.word	0x40021000
 80050e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e8:	7cfb      	ldrb	r3, [r7, #19]
 80050ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050ec:	7c7b      	ldrb	r3, [r7, #17]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d105      	bne.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050f2:	4b9e      	ldr	r3, [pc, #632]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f6:	4a9d      	ldr	r2, [pc, #628]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800510a:	4b98      	ldr	r3, [pc, #608]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800510c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005110:	f023 0203 	bic.w	r2, r3, #3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005118:	4994      	ldr	r1, [pc, #592]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800511a:	4313      	orrs	r3, r2
 800511c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00a      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800512c:	4b8f      	ldr	r3, [pc, #572]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800512e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005132:	f023 020c 	bic.w	r2, r3, #12
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513a:	498c      	ldr	r1, [pc, #560]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800513c:	4313      	orrs	r3, r2
 800513e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0304 	and.w	r3, r3, #4
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800514e:	4b87      	ldr	r3, [pc, #540]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005154:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515c:	4983      	ldr	r1, [pc, #524]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800515e:	4313      	orrs	r3, r2
 8005160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0308 	and.w	r3, r3, #8
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00a      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005170:	4b7e      	ldr	r3, [pc, #504]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005176:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517e:	497b      	ldr	r1, [pc, #492]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0310 	and.w	r3, r3, #16
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005192:	4b76      	ldr	r3, [pc, #472]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005198:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a0:	4972      	ldr	r1, [pc, #456]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0320 	and.w	r3, r3, #32
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00a      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051b4:	4b6d      	ldr	r3, [pc, #436]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c2:	496a      	ldr	r1, [pc, #424]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051d6:	4b65      	ldr	r3, [pc, #404]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e4:	4961      	ldr	r1, [pc, #388]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00a      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051f8:	4b5c      	ldr	r3, [pc, #368]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005206:	4959      	ldr	r1, [pc, #356]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800521a:	4b54      	ldr	r3, [pc, #336]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800521c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005220:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005228:	4950      	ldr	r1, [pc, #320]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800522a:	4313      	orrs	r3, r2
 800522c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00a      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800523c:	4b4b      	ldr	r3, [pc, #300]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800523e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005242:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524a:	4948      	ldr	r1, [pc, #288]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800524c:	4313      	orrs	r3, r2
 800524e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800525e:	4b43      	ldr	r3, [pc, #268]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005264:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526c:	493f      	ldr	r1, [pc, #252]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d028      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005280:	4b3a      	ldr	r3, [pc, #232]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005286:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800528e:	4937      	ldr	r1, [pc, #220]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005290:	4313      	orrs	r3, r2
 8005292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800529a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800529e:	d106      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052a0:	4b32      	ldr	r3, [pc, #200]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4a31      	ldr	r2, [pc, #196]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052aa:	60d3      	str	r3, [r2, #12]
 80052ac:	e011      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052b6:	d10c      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3304      	adds	r3, #4
 80052bc:	2101      	movs	r1, #1
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 f8c8 	bl	8005454 <RCCEx_PLLSAI1_Config>
 80052c4:	4603      	mov	r3, r0
 80052c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80052c8:	7cfb      	ldrb	r3, [r7, #19]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80052ce:	7cfb      	ldrb	r3, [r7, #19]
 80052d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d028      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052de:	4b23      	ldr	r3, [pc, #140]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ec:	491f      	ldr	r1, [pc, #124]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052fc:	d106      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052fe:	4b1b      	ldr	r3, [pc, #108]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	4a1a      	ldr	r2, [pc, #104]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005304:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005308:	60d3      	str	r3, [r2, #12]
 800530a:	e011      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005310:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005314:	d10c      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	3304      	adds	r3, #4
 800531a:	2101      	movs	r1, #1
 800531c:	4618      	mov	r0, r3
 800531e:	f000 f899 	bl	8005454 <RCCEx_PLLSAI1_Config>
 8005322:	4603      	mov	r3, r0
 8005324:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005326:	7cfb      	ldrb	r3, [r7, #19]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800532c:	7cfb      	ldrb	r3, [r7, #19]
 800532e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d02b      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800533c:	4b0b      	ldr	r3, [pc, #44]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800533e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005342:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800534a:	4908      	ldr	r1, [pc, #32]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800534c:	4313      	orrs	r3, r2
 800534e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005356:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800535a:	d109      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800535c:	4b03      	ldr	r3, [pc, #12]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	4a02      	ldr	r2, [pc, #8]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005362:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005366:	60d3      	str	r3, [r2, #12]
 8005368:	e014      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800536a:	bf00      	nop
 800536c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005374:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005378:	d10c      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	3304      	adds	r3, #4
 800537e:	2101      	movs	r1, #1
 8005380:	4618      	mov	r0, r3
 8005382:	f000 f867 	bl	8005454 <RCCEx_PLLSAI1_Config>
 8005386:	4603      	mov	r3, r0
 8005388:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800538a:	7cfb      	ldrb	r3, [r7, #19]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005390:	7cfb      	ldrb	r3, [r7, #19]
 8005392:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d02f      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053a0:	4b2b      	ldr	r3, [pc, #172]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053ae:	4928      	ldr	r1, [pc, #160]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053be:	d10d      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	3304      	adds	r3, #4
 80053c4:	2102      	movs	r1, #2
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 f844 	bl	8005454 <RCCEx_PLLSAI1_Config>
 80053cc:	4603      	mov	r3, r0
 80053ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053d0:	7cfb      	ldrb	r3, [r7, #19]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d014      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053d6:	7cfb      	ldrb	r3, [r7, #19]
 80053d8:	74bb      	strb	r3, [r7, #18]
 80053da:	e011      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053e4:	d10c      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	3320      	adds	r3, #32
 80053ea:	2102      	movs	r1, #2
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 f925 	bl	800563c <RCCEx_PLLSAI2_Config>
 80053f2:	4603      	mov	r3, r0
 80053f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053f6:	7cfb      	ldrb	r3, [r7, #19]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053fc:	7cfb      	ldrb	r3, [r7, #19]
 80053fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00a      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800540c:	4b10      	ldr	r3, [pc, #64]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005412:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800541a:	490d      	ldr	r1, [pc, #52]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00b      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800542e:	4b08      	ldr	r3, [pc, #32]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005434:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800543e:	4904      	ldr	r1, [pc, #16]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005440:	4313      	orrs	r3, r2
 8005442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005446:	7cbb      	ldrb	r3, [r7, #18]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	40021000 	.word	0x40021000

08005454 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800545e:	2300      	movs	r3, #0
 8005460:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005462:	4b75      	ldr	r3, [pc, #468]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d018      	beq.n	80054a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800546e:	4b72      	ldr	r3, [pc, #456]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f003 0203 	and.w	r2, r3, #3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	429a      	cmp	r2, r3
 800547c:	d10d      	bne.n	800549a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
       ||
 8005482:	2b00      	cmp	r3, #0
 8005484:	d009      	beq.n	800549a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005486:	4b6c      	ldr	r3, [pc, #432]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	091b      	lsrs	r3, r3, #4
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
       ||
 8005496:	429a      	cmp	r2, r3
 8005498:	d047      	beq.n	800552a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	73fb      	strb	r3, [r7, #15]
 800549e:	e044      	b.n	800552a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b03      	cmp	r3, #3
 80054a6:	d018      	beq.n	80054da <RCCEx_PLLSAI1_Config+0x86>
 80054a8:	2b03      	cmp	r3, #3
 80054aa:	d825      	bhi.n	80054f8 <RCCEx_PLLSAI1_Config+0xa4>
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d002      	beq.n	80054b6 <RCCEx_PLLSAI1_Config+0x62>
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d009      	beq.n	80054c8 <RCCEx_PLLSAI1_Config+0x74>
 80054b4:	e020      	b.n	80054f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054b6:	4b60      	ldr	r3, [pc, #384]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d11d      	bne.n	80054fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054c6:	e01a      	b.n	80054fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054c8:	4b5b      	ldr	r3, [pc, #364]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d116      	bne.n	8005502 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054d8:	e013      	b.n	8005502 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054da:	4b57      	ldr	r3, [pc, #348]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10f      	bne.n	8005506 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054e6:	4b54      	ldr	r3, [pc, #336]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d109      	bne.n	8005506 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054f6:	e006      	b.n	8005506 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	73fb      	strb	r3, [r7, #15]
      break;
 80054fc:	e004      	b.n	8005508 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054fe:	bf00      	nop
 8005500:	e002      	b.n	8005508 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005502:	bf00      	nop
 8005504:	e000      	b.n	8005508 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005506:	bf00      	nop
    }

    if(status == HAL_OK)
 8005508:	7bfb      	ldrb	r3, [r7, #15]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10d      	bne.n	800552a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800550e:	4b4a      	ldr	r3, [pc, #296]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6819      	ldr	r1, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	3b01      	subs	r3, #1
 8005520:	011b      	lsls	r3, r3, #4
 8005522:	430b      	orrs	r3, r1
 8005524:	4944      	ldr	r1, [pc, #272]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005526:	4313      	orrs	r3, r2
 8005528:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d17d      	bne.n	800562c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005530:	4b41      	ldr	r3, [pc, #260]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a40      	ldr	r2, [pc, #256]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005536:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800553a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800553c:	f7fd fabe 	bl	8002abc <HAL_GetTick>
 8005540:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005542:	e009      	b.n	8005558 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005544:	f7fd faba 	bl	8002abc <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d902      	bls.n	8005558 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	73fb      	strb	r3, [r7, #15]
        break;
 8005556:	e005      	b.n	8005564 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005558:	4b37      	ldr	r3, [pc, #220]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1ef      	bne.n	8005544 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005564:	7bfb      	ldrb	r3, [r7, #15]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d160      	bne.n	800562c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d111      	bne.n	8005594 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005570:	4b31      	ldr	r3, [pc, #196]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6892      	ldr	r2, [r2, #8]
 8005580:	0211      	lsls	r1, r2, #8
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	68d2      	ldr	r2, [r2, #12]
 8005586:	0912      	lsrs	r2, r2, #4
 8005588:	0452      	lsls	r2, r2, #17
 800558a:	430a      	orrs	r2, r1
 800558c:	492a      	ldr	r1, [pc, #168]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 800558e:	4313      	orrs	r3, r2
 8005590:	610b      	str	r3, [r1, #16]
 8005592:	e027      	b.n	80055e4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d112      	bne.n	80055c0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800559a:	4b27      	ldr	r3, [pc, #156]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80055a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6892      	ldr	r2, [r2, #8]
 80055aa:	0211      	lsls	r1, r2, #8
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6912      	ldr	r2, [r2, #16]
 80055b0:	0852      	lsrs	r2, r2, #1
 80055b2:	3a01      	subs	r2, #1
 80055b4:	0552      	lsls	r2, r2, #21
 80055b6:	430a      	orrs	r2, r1
 80055b8:	491f      	ldr	r1, [pc, #124]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	610b      	str	r3, [r1, #16]
 80055be:	e011      	b.n	80055e4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055c0:	4b1d      	ldr	r3, [pc, #116]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80055c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6892      	ldr	r2, [r2, #8]
 80055d0:	0211      	lsls	r1, r2, #8
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6952      	ldr	r2, [r2, #20]
 80055d6:	0852      	lsrs	r2, r2, #1
 80055d8:	3a01      	subs	r2, #1
 80055da:	0652      	lsls	r2, r2, #25
 80055dc:	430a      	orrs	r2, r1
 80055de:	4916      	ldr	r1, [pc, #88]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80055e4:	4b14      	ldr	r3, [pc, #80]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a13      	ldr	r2, [pc, #76]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f0:	f7fd fa64 	bl	8002abc <HAL_GetTick>
 80055f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055f6:	e009      	b.n	800560c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055f8:	f7fd fa60 	bl	8002abc <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d902      	bls.n	800560c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	73fb      	strb	r3, [r7, #15]
          break;
 800560a:	e005      	b.n	8005618 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800560c:	4b0a      	ldr	r3, [pc, #40]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0ef      	beq.n	80055f8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800561e:	4b06      	ldr	r3, [pc, #24]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005620:	691a      	ldr	r2, [r3, #16]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	4904      	ldr	r1, [pc, #16]	; (8005638 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005628:	4313      	orrs	r3, r2
 800562a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800562c:	7bfb      	ldrb	r3, [r7, #15]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	40021000 	.word	0x40021000

0800563c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800564a:	4b6a      	ldr	r3, [pc, #424]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f003 0303 	and.w	r3, r3, #3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d018      	beq.n	8005688 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005656:	4b67      	ldr	r3, [pc, #412]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f003 0203 	and.w	r2, r3, #3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	429a      	cmp	r2, r3
 8005664:	d10d      	bne.n	8005682 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
       ||
 800566a:	2b00      	cmp	r3, #0
 800566c:	d009      	beq.n	8005682 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800566e:	4b61      	ldr	r3, [pc, #388]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	091b      	lsrs	r3, r3, #4
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	1c5a      	adds	r2, r3, #1
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
       ||
 800567e:	429a      	cmp	r2, r3
 8005680:	d047      	beq.n	8005712 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	73fb      	strb	r3, [r7, #15]
 8005686:	e044      	b.n	8005712 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b03      	cmp	r3, #3
 800568e:	d018      	beq.n	80056c2 <RCCEx_PLLSAI2_Config+0x86>
 8005690:	2b03      	cmp	r3, #3
 8005692:	d825      	bhi.n	80056e0 <RCCEx_PLLSAI2_Config+0xa4>
 8005694:	2b01      	cmp	r3, #1
 8005696:	d002      	beq.n	800569e <RCCEx_PLLSAI2_Config+0x62>
 8005698:	2b02      	cmp	r3, #2
 800569a:	d009      	beq.n	80056b0 <RCCEx_PLLSAI2_Config+0x74>
 800569c:	e020      	b.n	80056e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800569e:	4b55      	ldr	r3, [pc, #340]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d11d      	bne.n	80056e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056ae:	e01a      	b.n	80056e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056b0:	4b50      	ldr	r3, [pc, #320]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d116      	bne.n	80056ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056c0:	e013      	b.n	80056ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056c2:	4b4c      	ldr	r3, [pc, #304]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10f      	bne.n	80056ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056ce:	4b49      	ldr	r3, [pc, #292]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d109      	bne.n	80056ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056de:	e006      	b.n	80056ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	73fb      	strb	r3, [r7, #15]
      break;
 80056e4:	e004      	b.n	80056f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056e6:	bf00      	nop
 80056e8:	e002      	b.n	80056f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056ea:	bf00      	nop
 80056ec:	e000      	b.n	80056f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10d      	bne.n	8005712 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056f6:	4b3f      	ldr	r3, [pc, #252]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6819      	ldr	r1, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	3b01      	subs	r3, #1
 8005708:	011b      	lsls	r3, r3, #4
 800570a:	430b      	orrs	r3, r1
 800570c:	4939      	ldr	r1, [pc, #228]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800570e:	4313      	orrs	r3, r2
 8005710:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005712:	7bfb      	ldrb	r3, [r7, #15]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d167      	bne.n	80057e8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005718:	4b36      	ldr	r3, [pc, #216]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a35      	ldr	r2, [pc, #212]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800571e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005722:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005724:	f7fd f9ca 	bl	8002abc <HAL_GetTick>
 8005728:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800572a:	e009      	b.n	8005740 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800572c:	f7fd f9c6 	bl	8002abc <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d902      	bls.n	8005740 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	73fb      	strb	r3, [r7, #15]
        break;
 800573e:	e005      	b.n	800574c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005740:	4b2c      	ldr	r3, [pc, #176]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1ef      	bne.n	800572c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800574c:	7bfb      	ldrb	r3, [r7, #15]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d14a      	bne.n	80057e8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d111      	bne.n	800577c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005758:	4b26      	ldr	r3, [pc, #152]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	6892      	ldr	r2, [r2, #8]
 8005768:	0211      	lsls	r1, r2, #8
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	68d2      	ldr	r2, [r2, #12]
 800576e:	0912      	lsrs	r2, r2, #4
 8005770:	0452      	lsls	r2, r2, #17
 8005772:	430a      	orrs	r2, r1
 8005774:	491f      	ldr	r1, [pc, #124]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005776:	4313      	orrs	r3, r2
 8005778:	614b      	str	r3, [r1, #20]
 800577a:	e011      	b.n	80057a0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800577c:	4b1d      	ldr	r3, [pc, #116]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005784:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6892      	ldr	r2, [r2, #8]
 800578c:	0211      	lsls	r1, r2, #8
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	6912      	ldr	r2, [r2, #16]
 8005792:	0852      	lsrs	r2, r2, #1
 8005794:	3a01      	subs	r2, #1
 8005796:	0652      	lsls	r2, r2, #25
 8005798:	430a      	orrs	r2, r1
 800579a:	4916      	ldr	r1, [pc, #88]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800579c:	4313      	orrs	r3, r2
 800579e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80057a0:	4b14      	ldr	r3, [pc, #80]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a13      	ldr	r2, [pc, #76]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ac:	f7fd f986 	bl	8002abc <HAL_GetTick>
 80057b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057b2:	e009      	b.n	80057c8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057b4:	f7fd f982 	bl	8002abc <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d902      	bls.n	80057c8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	73fb      	strb	r3, [r7, #15]
          break;
 80057c6:	e005      	b.n	80057d4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057c8:	4b0a      	ldr	r3, [pc, #40]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d0ef      	beq.n	80057b4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d106      	bne.n	80057e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80057da:	4b06      	ldr	r3, [pc, #24]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057dc:	695a      	ldr	r2, [r3, #20]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	4904      	ldr	r1, [pc, #16]	; (80057f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	40021000 	.word	0x40021000

080057f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e049      	b.n	800589e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7fc fefe 	bl	8002620 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3304      	adds	r3, #4
 8005834:	4619      	mov	r1, r3
 8005836:	4610      	mov	r0, r2
 8005838:	f000 fa50 	bl	8005cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
	...

080058a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d109      	bne.n	80058cc <HAL_TIM_PWM_Start+0x24>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	bf14      	ite	ne
 80058c4:	2301      	movne	r3, #1
 80058c6:	2300      	moveq	r3, #0
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	e03c      	b.n	8005946 <HAL_TIM_PWM_Start+0x9e>
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	d109      	bne.n	80058e6 <HAL_TIM_PWM_Start+0x3e>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b01      	cmp	r3, #1
 80058dc:	bf14      	ite	ne
 80058de:	2301      	movne	r3, #1
 80058e0:	2300      	moveq	r3, #0
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	e02f      	b.n	8005946 <HAL_TIM_PWM_Start+0x9e>
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d109      	bne.n	8005900 <HAL_TIM_PWM_Start+0x58>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	bf14      	ite	ne
 80058f8:	2301      	movne	r3, #1
 80058fa:	2300      	moveq	r3, #0
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	e022      	b.n	8005946 <HAL_TIM_PWM_Start+0x9e>
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	2b0c      	cmp	r3, #12
 8005904:	d109      	bne.n	800591a <HAL_TIM_PWM_Start+0x72>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b01      	cmp	r3, #1
 8005910:	bf14      	ite	ne
 8005912:	2301      	movne	r3, #1
 8005914:	2300      	moveq	r3, #0
 8005916:	b2db      	uxtb	r3, r3
 8005918:	e015      	b.n	8005946 <HAL_TIM_PWM_Start+0x9e>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b10      	cmp	r3, #16
 800591e:	d109      	bne.n	8005934 <HAL_TIM_PWM_Start+0x8c>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b01      	cmp	r3, #1
 800592a:	bf14      	ite	ne
 800592c:	2301      	movne	r3, #1
 800592e:	2300      	moveq	r3, #0
 8005930:	b2db      	uxtb	r3, r3
 8005932:	e008      	b.n	8005946 <HAL_TIM_PWM_Start+0x9e>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b01      	cmp	r3, #1
 800593e:	bf14      	ite	ne
 8005940:	2301      	movne	r3, #1
 8005942:	2300      	moveq	r3, #0
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e09c      	b.n	8005a88 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d104      	bne.n	800595e <HAL_TIM_PWM_Start+0xb6>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2202      	movs	r2, #2
 8005958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800595c:	e023      	b.n	80059a6 <HAL_TIM_PWM_Start+0xfe>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b04      	cmp	r3, #4
 8005962:	d104      	bne.n	800596e <HAL_TIM_PWM_Start+0xc6>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2202      	movs	r2, #2
 8005968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800596c:	e01b      	b.n	80059a6 <HAL_TIM_PWM_Start+0xfe>
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b08      	cmp	r3, #8
 8005972:	d104      	bne.n	800597e <HAL_TIM_PWM_Start+0xd6>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800597c:	e013      	b.n	80059a6 <HAL_TIM_PWM_Start+0xfe>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b0c      	cmp	r3, #12
 8005982:	d104      	bne.n	800598e <HAL_TIM_PWM_Start+0xe6>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2202      	movs	r2, #2
 8005988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800598c:	e00b      	b.n	80059a6 <HAL_TIM_PWM_Start+0xfe>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b10      	cmp	r3, #16
 8005992:	d104      	bne.n	800599e <HAL_TIM_PWM_Start+0xf6>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2202      	movs	r2, #2
 8005998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800599c:	e003      	b.n	80059a6 <HAL_TIM_PWM_Start+0xfe>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2202      	movs	r2, #2
 80059a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2201      	movs	r2, #1
 80059ac:	6839      	ldr	r1, [r7, #0]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fd04 	bl	80063bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a35      	ldr	r2, [pc, #212]	; (8005a90 <HAL_TIM_PWM_Start+0x1e8>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d013      	beq.n	80059e6 <HAL_TIM_PWM_Start+0x13e>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a34      	ldr	r2, [pc, #208]	; (8005a94 <HAL_TIM_PWM_Start+0x1ec>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d00e      	beq.n	80059e6 <HAL_TIM_PWM_Start+0x13e>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a32      	ldr	r2, [pc, #200]	; (8005a98 <HAL_TIM_PWM_Start+0x1f0>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d009      	beq.n	80059e6 <HAL_TIM_PWM_Start+0x13e>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a31      	ldr	r2, [pc, #196]	; (8005a9c <HAL_TIM_PWM_Start+0x1f4>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d004      	beq.n	80059e6 <HAL_TIM_PWM_Start+0x13e>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a2f      	ldr	r2, [pc, #188]	; (8005aa0 <HAL_TIM_PWM_Start+0x1f8>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d101      	bne.n	80059ea <HAL_TIM_PWM_Start+0x142>
 80059e6:	2301      	movs	r3, #1
 80059e8:	e000      	b.n	80059ec <HAL_TIM_PWM_Start+0x144>
 80059ea:	2300      	movs	r3, #0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d007      	beq.n	8005a00 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a22      	ldr	r2, [pc, #136]	; (8005a90 <HAL_TIM_PWM_Start+0x1e8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d01d      	beq.n	8005a46 <HAL_TIM_PWM_Start+0x19e>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a12:	d018      	beq.n	8005a46 <HAL_TIM_PWM_Start+0x19e>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a22      	ldr	r2, [pc, #136]	; (8005aa4 <HAL_TIM_PWM_Start+0x1fc>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d013      	beq.n	8005a46 <HAL_TIM_PWM_Start+0x19e>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a21      	ldr	r2, [pc, #132]	; (8005aa8 <HAL_TIM_PWM_Start+0x200>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d00e      	beq.n	8005a46 <HAL_TIM_PWM_Start+0x19e>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a1f      	ldr	r2, [pc, #124]	; (8005aac <HAL_TIM_PWM_Start+0x204>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d009      	beq.n	8005a46 <HAL_TIM_PWM_Start+0x19e>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a17      	ldr	r2, [pc, #92]	; (8005a94 <HAL_TIM_PWM_Start+0x1ec>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d004      	beq.n	8005a46 <HAL_TIM_PWM_Start+0x19e>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a15      	ldr	r2, [pc, #84]	; (8005a98 <HAL_TIM_PWM_Start+0x1f0>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d115      	bne.n	8005a72 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	4b18      	ldr	r3, [pc, #96]	; (8005ab0 <HAL_TIM_PWM_Start+0x208>)
 8005a4e:	4013      	ands	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2b06      	cmp	r3, #6
 8005a56:	d015      	beq.n	8005a84 <HAL_TIM_PWM_Start+0x1dc>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a5e:	d011      	beq.n	8005a84 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 0201 	orr.w	r2, r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a70:	e008      	b.n	8005a84 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f042 0201 	orr.w	r2, r2, #1
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	e000      	b.n	8005a86 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	40012c00 	.word	0x40012c00
 8005a94:	40013400 	.word	0x40013400
 8005a98:	40014000 	.word	0x40014000
 8005a9c:	40014400 	.word	0x40014400
 8005aa0:	40014800 	.word	0x40014800
 8005aa4:	40000400 	.word	0x40000400
 8005aa8:	40000800 	.word	0x40000800
 8005aac:	40000c00 	.word	0x40000c00
 8005ab0:	00010007 	.word	0x00010007

08005ab4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d101      	bne.n	8005ad2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ace:	2302      	movs	r3, #2
 8005ad0:	e0ff      	b.n	8005cd2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b14      	cmp	r3, #20
 8005ade:	f200 80f0 	bhi.w	8005cc2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005ae2:	a201      	add	r2, pc, #4	; (adr r2, 8005ae8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae8:	08005b3d 	.word	0x08005b3d
 8005aec:	08005cc3 	.word	0x08005cc3
 8005af0:	08005cc3 	.word	0x08005cc3
 8005af4:	08005cc3 	.word	0x08005cc3
 8005af8:	08005b7d 	.word	0x08005b7d
 8005afc:	08005cc3 	.word	0x08005cc3
 8005b00:	08005cc3 	.word	0x08005cc3
 8005b04:	08005cc3 	.word	0x08005cc3
 8005b08:	08005bbf 	.word	0x08005bbf
 8005b0c:	08005cc3 	.word	0x08005cc3
 8005b10:	08005cc3 	.word	0x08005cc3
 8005b14:	08005cc3 	.word	0x08005cc3
 8005b18:	08005bff 	.word	0x08005bff
 8005b1c:	08005cc3 	.word	0x08005cc3
 8005b20:	08005cc3 	.word	0x08005cc3
 8005b24:	08005cc3 	.word	0x08005cc3
 8005b28:	08005c41 	.word	0x08005c41
 8005b2c:	08005cc3 	.word	0x08005cc3
 8005b30:	08005cc3 	.word	0x08005cc3
 8005b34:	08005cc3 	.word	0x08005cc3
 8005b38:	08005c81 	.word	0x08005c81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68b9      	ldr	r1, [r7, #8]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 f964 	bl	8005e10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699a      	ldr	r2, [r3, #24]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0208 	orr.w	r2, r2, #8
 8005b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	699a      	ldr	r2, [r3, #24]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f022 0204 	bic.w	r2, r2, #4
 8005b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6999      	ldr	r1, [r3, #24]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	691a      	ldr	r2, [r3, #16]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	619a      	str	r2, [r3, #24]
      break;
 8005b7a:	e0a5      	b.n	8005cc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68b9      	ldr	r1, [r7, #8]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 f9d4 	bl	8005f30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	699a      	ldr	r2, [r3, #24]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	699a      	ldr	r2, [r3, #24]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6999      	ldr	r1, [r3, #24]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	021a      	lsls	r2, r3, #8
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	619a      	str	r2, [r3, #24]
      break;
 8005bbc:	e084      	b.n	8005cc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68b9      	ldr	r1, [r7, #8]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 fa3d 	bl	8006044 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69da      	ldr	r2, [r3, #28]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f042 0208 	orr.w	r2, r2, #8
 8005bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	69da      	ldr	r2, [r3, #28]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 0204 	bic.w	r2, r2, #4
 8005be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	69d9      	ldr	r1, [r3, #28]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	691a      	ldr	r2, [r3, #16]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	61da      	str	r2, [r3, #28]
      break;
 8005bfc:	e064      	b.n	8005cc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68b9      	ldr	r1, [r7, #8]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 faa5 	bl	8006154 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69da      	ldr	r2, [r3, #28]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69da      	ldr	r2, [r3, #28]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69d9      	ldr	r1, [r3, #28]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	021a      	lsls	r2, r3, #8
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	61da      	str	r2, [r3, #28]
      break;
 8005c3e:	e043      	b.n	8005cc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68b9      	ldr	r1, [r7, #8]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 faee 	bl	8006228 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0208 	orr.w	r2, r2, #8
 8005c5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 0204 	bic.w	r2, r2, #4
 8005c6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	691a      	ldr	r2, [r3, #16]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c7e:	e023      	b.n	8005cc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68b9      	ldr	r1, [r7, #8]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 fb32 	bl	80062f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005caa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	021a      	lsls	r2, r3, #8
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005cc0:	e002      	b.n	8005cc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8005cc6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop

08005cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a40      	ldr	r2, [pc, #256]	; (8005df0 <TIM_Base_SetConfig+0x114>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d013      	beq.n	8005d1c <TIM_Base_SetConfig+0x40>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cfa:	d00f      	beq.n	8005d1c <TIM_Base_SetConfig+0x40>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a3d      	ldr	r2, [pc, #244]	; (8005df4 <TIM_Base_SetConfig+0x118>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00b      	beq.n	8005d1c <TIM_Base_SetConfig+0x40>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a3c      	ldr	r2, [pc, #240]	; (8005df8 <TIM_Base_SetConfig+0x11c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d007      	beq.n	8005d1c <TIM_Base_SetConfig+0x40>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a3b      	ldr	r2, [pc, #236]	; (8005dfc <TIM_Base_SetConfig+0x120>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d003      	beq.n	8005d1c <TIM_Base_SetConfig+0x40>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a3a      	ldr	r2, [pc, #232]	; (8005e00 <TIM_Base_SetConfig+0x124>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d108      	bne.n	8005d2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a2f      	ldr	r2, [pc, #188]	; (8005df0 <TIM_Base_SetConfig+0x114>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d01f      	beq.n	8005d76 <TIM_Base_SetConfig+0x9a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d3c:	d01b      	beq.n	8005d76 <TIM_Base_SetConfig+0x9a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a2c      	ldr	r2, [pc, #176]	; (8005df4 <TIM_Base_SetConfig+0x118>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d017      	beq.n	8005d76 <TIM_Base_SetConfig+0x9a>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a2b      	ldr	r2, [pc, #172]	; (8005df8 <TIM_Base_SetConfig+0x11c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d013      	beq.n	8005d76 <TIM_Base_SetConfig+0x9a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a2a      	ldr	r2, [pc, #168]	; (8005dfc <TIM_Base_SetConfig+0x120>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00f      	beq.n	8005d76 <TIM_Base_SetConfig+0x9a>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a29      	ldr	r2, [pc, #164]	; (8005e00 <TIM_Base_SetConfig+0x124>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d00b      	beq.n	8005d76 <TIM_Base_SetConfig+0x9a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a28      	ldr	r2, [pc, #160]	; (8005e04 <TIM_Base_SetConfig+0x128>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d007      	beq.n	8005d76 <TIM_Base_SetConfig+0x9a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a27      	ldr	r2, [pc, #156]	; (8005e08 <TIM_Base_SetConfig+0x12c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d003      	beq.n	8005d76 <TIM_Base_SetConfig+0x9a>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a26      	ldr	r2, [pc, #152]	; (8005e0c <TIM_Base_SetConfig+0x130>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d108      	bne.n	8005d88 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a10      	ldr	r2, [pc, #64]	; (8005df0 <TIM_Base_SetConfig+0x114>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d00f      	beq.n	8005dd4 <TIM_Base_SetConfig+0xf8>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a12      	ldr	r2, [pc, #72]	; (8005e00 <TIM_Base_SetConfig+0x124>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d00b      	beq.n	8005dd4 <TIM_Base_SetConfig+0xf8>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a11      	ldr	r2, [pc, #68]	; (8005e04 <TIM_Base_SetConfig+0x128>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d007      	beq.n	8005dd4 <TIM_Base_SetConfig+0xf8>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a10      	ldr	r2, [pc, #64]	; (8005e08 <TIM_Base_SetConfig+0x12c>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d003      	beq.n	8005dd4 <TIM_Base_SetConfig+0xf8>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a0f      	ldr	r2, [pc, #60]	; (8005e0c <TIM_Base_SetConfig+0x130>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d103      	bne.n	8005ddc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	691a      	ldr	r2, [r3, #16]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	615a      	str	r2, [r3, #20]
}
 8005de2:	bf00      	nop
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	40012c00 	.word	0x40012c00
 8005df4:	40000400 	.word	0x40000400
 8005df8:	40000800 	.word	0x40000800
 8005dfc:	40000c00 	.word	0x40000c00
 8005e00:	40013400 	.word	0x40013400
 8005e04:	40014000 	.word	0x40014000
 8005e08:	40014400 	.word	0x40014400
 8005e0c:	40014800 	.word	0x40014800

08005e10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	f023 0201 	bic.w	r2, r3, #1
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0303 	bic.w	r3, r3, #3
 8005e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f023 0302 	bic.w	r3, r3, #2
 8005e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a2c      	ldr	r2, [pc, #176]	; (8005f1c <TIM_OC1_SetConfig+0x10c>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00f      	beq.n	8005e90 <TIM_OC1_SetConfig+0x80>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a2b      	ldr	r2, [pc, #172]	; (8005f20 <TIM_OC1_SetConfig+0x110>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00b      	beq.n	8005e90 <TIM_OC1_SetConfig+0x80>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a2a      	ldr	r2, [pc, #168]	; (8005f24 <TIM_OC1_SetConfig+0x114>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d007      	beq.n	8005e90 <TIM_OC1_SetConfig+0x80>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a29      	ldr	r2, [pc, #164]	; (8005f28 <TIM_OC1_SetConfig+0x118>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d003      	beq.n	8005e90 <TIM_OC1_SetConfig+0x80>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a28      	ldr	r2, [pc, #160]	; (8005f2c <TIM_OC1_SetConfig+0x11c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d10c      	bne.n	8005eaa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f023 0308 	bic.w	r3, r3, #8
 8005e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f023 0304 	bic.w	r3, r3, #4
 8005ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a1b      	ldr	r2, [pc, #108]	; (8005f1c <TIM_OC1_SetConfig+0x10c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d00f      	beq.n	8005ed2 <TIM_OC1_SetConfig+0xc2>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a1a      	ldr	r2, [pc, #104]	; (8005f20 <TIM_OC1_SetConfig+0x110>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d00b      	beq.n	8005ed2 <TIM_OC1_SetConfig+0xc2>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a19      	ldr	r2, [pc, #100]	; (8005f24 <TIM_OC1_SetConfig+0x114>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d007      	beq.n	8005ed2 <TIM_OC1_SetConfig+0xc2>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a18      	ldr	r2, [pc, #96]	; (8005f28 <TIM_OC1_SetConfig+0x118>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d003      	beq.n	8005ed2 <TIM_OC1_SetConfig+0xc2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a17      	ldr	r2, [pc, #92]	; (8005f2c <TIM_OC1_SetConfig+0x11c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d111      	bne.n	8005ef6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ed8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	621a      	str	r2, [r3, #32]
}
 8005f10:	bf00      	nop
 8005f12:	371c      	adds	r7, #28
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	40012c00 	.word	0x40012c00
 8005f20:	40013400 	.word	0x40013400
 8005f24:	40014000 	.word	0x40014000
 8005f28:	40014400 	.word	0x40014400
 8005f2c:	40014800 	.word	0x40014800

08005f30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	f023 0210 	bic.w	r2, r3, #16
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	021b      	lsls	r3, r3, #8
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f023 0320 	bic.w	r3, r3, #32
 8005f7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	011b      	lsls	r3, r3, #4
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a28      	ldr	r2, [pc, #160]	; (8006030 <TIM_OC2_SetConfig+0x100>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d003      	beq.n	8005f9c <TIM_OC2_SetConfig+0x6c>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a27      	ldr	r2, [pc, #156]	; (8006034 <TIM_OC2_SetConfig+0x104>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d10d      	bne.n	8005fb8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	011b      	lsls	r3, r3, #4
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a1d      	ldr	r2, [pc, #116]	; (8006030 <TIM_OC2_SetConfig+0x100>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d00f      	beq.n	8005fe0 <TIM_OC2_SetConfig+0xb0>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a1c      	ldr	r2, [pc, #112]	; (8006034 <TIM_OC2_SetConfig+0x104>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d00b      	beq.n	8005fe0 <TIM_OC2_SetConfig+0xb0>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a1b      	ldr	r2, [pc, #108]	; (8006038 <TIM_OC2_SetConfig+0x108>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d007      	beq.n	8005fe0 <TIM_OC2_SetConfig+0xb0>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a1a      	ldr	r2, [pc, #104]	; (800603c <TIM_OC2_SetConfig+0x10c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d003      	beq.n	8005fe0 <TIM_OC2_SetConfig+0xb0>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a19      	ldr	r2, [pc, #100]	; (8006040 <TIM_OC2_SetConfig+0x110>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d113      	bne.n	8006008 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fe6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	4313      	orrs	r3, r2
 8006006:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	621a      	str	r2, [r3, #32]
}
 8006022:	bf00      	nop
 8006024:	371c      	adds	r7, #28
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	40012c00 	.word	0x40012c00
 8006034:	40013400 	.word	0x40013400
 8006038:	40014000 	.word	0x40014000
 800603c:	40014400 	.word	0x40014400
 8006040:	40014800 	.word	0x40014800

08006044 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 0303 	bic.w	r3, r3, #3
 800607e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	4313      	orrs	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006090:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	021b      	lsls	r3, r3, #8
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	4313      	orrs	r3, r2
 800609c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a27      	ldr	r2, [pc, #156]	; (8006140 <TIM_OC3_SetConfig+0xfc>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d003      	beq.n	80060ae <TIM_OC3_SetConfig+0x6a>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a26      	ldr	r2, [pc, #152]	; (8006144 <TIM_OC3_SetConfig+0x100>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d10d      	bne.n	80060ca <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	021b      	lsls	r3, r3, #8
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	4313      	orrs	r3, r2
 80060c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a1c      	ldr	r2, [pc, #112]	; (8006140 <TIM_OC3_SetConfig+0xfc>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d00f      	beq.n	80060f2 <TIM_OC3_SetConfig+0xae>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a1b      	ldr	r2, [pc, #108]	; (8006144 <TIM_OC3_SetConfig+0x100>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d00b      	beq.n	80060f2 <TIM_OC3_SetConfig+0xae>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a1a      	ldr	r2, [pc, #104]	; (8006148 <TIM_OC3_SetConfig+0x104>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d007      	beq.n	80060f2 <TIM_OC3_SetConfig+0xae>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a19      	ldr	r2, [pc, #100]	; (800614c <TIM_OC3_SetConfig+0x108>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d003      	beq.n	80060f2 <TIM_OC3_SetConfig+0xae>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a18      	ldr	r2, [pc, #96]	; (8006150 <TIM_OC3_SetConfig+0x10c>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d113      	bne.n	800611a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	4313      	orrs	r3, r2
 800610c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	4313      	orrs	r3, r2
 8006118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	621a      	str	r2, [r3, #32]
}
 8006134:	bf00      	nop
 8006136:	371c      	adds	r7, #28
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	40012c00 	.word	0x40012c00
 8006144:	40013400 	.word	0x40013400
 8006148:	40014000 	.word	0x40014000
 800614c:	40014400 	.word	0x40014400
 8006150:	40014800 	.word	0x40014800

08006154 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006154:	b480      	push	{r7}
 8006156:	b087      	sub	sp, #28
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800618e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	021b      	lsls	r3, r3, #8
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	4313      	orrs	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	031b      	lsls	r3, r3, #12
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a18      	ldr	r2, [pc, #96]	; (8006214 <TIM_OC4_SetConfig+0xc0>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d00f      	beq.n	80061d8 <TIM_OC4_SetConfig+0x84>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a17      	ldr	r2, [pc, #92]	; (8006218 <TIM_OC4_SetConfig+0xc4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d00b      	beq.n	80061d8 <TIM_OC4_SetConfig+0x84>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a16      	ldr	r2, [pc, #88]	; (800621c <TIM_OC4_SetConfig+0xc8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d007      	beq.n	80061d8 <TIM_OC4_SetConfig+0x84>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a15      	ldr	r2, [pc, #84]	; (8006220 <TIM_OC4_SetConfig+0xcc>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d003      	beq.n	80061d8 <TIM_OC4_SetConfig+0x84>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a14      	ldr	r2, [pc, #80]	; (8006224 <TIM_OC4_SetConfig+0xd0>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d109      	bne.n	80061ec <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	019b      	lsls	r3, r3, #6
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	621a      	str	r2, [r3, #32]
}
 8006206:	bf00      	nop
 8006208:	371c      	adds	r7, #28
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	40012c00 	.word	0x40012c00
 8006218:	40013400 	.word	0x40013400
 800621c:	40014000 	.word	0x40014000
 8006220:	40014400 	.word	0x40014400
 8006224:	40014800 	.word	0x40014800

08006228 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800624e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800626c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	041b      	lsls	r3, r3, #16
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	4313      	orrs	r3, r2
 8006278:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a17      	ldr	r2, [pc, #92]	; (80062dc <TIM_OC5_SetConfig+0xb4>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d00f      	beq.n	80062a2 <TIM_OC5_SetConfig+0x7a>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a16      	ldr	r2, [pc, #88]	; (80062e0 <TIM_OC5_SetConfig+0xb8>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d00b      	beq.n	80062a2 <TIM_OC5_SetConfig+0x7a>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a15      	ldr	r2, [pc, #84]	; (80062e4 <TIM_OC5_SetConfig+0xbc>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d007      	beq.n	80062a2 <TIM_OC5_SetConfig+0x7a>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a14      	ldr	r2, [pc, #80]	; (80062e8 <TIM_OC5_SetConfig+0xc0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d003      	beq.n	80062a2 <TIM_OC5_SetConfig+0x7a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a13      	ldr	r2, [pc, #76]	; (80062ec <TIM_OC5_SetConfig+0xc4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d109      	bne.n	80062b6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	021b      	lsls	r3, r3, #8
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	621a      	str	r2, [r3, #32]
}
 80062d0:	bf00      	nop
 80062d2:	371c      	adds	r7, #28
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	40012c00 	.word	0x40012c00
 80062e0:	40013400 	.word	0x40013400
 80062e4:	40014000 	.word	0x40014000
 80062e8:	40014400 	.word	0x40014400
 80062ec:	40014800 	.word	0x40014800

080062f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b087      	sub	sp, #28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800631e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	021b      	lsls	r3, r3, #8
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	4313      	orrs	r3, r2
 800632e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006336:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	051b      	lsls	r3, r3, #20
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	4313      	orrs	r3, r2
 8006342:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a18      	ldr	r2, [pc, #96]	; (80063a8 <TIM_OC6_SetConfig+0xb8>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d00f      	beq.n	800636c <TIM_OC6_SetConfig+0x7c>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a17      	ldr	r2, [pc, #92]	; (80063ac <TIM_OC6_SetConfig+0xbc>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d00b      	beq.n	800636c <TIM_OC6_SetConfig+0x7c>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a16      	ldr	r2, [pc, #88]	; (80063b0 <TIM_OC6_SetConfig+0xc0>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d007      	beq.n	800636c <TIM_OC6_SetConfig+0x7c>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a15      	ldr	r2, [pc, #84]	; (80063b4 <TIM_OC6_SetConfig+0xc4>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d003      	beq.n	800636c <TIM_OC6_SetConfig+0x7c>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a14      	ldr	r2, [pc, #80]	; (80063b8 <TIM_OC6_SetConfig+0xc8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d109      	bne.n	8006380 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006372:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	029b      	lsls	r3, r3, #10
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	4313      	orrs	r3, r2
 800637e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	621a      	str	r2, [r3, #32]
}
 800639a:	bf00      	nop
 800639c:	371c      	adds	r7, #28
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	40012c00 	.word	0x40012c00
 80063ac:	40013400 	.word	0x40013400
 80063b0:	40014000 	.word	0x40014000
 80063b4:	40014400 	.word	0x40014400
 80063b8:	40014800 	.word	0x40014800

080063bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	f003 031f 	and.w	r3, r3, #31
 80063ce:	2201      	movs	r2, #1
 80063d0:	fa02 f303 	lsl.w	r3, r2, r3
 80063d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6a1a      	ldr	r2, [r3, #32]
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	43db      	mvns	r3, r3
 80063de:	401a      	ands	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6a1a      	ldr	r2, [r3, #32]
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	f003 031f 	and.w	r3, r3, #31
 80063ee:	6879      	ldr	r1, [r7, #4]
 80063f0:	fa01 f303 	lsl.w	r3, r1, r3
 80063f4:	431a      	orrs	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	621a      	str	r2, [r3, #32]
}
 80063fa:	bf00      	nop
 80063fc:	371c      	adds	r7, #28
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
	...

08006408 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006418:	2b01      	cmp	r3, #1
 800641a:	d101      	bne.n	8006420 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800641c:	2302      	movs	r3, #2
 800641e:	e068      	b.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2202      	movs	r2, #2
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a2e      	ldr	r2, [pc, #184]	; (8006500 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d004      	beq.n	8006454 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a2d      	ldr	r2, [pc, #180]	; (8006504 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d108      	bne.n	8006466 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800645a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	4313      	orrs	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	4313      	orrs	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a1e      	ldr	r2, [pc, #120]	; (8006500 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d01d      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006492:	d018      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a1b      	ldr	r2, [pc, #108]	; (8006508 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d013      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a1a      	ldr	r2, [pc, #104]	; (800650c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00e      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a18      	ldr	r2, [pc, #96]	; (8006510 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d009      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a13      	ldr	r2, [pc, #76]	; (8006504 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d004      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a14      	ldr	r2, [pc, #80]	; (8006514 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d10c      	bne.n	80064e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	40012c00 	.word	0x40012c00
 8006504:	40013400 	.word	0x40013400
 8006508:	40000400 	.word	0x40000400
 800650c:	40000800 	.word	0x40000800
 8006510:	40000c00 	.word	0x40000c00
 8006514:	40014000 	.word	0x40014000

08006518 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e040      	b.n	80065ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800652e:	2b00      	cmp	r3, #0
 8006530:	d106      	bne.n	8006540 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7fc f97a 	bl	8002834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2224      	movs	r2, #36	; 0x24
 8006544:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 0201 	bic.w	r2, r2, #1
 8006554:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fb84 	bl	8006c64 <UART_SetConfig>
 800655c:	4603      	mov	r3, r0
 800655e:	2b01      	cmp	r3, #1
 8006560:	d101      	bne.n	8006566 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e022      	b.n	80065ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656a:	2b00      	cmp	r3, #0
 800656c:	d002      	beq.n	8006574 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fe02 	bl	8007178 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685a      	ldr	r2, [r3, #4]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006582:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689a      	ldr	r2, [r3, #8]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006592:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f042 0201 	orr.w	r2, r2, #1
 80065a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fe89 	bl	80072bc <UART_CheckIdleState>
 80065aa:	4603      	mov	r3, r0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3708      	adds	r7, #8
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b08a      	sub	sp, #40	; 0x28
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	4613      	mov	r3, r2
 80065c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065c6:	2b20      	cmp	r3, #32
 80065c8:	d142      	bne.n	8006650 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <HAL_UART_Receive_IT+0x22>
 80065d0:	88fb      	ldrh	r3, [r7, #6]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e03b      	b.n	8006652 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d101      	bne.n	80065e8 <HAL_UART_Receive_IT+0x34>
 80065e4:	2302      	movs	r3, #2
 80065e6:	e034      	b.n	8006652 <HAL_UART_Receive_IT+0x9e>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a18      	ldr	r2, [pc, #96]	; (800665c <HAL_UART_Receive_IT+0xa8>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d01f      	beq.n	8006640 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d018      	beq.n	8006640 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	e853 3f00 	ldrex	r3, [r3]
 800661a:	613b      	str	r3, [r7, #16]
   return(result);
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006622:	627b      	str	r3, [r7, #36]	; 0x24
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	461a      	mov	r2, r3
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	623b      	str	r3, [r7, #32]
 800662e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006630:	69f9      	ldr	r1, [r7, #28]
 8006632:	6a3a      	ldr	r2, [r7, #32]
 8006634:	e841 2300 	strex	r3, r2, [r1]
 8006638:	61bb      	str	r3, [r7, #24]
   return(result);
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1e6      	bne.n	800660e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006640:	88fb      	ldrh	r3, [r7, #6]
 8006642:	461a      	mov	r2, r3
 8006644:	68b9      	ldr	r1, [r7, #8]
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 ff46 	bl	80074d8 <UART_Start_Receive_IT>
 800664c:	4603      	mov	r3, r0
 800664e:	e000      	b.n	8006652 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006650:	2302      	movs	r3, #2
  }
}
 8006652:	4618      	mov	r0, r3
 8006654:	3728      	adds	r7, #40	; 0x28
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	40008000 	.word	0x40008000

08006660 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b0ba      	sub	sp, #232	; 0xe8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	69db      	ldr	r3, [r3, #28]
 800666e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006686:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800668a:	f640 030f 	movw	r3, #2063	; 0x80f
 800668e:	4013      	ands	r3, r2
 8006690:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006694:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006698:	2b00      	cmp	r3, #0
 800669a:	d115      	bne.n	80066c8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800669c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a0:	f003 0320 	and.w	r3, r3, #32
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00f      	beq.n	80066c8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ac:	f003 0320 	and.w	r3, r3, #32
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d009      	beq.n	80066c8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 82a6 	beq.w	8006c0a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	4798      	blx	r3
      }
      return;
 80066c6:	e2a0      	b.n	8006c0a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80066c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 8117 	beq.w	8006900 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80066d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d106      	bne.n	80066ec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80066de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80066e2:	4b85      	ldr	r3, [pc, #532]	; (80068f8 <HAL_UART_IRQHandler+0x298>)
 80066e4:	4013      	ands	r3, r2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 810a 	beq.w	8006900 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80066ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d011      	beq.n	800671c <HAL_UART_IRQHandler+0xbc>
 80066f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00b      	beq.n	800671c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2201      	movs	r2, #1
 800670a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006712:	f043 0201 	orr.w	r2, r3, #1
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800671c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006720:	f003 0302 	and.w	r3, r3, #2
 8006724:	2b00      	cmp	r3, #0
 8006726:	d011      	beq.n	800674c <HAL_UART_IRQHandler+0xec>
 8006728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00b      	beq.n	800674c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2202      	movs	r2, #2
 800673a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006742:	f043 0204 	orr.w	r2, r3, #4
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800674c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006750:	f003 0304 	and.w	r3, r3, #4
 8006754:	2b00      	cmp	r3, #0
 8006756:	d011      	beq.n	800677c <HAL_UART_IRQHandler+0x11c>
 8006758:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00b      	beq.n	800677c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2204      	movs	r2, #4
 800676a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006772:	f043 0202 	orr.w	r2, r3, #2
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800677c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006780:	f003 0308 	and.w	r3, r3, #8
 8006784:	2b00      	cmp	r3, #0
 8006786:	d017      	beq.n	80067b8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800678c:	f003 0320 	and.w	r3, r3, #32
 8006790:	2b00      	cmp	r3, #0
 8006792:	d105      	bne.n	80067a0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006798:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00b      	beq.n	80067b8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2208      	movs	r2, #8
 80067a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067ae:	f043 0208 	orr.w	r2, r3, #8
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d012      	beq.n	80067ea <HAL_UART_IRQHandler+0x18a>
 80067c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00c      	beq.n	80067ea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067e0:	f043 0220 	orr.w	r2, r3, #32
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f000 820c 	beq.w	8006c0e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80067f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067fa:	f003 0320 	and.w	r3, r3, #32
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00d      	beq.n	800681e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006806:	f003 0320 	and.w	r3, r3, #32
 800680a:	2b00      	cmp	r3, #0
 800680c:	d007      	beq.n	800681e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006824:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006832:	2b40      	cmp	r3, #64	; 0x40
 8006834:	d005      	beq.n	8006842 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006836:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800683a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800683e:	2b00      	cmp	r3, #0
 8006840:	d04f      	beq.n	80068e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 ff12 	bl	800766c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006852:	2b40      	cmp	r3, #64	; 0x40
 8006854:	d141      	bne.n	80068da <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3308      	adds	r3, #8
 800685c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006860:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006864:	e853 3f00 	ldrex	r3, [r3]
 8006868:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800686c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006874:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3308      	adds	r3, #8
 800687e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006882:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006886:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800688e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006892:	e841 2300 	strex	r3, r2, [r1]
 8006896:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800689a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1d9      	bne.n	8006856 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d013      	beq.n	80068d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ae:	4a13      	ldr	r2, [pc, #76]	; (80068fc <HAL_UART_IRQHandler+0x29c>)
 80068b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7fd f9e6 	bl	8003c88 <HAL_DMA_Abort_IT>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d017      	beq.n	80068f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80068cc:	4610      	mov	r0, r2
 80068ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d0:	e00f      	b.n	80068f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f9b0 	bl	8006c38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d8:	e00b      	b.n	80068f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f9ac 	bl	8006c38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e0:	e007      	b.n	80068f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f9a8 	bl	8006c38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80068f0:	e18d      	b.n	8006c0e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f2:	bf00      	nop
    return;
 80068f4:	e18b      	b.n	8006c0e <HAL_UART_IRQHandler+0x5ae>
 80068f6:	bf00      	nop
 80068f8:	04000120 	.word	0x04000120
 80068fc:	08007733 	.word	0x08007733

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006904:	2b01      	cmp	r3, #1
 8006906:	f040 8146 	bne.w	8006b96 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800690a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800690e:	f003 0310 	and.w	r3, r3, #16
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 813f 	beq.w	8006b96 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800691c:	f003 0310 	and.w	r3, r3, #16
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 8138 	beq.w	8006b96 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2210      	movs	r2, #16
 800692c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006938:	2b40      	cmp	r3, #64	; 0x40
 800693a:	f040 80b4 	bne.w	8006aa6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800694a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800694e:	2b00      	cmp	r3, #0
 8006950:	f000 815f 	beq.w	8006c12 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800695a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800695e:	429a      	cmp	r2, r3
 8006960:	f080 8157 	bcs.w	8006c12 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800696a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0320 	and.w	r3, r3, #32
 800697a:	2b00      	cmp	r3, #0
 800697c:	f040 8085 	bne.w	8006a8a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006988:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800698c:	e853 3f00 	ldrex	r3, [r3]
 8006990:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006994:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800699c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	461a      	mov	r2, r3
 80069a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80069ae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80069b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80069ba:	e841 2300 	strex	r3, r2, [r1]
 80069be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80069c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1da      	bne.n	8006980 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3308      	adds	r3, #8
 80069d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069d4:	e853 3f00 	ldrex	r3, [r3]
 80069d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80069da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069dc:	f023 0301 	bic.w	r3, r3, #1
 80069e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	3308      	adds	r3, #8
 80069ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80069ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80069f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80069f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80069fa:	e841 2300 	strex	r3, r2, [r1]
 80069fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1e1      	bne.n	80069ca <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3308      	adds	r3, #8
 8006a0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a10:	e853 3f00 	ldrex	r3, [r3]
 8006a14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	3308      	adds	r3, #8
 8006a26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a32:	e841 2300 	strex	r3, r2, [r1]
 8006a36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1e3      	bne.n	8006a06 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2220      	movs	r2, #32
 8006a42:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a52:	e853 3f00 	ldrex	r3, [r3]
 8006a56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a5a:	f023 0310 	bic.w	r3, r3, #16
 8006a5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	461a      	mov	r2, r3
 8006a68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a6e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a74:	e841 2300 	strex	r3, r2, [r1]
 8006a78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1e4      	bne.n	8006a4a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fd f8c1 	bl	8003c0c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f8d4 	bl	8006c4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006aa4:	e0b5      	b.n	8006c12 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f000 80a7 	beq.w	8006c16 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006ac8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 80a2 	beq.w	8006c16 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ada:	e853 3f00 	ldrex	r3, [r3]
 8006ade:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ae6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006af4:	647b      	str	r3, [r7, #68]	; 0x44
 8006af6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006afa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006afc:	e841 2300 	strex	r3, r2, [r1]
 8006b00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e4      	bne.n	8006ad2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	3308      	adds	r3, #8
 8006b0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	e853 3f00 	ldrex	r3, [r3]
 8006b16:	623b      	str	r3, [r7, #32]
   return(result);
 8006b18:	6a3b      	ldr	r3, [r7, #32]
 8006b1a:	f023 0301 	bic.w	r3, r3, #1
 8006b1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3308      	adds	r3, #8
 8006b28:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b2c:	633a      	str	r2, [r7, #48]	; 0x30
 8006b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b34:	e841 2300 	strex	r3, r2, [r1]
 8006b38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e3      	bne.n	8006b08 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2220      	movs	r2, #32
 8006b44:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	e853 3f00 	ldrex	r3, [r3]
 8006b5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f023 0310 	bic.w	r3, r3, #16
 8006b66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b74:	61fb      	str	r3, [r7, #28]
 8006b76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b78:	69b9      	ldr	r1, [r7, #24]
 8006b7a:	69fa      	ldr	r2, [r7, #28]
 8006b7c:	e841 2300 	strex	r3, r2, [r1]
 8006b80:	617b      	str	r3, [r7, #20]
   return(result);
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1e4      	bne.n	8006b52 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f85c 	bl	8006c4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b94:	e03f      	b.n	8006c16 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00e      	beq.n	8006bc0 <HAL_UART_IRQHandler+0x560>
 8006ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d008      	beq.n	8006bc0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006bb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 ff5a 	bl	8007a72 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bbe:	e02d      	b.n	8006c1c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00e      	beq.n	8006bea <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d008      	beq.n	8006bea <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d01c      	beq.n	8006c1a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	4798      	blx	r3
    }
    return;
 8006be8:	e017      	b.n	8006c1a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d012      	beq.n	8006c1c <HAL_UART_IRQHandler+0x5bc>
 8006bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00c      	beq.n	8006c1c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fdab 	bl	800775e <UART_EndTransmit_IT>
    return;
 8006c08:	e008      	b.n	8006c1c <HAL_UART_IRQHandler+0x5bc>
      return;
 8006c0a:	bf00      	nop
 8006c0c:	e006      	b.n	8006c1c <HAL_UART_IRQHandler+0x5bc>
    return;
 8006c0e:	bf00      	nop
 8006c10:	e004      	b.n	8006c1c <HAL_UART_IRQHandler+0x5bc>
      return;
 8006c12:	bf00      	nop
 8006c14:	e002      	b.n	8006c1c <HAL_UART_IRQHandler+0x5bc>
      return;
 8006c16:	bf00      	nop
 8006c18:	e000      	b.n	8006c1c <HAL_UART_IRQHandler+0x5bc>
    return;
 8006c1a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006c1c:	37e8      	adds	r7, #232	; 0xe8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop

08006c24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	460b      	mov	r3, r1
 8006c56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c64:	b5b0      	push	{r4, r5, r7, lr}
 8006c66:	b088      	sub	sp, #32
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	689a      	ldr	r2, [r3, #8]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	431a      	orrs	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	69db      	ldr	r3, [r3, #28]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	4bad      	ldr	r3, [pc, #692]	; (8006f44 <UART_SetConfig+0x2e0>)
 8006c90:	4013      	ands	r3, r2
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	6812      	ldr	r2, [r2, #0]
 8006c96:	69f9      	ldr	r1, [r7, #28]
 8006c98:	430b      	orrs	r3, r1
 8006c9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68da      	ldr	r2, [r3, #12]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4aa2      	ldr	r2, [pc, #648]	; (8006f48 <UART_SetConfig+0x2e4>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d004      	beq.n	8006ccc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	69fa      	ldr	r2, [r7, #28]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	69fa      	ldr	r2, [r7, #28]
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a99      	ldr	r2, [pc, #612]	; (8006f4c <UART_SetConfig+0x2e8>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d121      	bne.n	8006d2e <UART_SetConfig+0xca>
 8006cea:	4b99      	ldr	r3, [pc, #612]	; (8006f50 <UART_SetConfig+0x2ec>)
 8006cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf0:	f003 0303 	and.w	r3, r3, #3
 8006cf4:	2b03      	cmp	r3, #3
 8006cf6:	d817      	bhi.n	8006d28 <UART_SetConfig+0xc4>
 8006cf8:	a201      	add	r2, pc, #4	; (adr r2, 8006d00 <UART_SetConfig+0x9c>)
 8006cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfe:	bf00      	nop
 8006d00:	08006d11 	.word	0x08006d11
 8006d04:	08006d1d 	.word	0x08006d1d
 8006d08:	08006d17 	.word	0x08006d17
 8006d0c:	08006d23 	.word	0x08006d23
 8006d10:	2301      	movs	r3, #1
 8006d12:	76fb      	strb	r3, [r7, #27]
 8006d14:	e0e7      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006d16:	2302      	movs	r3, #2
 8006d18:	76fb      	strb	r3, [r7, #27]
 8006d1a:	e0e4      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006d1c:	2304      	movs	r3, #4
 8006d1e:	76fb      	strb	r3, [r7, #27]
 8006d20:	e0e1      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006d22:	2308      	movs	r3, #8
 8006d24:	76fb      	strb	r3, [r7, #27]
 8006d26:	e0de      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006d28:	2310      	movs	r3, #16
 8006d2a:	76fb      	strb	r3, [r7, #27]
 8006d2c:	e0db      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a88      	ldr	r2, [pc, #544]	; (8006f54 <UART_SetConfig+0x2f0>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d132      	bne.n	8006d9e <UART_SetConfig+0x13a>
 8006d38:	4b85      	ldr	r3, [pc, #532]	; (8006f50 <UART_SetConfig+0x2ec>)
 8006d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d3e:	f003 030c 	and.w	r3, r3, #12
 8006d42:	2b0c      	cmp	r3, #12
 8006d44:	d828      	bhi.n	8006d98 <UART_SetConfig+0x134>
 8006d46:	a201      	add	r2, pc, #4	; (adr r2, 8006d4c <UART_SetConfig+0xe8>)
 8006d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4c:	08006d81 	.word	0x08006d81
 8006d50:	08006d99 	.word	0x08006d99
 8006d54:	08006d99 	.word	0x08006d99
 8006d58:	08006d99 	.word	0x08006d99
 8006d5c:	08006d8d 	.word	0x08006d8d
 8006d60:	08006d99 	.word	0x08006d99
 8006d64:	08006d99 	.word	0x08006d99
 8006d68:	08006d99 	.word	0x08006d99
 8006d6c:	08006d87 	.word	0x08006d87
 8006d70:	08006d99 	.word	0x08006d99
 8006d74:	08006d99 	.word	0x08006d99
 8006d78:	08006d99 	.word	0x08006d99
 8006d7c:	08006d93 	.word	0x08006d93
 8006d80:	2300      	movs	r3, #0
 8006d82:	76fb      	strb	r3, [r7, #27]
 8006d84:	e0af      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006d86:	2302      	movs	r3, #2
 8006d88:	76fb      	strb	r3, [r7, #27]
 8006d8a:	e0ac      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006d8c:	2304      	movs	r3, #4
 8006d8e:	76fb      	strb	r3, [r7, #27]
 8006d90:	e0a9      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006d92:	2308      	movs	r3, #8
 8006d94:	76fb      	strb	r3, [r7, #27]
 8006d96:	e0a6      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006d98:	2310      	movs	r3, #16
 8006d9a:	76fb      	strb	r3, [r7, #27]
 8006d9c:	e0a3      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a6d      	ldr	r2, [pc, #436]	; (8006f58 <UART_SetConfig+0x2f4>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d120      	bne.n	8006dea <UART_SetConfig+0x186>
 8006da8:	4b69      	ldr	r3, [pc, #420]	; (8006f50 <UART_SetConfig+0x2ec>)
 8006daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006db2:	2b30      	cmp	r3, #48	; 0x30
 8006db4:	d013      	beq.n	8006dde <UART_SetConfig+0x17a>
 8006db6:	2b30      	cmp	r3, #48	; 0x30
 8006db8:	d814      	bhi.n	8006de4 <UART_SetConfig+0x180>
 8006dba:	2b20      	cmp	r3, #32
 8006dbc:	d009      	beq.n	8006dd2 <UART_SetConfig+0x16e>
 8006dbe:	2b20      	cmp	r3, #32
 8006dc0:	d810      	bhi.n	8006de4 <UART_SetConfig+0x180>
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d002      	beq.n	8006dcc <UART_SetConfig+0x168>
 8006dc6:	2b10      	cmp	r3, #16
 8006dc8:	d006      	beq.n	8006dd8 <UART_SetConfig+0x174>
 8006dca:	e00b      	b.n	8006de4 <UART_SetConfig+0x180>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	76fb      	strb	r3, [r7, #27]
 8006dd0:	e089      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006dd2:	2302      	movs	r3, #2
 8006dd4:	76fb      	strb	r3, [r7, #27]
 8006dd6:	e086      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006dd8:	2304      	movs	r3, #4
 8006dda:	76fb      	strb	r3, [r7, #27]
 8006ddc:	e083      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006dde:	2308      	movs	r3, #8
 8006de0:	76fb      	strb	r3, [r7, #27]
 8006de2:	e080      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006de4:	2310      	movs	r3, #16
 8006de6:	76fb      	strb	r3, [r7, #27]
 8006de8:	e07d      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a5b      	ldr	r2, [pc, #364]	; (8006f5c <UART_SetConfig+0x2f8>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d120      	bne.n	8006e36 <UART_SetConfig+0x1d2>
 8006df4:	4b56      	ldr	r3, [pc, #344]	; (8006f50 <UART_SetConfig+0x2ec>)
 8006df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dfa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006dfe:	2bc0      	cmp	r3, #192	; 0xc0
 8006e00:	d013      	beq.n	8006e2a <UART_SetConfig+0x1c6>
 8006e02:	2bc0      	cmp	r3, #192	; 0xc0
 8006e04:	d814      	bhi.n	8006e30 <UART_SetConfig+0x1cc>
 8006e06:	2b80      	cmp	r3, #128	; 0x80
 8006e08:	d009      	beq.n	8006e1e <UART_SetConfig+0x1ba>
 8006e0a:	2b80      	cmp	r3, #128	; 0x80
 8006e0c:	d810      	bhi.n	8006e30 <UART_SetConfig+0x1cc>
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d002      	beq.n	8006e18 <UART_SetConfig+0x1b4>
 8006e12:	2b40      	cmp	r3, #64	; 0x40
 8006e14:	d006      	beq.n	8006e24 <UART_SetConfig+0x1c0>
 8006e16:	e00b      	b.n	8006e30 <UART_SetConfig+0x1cc>
 8006e18:	2300      	movs	r3, #0
 8006e1a:	76fb      	strb	r3, [r7, #27]
 8006e1c:	e063      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006e1e:	2302      	movs	r3, #2
 8006e20:	76fb      	strb	r3, [r7, #27]
 8006e22:	e060      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006e24:	2304      	movs	r3, #4
 8006e26:	76fb      	strb	r3, [r7, #27]
 8006e28:	e05d      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006e2a:	2308      	movs	r3, #8
 8006e2c:	76fb      	strb	r3, [r7, #27]
 8006e2e:	e05a      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006e30:	2310      	movs	r3, #16
 8006e32:	76fb      	strb	r3, [r7, #27]
 8006e34:	e057      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a49      	ldr	r2, [pc, #292]	; (8006f60 <UART_SetConfig+0x2fc>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d125      	bne.n	8006e8c <UART_SetConfig+0x228>
 8006e40:	4b43      	ldr	r3, [pc, #268]	; (8006f50 <UART_SetConfig+0x2ec>)
 8006e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e4e:	d017      	beq.n	8006e80 <UART_SetConfig+0x21c>
 8006e50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e54:	d817      	bhi.n	8006e86 <UART_SetConfig+0x222>
 8006e56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e5a:	d00b      	beq.n	8006e74 <UART_SetConfig+0x210>
 8006e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e60:	d811      	bhi.n	8006e86 <UART_SetConfig+0x222>
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d003      	beq.n	8006e6e <UART_SetConfig+0x20a>
 8006e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e6a:	d006      	beq.n	8006e7a <UART_SetConfig+0x216>
 8006e6c:	e00b      	b.n	8006e86 <UART_SetConfig+0x222>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	76fb      	strb	r3, [r7, #27]
 8006e72:	e038      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006e74:	2302      	movs	r3, #2
 8006e76:	76fb      	strb	r3, [r7, #27]
 8006e78:	e035      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006e7a:	2304      	movs	r3, #4
 8006e7c:	76fb      	strb	r3, [r7, #27]
 8006e7e:	e032      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006e80:	2308      	movs	r3, #8
 8006e82:	76fb      	strb	r3, [r7, #27]
 8006e84:	e02f      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006e86:	2310      	movs	r3, #16
 8006e88:	76fb      	strb	r3, [r7, #27]
 8006e8a:	e02c      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a2d      	ldr	r2, [pc, #180]	; (8006f48 <UART_SetConfig+0x2e4>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d125      	bne.n	8006ee2 <UART_SetConfig+0x27e>
 8006e96:	4b2e      	ldr	r3, [pc, #184]	; (8006f50 <UART_SetConfig+0x2ec>)
 8006e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ea0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ea4:	d017      	beq.n	8006ed6 <UART_SetConfig+0x272>
 8006ea6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006eaa:	d817      	bhi.n	8006edc <UART_SetConfig+0x278>
 8006eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eb0:	d00b      	beq.n	8006eca <UART_SetConfig+0x266>
 8006eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eb6:	d811      	bhi.n	8006edc <UART_SetConfig+0x278>
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <UART_SetConfig+0x260>
 8006ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ec0:	d006      	beq.n	8006ed0 <UART_SetConfig+0x26c>
 8006ec2:	e00b      	b.n	8006edc <UART_SetConfig+0x278>
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	76fb      	strb	r3, [r7, #27]
 8006ec8:	e00d      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006eca:	2302      	movs	r3, #2
 8006ecc:	76fb      	strb	r3, [r7, #27]
 8006ece:	e00a      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006ed0:	2304      	movs	r3, #4
 8006ed2:	76fb      	strb	r3, [r7, #27]
 8006ed4:	e007      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006ed6:	2308      	movs	r3, #8
 8006ed8:	76fb      	strb	r3, [r7, #27]
 8006eda:	e004      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006edc:	2310      	movs	r3, #16
 8006ede:	76fb      	strb	r3, [r7, #27]
 8006ee0:	e001      	b.n	8006ee6 <UART_SetConfig+0x282>
 8006ee2:	2310      	movs	r3, #16
 8006ee4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a17      	ldr	r2, [pc, #92]	; (8006f48 <UART_SetConfig+0x2e4>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	f040 8087 	bne.w	8007000 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ef2:	7efb      	ldrb	r3, [r7, #27]
 8006ef4:	2b08      	cmp	r3, #8
 8006ef6:	d837      	bhi.n	8006f68 <UART_SetConfig+0x304>
 8006ef8:	a201      	add	r2, pc, #4	; (adr r2, 8006f00 <UART_SetConfig+0x29c>)
 8006efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efe:	bf00      	nop
 8006f00:	08006f25 	.word	0x08006f25
 8006f04:	08006f69 	.word	0x08006f69
 8006f08:	08006f2d 	.word	0x08006f2d
 8006f0c:	08006f69 	.word	0x08006f69
 8006f10:	08006f33 	.word	0x08006f33
 8006f14:	08006f69 	.word	0x08006f69
 8006f18:	08006f69 	.word	0x08006f69
 8006f1c:	08006f69 	.word	0x08006f69
 8006f20:	08006f3b 	.word	0x08006f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f24:	f7fd ff20 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
 8006f28:	6178      	str	r0, [r7, #20]
        break;
 8006f2a:	e022      	b.n	8006f72 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f2c:	4b0d      	ldr	r3, [pc, #52]	; (8006f64 <UART_SetConfig+0x300>)
 8006f2e:	617b      	str	r3, [r7, #20]
        break;
 8006f30:	e01f      	b.n	8006f72 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f32:	f7fd fe81 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 8006f36:	6178      	str	r0, [r7, #20]
        break;
 8006f38:	e01b      	b.n	8006f72 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f3e:	617b      	str	r3, [r7, #20]
        break;
 8006f40:	e017      	b.n	8006f72 <UART_SetConfig+0x30e>
 8006f42:	bf00      	nop
 8006f44:	efff69f3 	.word	0xefff69f3
 8006f48:	40008000 	.word	0x40008000
 8006f4c:	40013800 	.word	0x40013800
 8006f50:	40021000 	.word	0x40021000
 8006f54:	40004400 	.word	0x40004400
 8006f58:	40004800 	.word	0x40004800
 8006f5c:	40004c00 	.word	0x40004c00
 8006f60:	40005000 	.word	0x40005000
 8006f64:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	76bb      	strb	r3, [r7, #26]
        break;
 8006f70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f000 80f1 	beq.w	800715c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	005b      	lsls	r3, r3, #1
 8006f82:	4413      	add	r3, r2
 8006f84:	697a      	ldr	r2, [r7, #20]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d305      	bcc.n	8006f96 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d902      	bls.n	8006f9c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	76bb      	strb	r3, [r7, #26]
 8006f9a:	e0df      	b.n	800715c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f04f 0100 	mov.w	r1, #0
 8006fa4:	f04f 0200 	mov.w	r2, #0
 8006fa8:	f04f 0300 	mov.w	r3, #0
 8006fac:	020b      	lsls	r3, r1, #8
 8006fae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006fb2:	0202      	lsls	r2, r0, #8
 8006fb4:	6879      	ldr	r1, [r7, #4]
 8006fb6:	6849      	ldr	r1, [r1, #4]
 8006fb8:	0849      	lsrs	r1, r1, #1
 8006fba:	4608      	mov	r0, r1
 8006fbc:	f04f 0100 	mov.w	r1, #0
 8006fc0:	1814      	adds	r4, r2, r0
 8006fc2:	eb43 0501 	adc.w	r5, r3, r1
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	f04f 0300 	mov.w	r3, #0
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	4629      	mov	r1, r5
 8006fd4:	f7f9 fe2a 	bl	8000c2c <__aeabi_uldivmod>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	460b      	mov	r3, r1
 8006fdc:	4613      	mov	r3, r2
 8006fde:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fe6:	d308      	bcc.n	8006ffa <UART_SetConfig+0x396>
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fee:	d204      	bcs.n	8006ffa <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	60da      	str	r2, [r3, #12]
 8006ff8:	e0b0      	b.n	800715c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	76bb      	strb	r3, [r7, #26]
 8006ffe:	e0ad      	b.n	800715c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	69db      	ldr	r3, [r3, #28]
 8007004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007008:	d15b      	bne.n	80070c2 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800700a:	7efb      	ldrb	r3, [r7, #27]
 800700c:	2b08      	cmp	r3, #8
 800700e:	d828      	bhi.n	8007062 <UART_SetConfig+0x3fe>
 8007010:	a201      	add	r2, pc, #4	; (adr r2, 8007018 <UART_SetConfig+0x3b4>)
 8007012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007016:	bf00      	nop
 8007018:	0800703d 	.word	0x0800703d
 800701c:	08007045 	.word	0x08007045
 8007020:	0800704d 	.word	0x0800704d
 8007024:	08007063 	.word	0x08007063
 8007028:	08007053 	.word	0x08007053
 800702c:	08007063 	.word	0x08007063
 8007030:	08007063 	.word	0x08007063
 8007034:	08007063 	.word	0x08007063
 8007038:	0800705b 	.word	0x0800705b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800703c:	f7fd fe94 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
 8007040:	6178      	str	r0, [r7, #20]
        break;
 8007042:	e013      	b.n	800706c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007044:	f7fd fea6 	bl	8004d94 <HAL_RCC_GetPCLK2Freq>
 8007048:	6178      	str	r0, [r7, #20]
        break;
 800704a:	e00f      	b.n	800706c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800704c:	4b49      	ldr	r3, [pc, #292]	; (8007174 <UART_SetConfig+0x510>)
 800704e:	617b      	str	r3, [r7, #20]
        break;
 8007050:	e00c      	b.n	800706c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007052:	f7fd fdf1 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 8007056:	6178      	str	r0, [r7, #20]
        break;
 8007058:	e008      	b.n	800706c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800705a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800705e:	617b      	str	r3, [r7, #20]
        break;
 8007060:	e004      	b.n	800706c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8007062:	2300      	movs	r3, #0
 8007064:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	76bb      	strb	r3, [r7, #26]
        break;
 800706a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d074      	beq.n	800715c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	005a      	lsls	r2, r3, #1
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	085b      	lsrs	r3, r3, #1
 800707c:	441a      	add	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	fbb2 f3f3 	udiv	r3, r2, r3
 8007086:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	2b0f      	cmp	r3, #15
 800708c:	d916      	bls.n	80070bc <UART_SetConfig+0x458>
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007094:	d212      	bcs.n	80070bc <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	b29b      	uxth	r3, r3
 800709a:	f023 030f 	bic.w	r3, r3, #15
 800709e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	085b      	lsrs	r3, r3, #1
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	f003 0307 	and.w	r3, r3, #7
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	89fb      	ldrh	r3, [r7, #14]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	89fa      	ldrh	r2, [r7, #14]
 80070b8:	60da      	str	r2, [r3, #12]
 80070ba:	e04f      	b.n	800715c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	76bb      	strb	r3, [r7, #26]
 80070c0:	e04c      	b.n	800715c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070c2:	7efb      	ldrb	r3, [r7, #27]
 80070c4:	2b08      	cmp	r3, #8
 80070c6:	d828      	bhi.n	800711a <UART_SetConfig+0x4b6>
 80070c8:	a201      	add	r2, pc, #4	; (adr r2, 80070d0 <UART_SetConfig+0x46c>)
 80070ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ce:	bf00      	nop
 80070d0:	080070f5 	.word	0x080070f5
 80070d4:	080070fd 	.word	0x080070fd
 80070d8:	08007105 	.word	0x08007105
 80070dc:	0800711b 	.word	0x0800711b
 80070e0:	0800710b 	.word	0x0800710b
 80070e4:	0800711b 	.word	0x0800711b
 80070e8:	0800711b 	.word	0x0800711b
 80070ec:	0800711b 	.word	0x0800711b
 80070f0:	08007113 	.word	0x08007113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070f4:	f7fd fe38 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
 80070f8:	6178      	str	r0, [r7, #20]
        break;
 80070fa:	e013      	b.n	8007124 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070fc:	f7fd fe4a 	bl	8004d94 <HAL_RCC_GetPCLK2Freq>
 8007100:	6178      	str	r0, [r7, #20]
        break;
 8007102:	e00f      	b.n	8007124 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007104:	4b1b      	ldr	r3, [pc, #108]	; (8007174 <UART_SetConfig+0x510>)
 8007106:	617b      	str	r3, [r7, #20]
        break;
 8007108:	e00c      	b.n	8007124 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800710a:	f7fd fd95 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 800710e:	6178      	str	r0, [r7, #20]
        break;
 8007110:	e008      	b.n	8007124 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007116:	617b      	str	r3, [r7, #20]
        break;
 8007118:	e004      	b.n	8007124 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800711a:	2300      	movs	r3, #0
 800711c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	76bb      	strb	r3, [r7, #26]
        break;
 8007122:	bf00      	nop
    }

    if (pclk != 0U)
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d018      	beq.n	800715c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	085a      	lsrs	r2, r3, #1
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	441a      	add	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	fbb2 f3f3 	udiv	r3, r2, r3
 800713c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	2b0f      	cmp	r3, #15
 8007142:	d909      	bls.n	8007158 <UART_SetConfig+0x4f4>
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800714a:	d205      	bcs.n	8007158 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	b29a      	uxth	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	60da      	str	r2, [r3, #12]
 8007156:	e001      	b.n	800715c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007168:	7ebb      	ldrb	r3, [r7, #26]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3720      	adds	r7, #32
 800716e:	46bd      	mov	sp, r7
 8007170:	bdb0      	pop	{r4, r5, r7, pc}
 8007172:	bf00      	nop
 8007174:	00f42400 	.word	0x00f42400

08007178 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007184:	f003 0301 	and.w	r3, r3, #1
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00a      	beq.n	80071a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	430a      	orrs	r2, r1
 80071a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a6:	f003 0302 	and.w	r3, r3, #2
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00a      	beq.n	80071c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	430a      	orrs	r2, r1
 80071c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c8:	f003 0304 	and.w	r3, r3, #4
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00a      	beq.n	80071e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ea:	f003 0308 	and.w	r3, r3, #8
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00a      	beq.n	8007208 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	430a      	orrs	r2, r1
 8007206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720c:	f003 0310 	and.w	r3, r3, #16
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00a      	beq.n	800722a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722e:	f003 0320 	and.w	r3, r3, #32
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	430a      	orrs	r2, r1
 800724a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007254:	2b00      	cmp	r3, #0
 8007256:	d01a      	beq.n	800728e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	430a      	orrs	r2, r1
 800726c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007276:	d10a      	bne.n	800728e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	430a      	orrs	r2, r1
 800728c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00a      	beq.n	80072b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	430a      	orrs	r2, r1
 80072ae:	605a      	str	r2, [r3, #4]
  }
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af02      	add	r7, sp, #8
 80072c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072cc:	f7fb fbf6 	bl	8002abc <HAL_GetTick>
 80072d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 0308 	and.w	r3, r3, #8
 80072dc:	2b08      	cmp	r3, #8
 80072de:	d10e      	bne.n	80072fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f82d 	bl	800734e <UART_WaitOnFlagUntilTimeout>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d001      	beq.n	80072fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e023      	b.n	8007346 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0304 	and.w	r3, r3, #4
 8007308:	2b04      	cmp	r3, #4
 800730a:	d10e      	bne.n	800732a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800730c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f817 	bl	800734e <UART_WaitOnFlagUntilTimeout>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e00d      	b.n	8007346 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2220      	movs	r2, #32
 800732e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2220      	movs	r2, #32
 8007334:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b09c      	sub	sp, #112	; 0x70
 8007352:	af00      	add	r7, sp, #0
 8007354:	60f8      	str	r0, [r7, #12]
 8007356:	60b9      	str	r1, [r7, #8]
 8007358:	603b      	str	r3, [r7, #0]
 800735a:	4613      	mov	r3, r2
 800735c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800735e:	e0a5      	b.n	80074ac <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007360:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007366:	f000 80a1 	beq.w	80074ac <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800736a:	f7fb fba7 	bl	8002abc <HAL_GetTick>
 800736e:	4602      	mov	r2, r0
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007376:	429a      	cmp	r2, r3
 8007378:	d302      	bcc.n	8007380 <UART_WaitOnFlagUntilTimeout+0x32>
 800737a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800737c:	2b00      	cmp	r3, #0
 800737e:	d13e      	bne.n	80073fe <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007388:	e853 3f00 	ldrex	r3, [r3]
 800738c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800738e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007390:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007394:	667b      	str	r3, [r7, #100]	; 0x64
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	461a      	mov	r2, r3
 800739c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800739e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073a0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80073a6:	e841 2300 	strex	r3, r2, [r1]
 80073aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80073ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1e6      	bne.n	8007380 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	3308      	adds	r3, #8
 80073b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073bc:	e853 3f00 	ldrex	r3, [r3]
 80073c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c4:	f023 0301 	bic.w	r3, r3, #1
 80073c8:	663b      	str	r3, [r7, #96]	; 0x60
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	3308      	adds	r3, #8
 80073d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80073d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073da:	e841 2300 	strex	r3, r2, [r1]
 80073de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80073e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1e5      	bne.n	80073b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2220      	movs	r2, #32
 80073ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2220      	movs	r2, #32
 80073f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e067      	b.n	80074ce <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0304 	and.w	r3, r3, #4
 8007408:	2b00      	cmp	r3, #0
 800740a:	d04f      	beq.n	80074ac <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007416:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800741a:	d147      	bne.n	80074ac <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007424:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742e:	e853 3f00 	ldrex	r3, [r3]
 8007432:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800743a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	461a      	mov	r2, r3
 8007442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007444:	637b      	str	r3, [r7, #52]	; 0x34
 8007446:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007448:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800744a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800744c:	e841 2300 	strex	r3, r2, [r1]
 8007450:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1e6      	bne.n	8007426 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3308      	adds	r3, #8
 800745e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	e853 3f00 	ldrex	r3, [r3]
 8007466:	613b      	str	r3, [r7, #16]
   return(result);
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	f023 0301 	bic.w	r3, r3, #1
 800746e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	3308      	adds	r3, #8
 8007476:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007478:	623a      	str	r2, [r7, #32]
 800747a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747c:	69f9      	ldr	r1, [r7, #28]
 800747e:	6a3a      	ldr	r2, [r7, #32]
 8007480:	e841 2300 	strex	r3, r2, [r1]
 8007484:	61bb      	str	r3, [r7, #24]
   return(result);
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1e5      	bne.n	8007458 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2220      	movs	r2, #32
 8007490:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2220      	movs	r2, #32
 8007496:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2220      	movs	r2, #32
 800749c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e010      	b.n	80074ce <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	69da      	ldr	r2, [r3, #28]
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	4013      	ands	r3, r2
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	bf0c      	ite	eq
 80074bc:	2301      	moveq	r3, #1
 80074be:	2300      	movne	r3, #0
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	461a      	mov	r2, r3
 80074c4:	79fb      	ldrb	r3, [r7, #7]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	f43f af4a 	beq.w	8007360 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3770      	adds	r7, #112	; 0x70
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074d8:	b480      	push	{r7}
 80074da:	b097      	sub	sp, #92	; 0x5c
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	4613      	mov	r3, r2
 80074e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	88fa      	ldrh	r2, [r7, #6]
 80074f0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	88fa      	ldrh	r2, [r7, #6]
 80074f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800750a:	d10e      	bne.n	800752a <UART_Start_Receive_IT+0x52>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d105      	bne.n	8007520 <UART_Start_Receive_IT+0x48>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f240 12ff 	movw	r2, #511	; 0x1ff
 800751a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800751e:	e02d      	b.n	800757c <UART_Start_Receive_IT+0xa4>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	22ff      	movs	r2, #255	; 0xff
 8007524:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007528:	e028      	b.n	800757c <UART_Start_Receive_IT+0xa4>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10d      	bne.n	800754e <UART_Start_Receive_IT+0x76>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d104      	bne.n	8007544 <UART_Start_Receive_IT+0x6c>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	22ff      	movs	r2, #255	; 0xff
 800753e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007542:	e01b      	b.n	800757c <UART_Start_Receive_IT+0xa4>
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	227f      	movs	r2, #127	; 0x7f
 8007548:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800754c:	e016      	b.n	800757c <UART_Start_Receive_IT+0xa4>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007556:	d10d      	bne.n	8007574 <UART_Start_Receive_IT+0x9c>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d104      	bne.n	800756a <UART_Start_Receive_IT+0x92>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	227f      	movs	r2, #127	; 0x7f
 8007564:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007568:	e008      	b.n	800757c <UART_Start_Receive_IT+0xa4>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	223f      	movs	r2, #63	; 0x3f
 800756e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007572:	e003      	b.n	800757c <UART_Start_Receive_IT+0xa4>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2222      	movs	r2, #34	; 0x22
 8007588:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3308      	adds	r3, #8
 8007590:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007594:	e853 3f00 	ldrex	r3, [r3]
 8007598:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800759a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759c:	f043 0301 	orr.w	r3, r3, #1
 80075a0:	657b      	str	r3, [r7, #84]	; 0x54
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	3308      	adds	r3, #8
 80075a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80075aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80075ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80075b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075b2:	e841 2300 	strex	r3, r2, [r1]
 80075b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80075b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1e5      	bne.n	800758a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075c6:	d107      	bne.n	80075d8 <UART_Start_Receive_IT+0x100>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d103      	bne.n	80075d8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	4a24      	ldr	r2, [pc, #144]	; (8007664 <UART_Start_Receive_IT+0x18c>)
 80075d4:	665a      	str	r2, [r3, #100]	; 0x64
 80075d6:	e002      	b.n	80075de <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	4a23      	ldr	r2, [pc, #140]	; (8007668 <UART_Start_Receive_IT+0x190>)
 80075dc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d019      	beq.n	8007622 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f6:	e853 3f00 	ldrex	r3, [r3]
 80075fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	461a      	mov	r2, r3
 800760a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800760c:	637b      	str	r3, [r7, #52]	; 0x34
 800760e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007610:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007614:	e841 2300 	strex	r3, r2, [r1]
 8007618:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800761a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1e6      	bne.n	80075ee <UART_Start_Receive_IT+0x116>
 8007620:	e018      	b.n	8007654 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	e853 3f00 	ldrex	r3, [r3]
 800762e:	613b      	str	r3, [r7, #16]
   return(result);
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	f043 0320 	orr.w	r3, r3, #32
 8007636:	653b      	str	r3, [r7, #80]	; 0x50
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	461a      	mov	r2, r3
 800763e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007640:	623b      	str	r3, [r7, #32]
 8007642:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007644:	69f9      	ldr	r1, [r7, #28]
 8007646:	6a3a      	ldr	r2, [r7, #32]
 8007648:	e841 2300 	strex	r3, r2, [r1]
 800764c:	61bb      	str	r3, [r7, #24]
   return(result);
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1e6      	bne.n	8007622 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	375c      	adds	r7, #92	; 0x5c
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	08007913 	.word	0x08007913
 8007668:	080077b3 	.word	0x080077b3

0800766c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800766c:	b480      	push	{r7}
 800766e:	b095      	sub	sp, #84	; 0x54
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800767c:	e853 3f00 	ldrex	r3, [r3]
 8007680:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007684:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007688:	64fb      	str	r3, [r7, #76]	; 0x4c
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	461a      	mov	r2, r3
 8007690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007692:	643b      	str	r3, [r7, #64]	; 0x40
 8007694:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007696:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007698:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800769a:	e841 2300 	strex	r3, r2, [r1]
 800769e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1e6      	bne.n	8007674 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3308      	adds	r3, #8
 80076ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ae:	6a3b      	ldr	r3, [r7, #32]
 80076b0:	e853 3f00 	ldrex	r3, [r3]
 80076b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	f023 0301 	bic.w	r3, r3, #1
 80076bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3308      	adds	r3, #8
 80076c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076ce:	e841 2300 	strex	r3, r2, [r1]
 80076d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1e5      	bne.n	80076a6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d118      	bne.n	8007714 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	e853 3f00 	ldrex	r3, [r3]
 80076ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	f023 0310 	bic.w	r3, r3, #16
 80076f6:	647b      	str	r3, [r7, #68]	; 0x44
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	461a      	mov	r2, r3
 80076fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007700:	61bb      	str	r3, [r7, #24]
 8007702:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007704:	6979      	ldr	r1, [r7, #20]
 8007706:	69ba      	ldr	r2, [r7, #24]
 8007708:	e841 2300 	strex	r3, r2, [r1]
 800770c:	613b      	str	r3, [r7, #16]
   return(result);
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1e6      	bne.n	80076e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2220      	movs	r2, #32
 8007718:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007726:	bf00      	nop
 8007728:	3754      	adds	r7, #84	; 0x54
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b084      	sub	sp, #16
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f7ff fa71 	bl	8006c38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007756:	bf00      	nop
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b088      	sub	sp, #32
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	e853 3f00 	ldrex	r3, [r3]
 8007772:	60bb      	str	r3, [r7, #8]
   return(result);
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800777a:	61fb      	str	r3, [r7, #28]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	461a      	mov	r2, r3
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	61bb      	str	r3, [r7, #24]
 8007786:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007788:	6979      	ldr	r1, [r7, #20]
 800778a:	69ba      	ldr	r2, [r7, #24]
 800778c:	e841 2300 	strex	r3, r2, [r1]
 8007790:	613b      	str	r3, [r7, #16]
   return(result);
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1e6      	bne.n	8007766 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2220      	movs	r2, #32
 800779c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f7ff fa3d 	bl	8006c24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077aa:	bf00      	nop
 80077ac:	3720      	adds	r7, #32
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b096      	sub	sp, #88	; 0x58
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077c8:	2b22      	cmp	r3, #34	; 0x22
 80077ca:	f040 8094 	bne.w	80078f6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80077d4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80077d8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80077dc:	b2d9      	uxtb	r1, r3
 80077de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077e8:	400a      	ands	r2, r1
 80077ea:	b2d2      	uxtb	r2, r2
 80077ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077f2:	1c5a      	adds	r2, r3, #1
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077fe:	b29b      	uxth	r3, r3
 8007800:	3b01      	subs	r3, #1
 8007802:	b29a      	uxth	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007810:	b29b      	uxth	r3, r3
 8007812:	2b00      	cmp	r3, #0
 8007814:	d179      	bne.n	800790a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781e:	e853 3f00 	ldrex	r3, [r3]
 8007822:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007826:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800782a:	653b      	str	r3, [r7, #80]	; 0x50
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	461a      	mov	r2, r3
 8007832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007834:	647b      	str	r3, [r7, #68]	; 0x44
 8007836:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007838:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800783a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800783c:	e841 2300 	strex	r3, r2, [r1]
 8007840:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1e6      	bne.n	8007816 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3308      	adds	r3, #8
 800784e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	e853 3f00 	ldrex	r3, [r3]
 8007856:	623b      	str	r3, [r7, #32]
   return(result);
 8007858:	6a3b      	ldr	r3, [r7, #32]
 800785a:	f023 0301 	bic.w	r3, r3, #1
 800785e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	3308      	adds	r3, #8
 8007866:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007868:	633a      	str	r2, [r7, #48]	; 0x30
 800786a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800786e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007870:	e841 2300 	strex	r3, r2, [r1]
 8007874:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1e5      	bne.n	8007848 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2220      	movs	r2, #32
 8007880:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800788c:	2b01      	cmp	r3, #1
 800788e:	d12e      	bne.n	80078ee <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	e853 3f00 	ldrex	r3, [r3]
 80078a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f023 0310 	bic.w	r3, r3, #16
 80078aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	461a      	mov	r2, r3
 80078b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078b4:	61fb      	str	r3, [r7, #28]
 80078b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b8:	69b9      	ldr	r1, [r7, #24]
 80078ba:	69fa      	ldr	r2, [r7, #28]
 80078bc:	e841 2300 	strex	r3, r2, [r1]
 80078c0:	617b      	str	r3, [r7, #20]
   return(result);
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d1e6      	bne.n	8007896 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	f003 0310 	and.w	r3, r3, #16
 80078d2:	2b10      	cmp	r3, #16
 80078d4:	d103      	bne.n	80078de <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2210      	movs	r2, #16
 80078dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80078e4:	4619      	mov	r1, r3
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7ff f9b0 	bl	8006c4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078ec:	e00d      	b.n	800790a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7f9 fbd6 	bl	80010a0 <HAL_UART_RxCpltCallback>
}
 80078f4:	e009      	b.n	800790a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	8b1b      	ldrh	r3, [r3, #24]
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f042 0208 	orr.w	r2, r2, #8
 8007906:	b292      	uxth	r2, r2
 8007908:	831a      	strh	r2, [r3, #24]
}
 800790a:	bf00      	nop
 800790c:	3758      	adds	r7, #88	; 0x58
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b096      	sub	sp, #88	; 0x58
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007920:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007928:	2b22      	cmp	r3, #34	; 0x22
 800792a:	f040 8094 	bne.w	8007a56 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007934:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800793c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800793e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007942:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007946:	4013      	ands	r3, r2
 8007948:	b29a      	uxth	r2, r3
 800794a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800794c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007952:	1c9a      	adds	r2, r3, #2
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800795e:	b29b      	uxth	r3, r3
 8007960:	3b01      	subs	r3, #1
 8007962:	b29a      	uxth	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007970:	b29b      	uxth	r3, r3
 8007972:	2b00      	cmp	r3, #0
 8007974:	d179      	bne.n	8007a6a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800797e:	e853 3f00 	ldrex	r3, [r3]
 8007982:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007986:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800798a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	461a      	mov	r2, r3
 8007992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007994:	643b      	str	r3, [r7, #64]	; 0x40
 8007996:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007998:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800799a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800799c:	e841 2300 	strex	r3, r2, [r1]
 80079a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d1e6      	bne.n	8007976 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	3308      	adds	r3, #8
 80079ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	e853 3f00 	ldrex	r3, [r3]
 80079b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	f023 0301 	bic.w	r3, r3, #1
 80079be:	64bb      	str	r3, [r7, #72]	; 0x48
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	3308      	adds	r3, #8
 80079c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079d0:	e841 2300 	strex	r3, r2, [r1]
 80079d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1e5      	bne.n	80079a8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2220      	movs	r2, #32
 80079e0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d12e      	bne.n	8007a4e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	e853 3f00 	ldrex	r3, [r3]
 8007a02:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	f023 0310 	bic.w	r3, r3, #16
 8007a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	461a      	mov	r2, r3
 8007a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a14:	61bb      	str	r3, [r7, #24]
 8007a16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a18:	6979      	ldr	r1, [r7, #20]
 8007a1a:	69ba      	ldr	r2, [r7, #24]
 8007a1c:	e841 2300 	strex	r3, r2, [r1]
 8007a20:	613b      	str	r3, [r7, #16]
   return(result);
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1e6      	bne.n	80079f6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	69db      	ldr	r3, [r3, #28]
 8007a2e:	f003 0310 	and.w	r3, r3, #16
 8007a32:	2b10      	cmp	r3, #16
 8007a34:	d103      	bne.n	8007a3e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2210      	movs	r2, #16
 8007a3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a44:	4619      	mov	r1, r3
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7ff f900 	bl	8006c4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a4c:	e00d      	b.n	8007a6a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f7f9 fb26 	bl	80010a0 <HAL_UART_RxCpltCallback>
}
 8007a54:	e009      	b.n	8007a6a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	8b1b      	ldrh	r3, [r3, #24]
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f042 0208 	orr.w	r2, r2, #8
 8007a66:	b292      	uxth	r2, r2
 8007a68:	831a      	strh	r2, [r3, #24]
}
 8007a6a:	bf00      	nop
 8007a6c:	3758      	adds	r7, #88	; 0x58
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b083      	sub	sp, #12
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a7a:	bf00      	nop
 8007a7c:	370c      	adds	r7, #12
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <atof>:
 8007a86:	2100      	movs	r1, #0
 8007a88:	f000 be84 	b.w	8008794 <strtod>

08007a8c <atoi>:
 8007a8c:	220a      	movs	r2, #10
 8007a8e:	2100      	movs	r1, #0
 8007a90:	f000 bf10 	b.w	80088b4 <strtol>

08007a94 <__errno>:
 8007a94:	4b01      	ldr	r3, [pc, #4]	; (8007a9c <__errno+0x8>)
 8007a96:	6818      	ldr	r0, [r3, #0]
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	2000000c 	.word	0x2000000c

08007aa0 <__libc_init_array>:
 8007aa0:	b570      	push	{r4, r5, r6, lr}
 8007aa2:	4d0d      	ldr	r5, [pc, #52]	; (8007ad8 <__libc_init_array+0x38>)
 8007aa4:	4c0d      	ldr	r4, [pc, #52]	; (8007adc <__libc_init_array+0x3c>)
 8007aa6:	1b64      	subs	r4, r4, r5
 8007aa8:	10a4      	asrs	r4, r4, #2
 8007aaa:	2600      	movs	r6, #0
 8007aac:	42a6      	cmp	r6, r4
 8007aae:	d109      	bne.n	8007ac4 <__libc_init_array+0x24>
 8007ab0:	4d0b      	ldr	r5, [pc, #44]	; (8007ae0 <__libc_init_array+0x40>)
 8007ab2:	4c0c      	ldr	r4, [pc, #48]	; (8007ae4 <__libc_init_array+0x44>)
 8007ab4:	f002 ff40 	bl	800a938 <_init>
 8007ab8:	1b64      	subs	r4, r4, r5
 8007aba:	10a4      	asrs	r4, r4, #2
 8007abc:	2600      	movs	r6, #0
 8007abe:	42a6      	cmp	r6, r4
 8007ac0:	d105      	bne.n	8007ace <__libc_init_array+0x2e>
 8007ac2:	bd70      	pop	{r4, r5, r6, pc}
 8007ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ac8:	4798      	blx	r3
 8007aca:	3601      	adds	r6, #1
 8007acc:	e7ee      	b.n	8007aac <__libc_init_array+0xc>
 8007ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad2:	4798      	blx	r3
 8007ad4:	3601      	adds	r6, #1
 8007ad6:	e7f2      	b.n	8007abe <__libc_init_array+0x1e>
 8007ad8:	0800adf4 	.word	0x0800adf4
 8007adc:	0800adf4 	.word	0x0800adf4
 8007ae0:	0800adf4 	.word	0x0800adf4
 8007ae4:	0800adf8 	.word	0x0800adf8

08007ae8 <memcpy>:
 8007ae8:	440a      	add	r2, r1
 8007aea:	4291      	cmp	r1, r2
 8007aec:	f100 33ff 	add.w	r3, r0, #4294967295
 8007af0:	d100      	bne.n	8007af4 <memcpy+0xc>
 8007af2:	4770      	bx	lr
 8007af4:	b510      	push	{r4, lr}
 8007af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007afa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007afe:	4291      	cmp	r1, r2
 8007b00:	d1f9      	bne.n	8007af6 <memcpy+0xe>
 8007b02:	bd10      	pop	{r4, pc}

08007b04 <memset>:
 8007b04:	4402      	add	r2, r0
 8007b06:	4603      	mov	r3, r0
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d100      	bne.n	8007b0e <memset+0xa>
 8007b0c:	4770      	bx	lr
 8007b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b12:	e7f9      	b.n	8007b08 <memset+0x4>

08007b14 <strpbrk>:
 8007b14:	b570      	push	{r4, r5, r6, lr}
 8007b16:	7803      	ldrb	r3, [r0, #0]
 8007b18:	b1a3      	cbz	r3, 8007b44 <strpbrk+0x30>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	460c      	mov	r4, r1
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f813 5b01 	ldrb.w	r5, [r3], #1
 8007b24:	b14d      	cbz	r5, 8007b3a <strpbrk+0x26>
 8007b26:	460a      	mov	r2, r1
 8007b28:	e001      	b.n	8007b2e <strpbrk+0x1a>
 8007b2a:	42ae      	cmp	r6, r5
 8007b2c:	d009      	beq.n	8007b42 <strpbrk+0x2e>
 8007b2e:	4614      	mov	r4, r2
 8007b30:	f812 6b01 	ldrb.w	r6, [r2], #1
 8007b34:	2e00      	cmp	r6, #0
 8007b36:	d1f8      	bne.n	8007b2a <strpbrk+0x16>
 8007b38:	e7f1      	b.n	8007b1e <strpbrk+0xa>
 8007b3a:	7823      	ldrb	r3, [r4, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	bf08      	it	eq
 8007b40:	2000      	moveq	r0, #0
 8007b42:	bd70      	pop	{r4, r5, r6, pc}
 8007b44:	4618      	mov	r0, r3
 8007b46:	e7fc      	b.n	8007b42 <strpbrk+0x2e>

08007b48 <sulp>:
 8007b48:	b570      	push	{r4, r5, r6, lr}
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	460d      	mov	r5, r1
 8007b4e:	ec45 4b10 	vmov	d0, r4, r5
 8007b52:	4616      	mov	r6, r2
 8007b54:	f001 fda6 	bl	80096a4 <__ulp>
 8007b58:	ec51 0b10 	vmov	r0, r1, d0
 8007b5c:	b17e      	cbz	r6, 8007b7e <sulp+0x36>
 8007b5e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007b62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	dd09      	ble.n	8007b7e <sulp+0x36>
 8007b6a:	051b      	lsls	r3, r3, #20
 8007b6c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007b70:	2400      	movs	r4, #0
 8007b72:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007b76:	4622      	mov	r2, r4
 8007b78:	462b      	mov	r3, r5
 8007b7a:	f7f8 fd4d 	bl	8000618 <__aeabi_dmul>
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}

08007b80 <_strtod_l>:
 8007b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b84:	b0a3      	sub	sp, #140	; 0x8c
 8007b86:	461f      	mov	r7, r3
 8007b88:	2300      	movs	r3, #0
 8007b8a:	931e      	str	r3, [sp, #120]	; 0x78
 8007b8c:	4ba4      	ldr	r3, [pc, #656]	; (8007e20 <_strtod_l+0x2a0>)
 8007b8e:	9219      	str	r2, [sp, #100]	; 0x64
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	9307      	str	r3, [sp, #28]
 8007b94:	4604      	mov	r4, r0
 8007b96:	4618      	mov	r0, r3
 8007b98:	4688      	mov	r8, r1
 8007b9a:	f7f8 fb23 	bl	80001e4 <strlen>
 8007b9e:	f04f 0a00 	mov.w	sl, #0
 8007ba2:	4605      	mov	r5, r0
 8007ba4:	f04f 0b00 	mov.w	fp, #0
 8007ba8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007bac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007bae:	781a      	ldrb	r2, [r3, #0]
 8007bb0:	2a2b      	cmp	r2, #43	; 0x2b
 8007bb2:	d04c      	beq.n	8007c4e <_strtod_l+0xce>
 8007bb4:	d839      	bhi.n	8007c2a <_strtod_l+0xaa>
 8007bb6:	2a0d      	cmp	r2, #13
 8007bb8:	d832      	bhi.n	8007c20 <_strtod_l+0xa0>
 8007bba:	2a08      	cmp	r2, #8
 8007bbc:	d832      	bhi.n	8007c24 <_strtod_l+0xa4>
 8007bbe:	2a00      	cmp	r2, #0
 8007bc0:	d03c      	beq.n	8007c3c <_strtod_l+0xbc>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	930e      	str	r3, [sp, #56]	; 0x38
 8007bc6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007bc8:	7833      	ldrb	r3, [r6, #0]
 8007bca:	2b30      	cmp	r3, #48	; 0x30
 8007bcc:	f040 80b4 	bne.w	8007d38 <_strtod_l+0x1b8>
 8007bd0:	7873      	ldrb	r3, [r6, #1]
 8007bd2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007bd6:	2b58      	cmp	r3, #88	; 0x58
 8007bd8:	d16c      	bne.n	8007cb4 <_strtod_l+0x134>
 8007bda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bdc:	9301      	str	r3, [sp, #4]
 8007bde:	ab1e      	add	r3, sp, #120	; 0x78
 8007be0:	9702      	str	r7, [sp, #8]
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	4a8f      	ldr	r2, [pc, #572]	; (8007e24 <_strtod_l+0x2a4>)
 8007be6:	ab1f      	add	r3, sp, #124	; 0x7c
 8007be8:	a91d      	add	r1, sp, #116	; 0x74
 8007bea:	4620      	mov	r0, r4
 8007bec:	f000 fed4 	bl	8008998 <__gethex>
 8007bf0:	f010 0707 	ands.w	r7, r0, #7
 8007bf4:	4605      	mov	r5, r0
 8007bf6:	d005      	beq.n	8007c04 <_strtod_l+0x84>
 8007bf8:	2f06      	cmp	r7, #6
 8007bfa:	d12a      	bne.n	8007c52 <_strtod_l+0xd2>
 8007bfc:	3601      	adds	r6, #1
 8007bfe:	2300      	movs	r3, #0
 8007c00:	961d      	str	r6, [sp, #116]	; 0x74
 8007c02:	930e      	str	r3, [sp, #56]	; 0x38
 8007c04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f040 8596 	bne.w	8008738 <_strtod_l+0xbb8>
 8007c0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c0e:	b1db      	cbz	r3, 8007c48 <_strtod_l+0xc8>
 8007c10:	4652      	mov	r2, sl
 8007c12:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007c16:	ec43 2b10 	vmov	d0, r2, r3
 8007c1a:	b023      	add	sp, #140	; 0x8c
 8007c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c20:	2a20      	cmp	r2, #32
 8007c22:	d1ce      	bne.n	8007bc2 <_strtod_l+0x42>
 8007c24:	3301      	adds	r3, #1
 8007c26:	931d      	str	r3, [sp, #116]	; 0x74
 8007c28:	e7c0      	b.n	8007bac <_strtod_l+0x2c>
 8007c2a:	2a2d      	cmp	r2, #45	; 0x2d
 8007c2c:	d1c9      	bne.n	8007bc2 <_strtod_l+0x42>
 8007c2e:	2201      	movs	r2, #1
 8007c30:	920e      	str	r2, [sp, #56]	; 0x38
 8007c32:	1c5a      	adds	r2, r3, #1
 8007c34:	921d      	str	r2, [sp, #116]	; 0x74
 8007c36:	785b      	ldrb	r3, [r3, #1]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1c4      	bne.n	8007bc6 <_strtod_l+0x46>
 8007c3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c3e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f040 8576 	bne.w	8008734 <_strtod_l+0xbb4>
 8007c48:	4652      	mov	r2, sl
 8007c4a:	465b      	mov	r3, fp
 8007c4c:	e7e3      	b.n	8007c16 <_strtod_l+0x96>
 8007c4e:	2200      	movs	r2, #0
 8007c50:	e7ee      	b.n	8007c30 <_strtod_l+0xb0>
 8007c52:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007c54:	b13a      	cbz	r2, 8007c66 <_strtod_l+0xe6>
 8007c56:	2135      	movs	r1, #53	; 0x35
 8007c58:	a820      	add	r0, sp, #128	; 0x80
 8007c5a:	f001 fe2e 	bl	80098ba <__copybits>
 8007c5e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007c60:	4620      	mov	r0, r4
 8007c62:	f001 f9f3 	bl	800904c <_Bfree>
 8007c66:	3f01      	subs	r7, #1
 8007c68:	2f05      	cmp	r7, #5
 8007c6a:	d807      	bhi.n	8007c7c <_strtod_l+0xfc>
 8007c6c:	e8df f007 	tbb	[pc, r7]
 8007c70:	1d180b0e 	.word	0x1d180b0e
 8007c74:	030e      	.short	0x030e
 8007c76:	f04f 0b00 	mov.w	fp, #0
 8007c7a:	46da      	mov	sl, fp
 8007c7c:	0728      	lsls	r0, r5, #28
 8007c7e:	d5c1      	bpl.n	8007c04 <_strtod_l+0x84>
 8007c80:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007c84:	e7be      	b.n	8007c04 <_strtod_l+0x84>
 8007c86:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8007c8a:	e7f7      	b.n	8007c7c <_strtod_l+0xfc>
 8007c8c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8007c90:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007c92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007c96:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007c9a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007c9e:	e7ed      	b.n	8007c7c <_strtod_l+0xfc>
 8007ca0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8007e28 <_strtod_l+0x2a8>
 8007ca4:	f04f 0a00 	mov.w	sl, #0
 8007ca8:	e7e8      	b.n	8007c7c <_strtod_l+0xfc>
 8007caa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007cae:	f04f 3aff 	mov.w	sl, #4294967295
 8007cb2:	e7e3      	b.n	8007c7c <_strtod_l+0xfc>
 8007cb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007cb6:	1c5a      	adds	r2, r3, #1
 8007cb8:	921d      	str	r2, [sp, #116]	; 0x74
 8007cba:	785b      	ldrb	r3, [r3, #1]
 8007cbc:	2b30      	cmp	r3, #48	; 0x30
 8007cbe:	d0f9      	beq.n	8007cb4 <_strtod_l+0x134>
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d09f      	beq.n	8007c04 <_strtod_l+0x84>
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	f04f 0900 	mov.w	r9, #0
 8007cca:	9304      	str	r3, [sp, #16]
 8007ccc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007cce:	930a      	str	r3, [sp, #40]	; 0x28
 8007cd0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007cd4:	464f      	mov	r7, r9
 8007cd6:	220a      	movs	r2, #10
 8007cd8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007cda:	7806      	ldrb	r6, [r0, #0]
 8007cdc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007ce0:	b2d9      	uxtb	r1, r3
 8007ce2:	2909      	cmp	r1, #9
 8007ce4:	d92a      	bls.n	8007d3c <_strtod_l+0x1bc>
 8007ce6:	9907      	ldr	r1, [sp, #28]
 8007ce8:	462a      	mov	r2, r5
 8007cea:	f001 fead 	bl	8009a48 <strncmp>
 8007cee:	b398      	cbz	r0, 8007d58 <_strtod_l+0x1d8>
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	4633      	mov	r3, r6
 8007cf4:	463d      	mov	r5, r7
 8007cf6:	9007      	str	r0, [sp, #28]
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	2b65      	cmp	r3, #101	; 0x65
 8007cfc:	d001      	beq.n	8007d02 <_strtod_l+0x182>
 8007cfe:	2b45      	cmp	r3, #69	; 0x45
 8007d00:	d118      	bne.n	8007d34 <_strtod_l+0x1b4>
 8007d02:	b91d      	cbnz	r5, 8007d0c <_strtod_l+0x18c>
 8007d04:	9b04      	ldr	r3, [sp, #16]
 8007d06:	4303      	orrs	r3, r0
 8007d08:	d098      	beq.n	8007c3c <_strtod_l+0xbc>
 8007d0a:	2500      	movs	r5, #0
 8007d0c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8007d10:	f108 0301 	add.w	r3, r8, #1
 8007d14:	931d      	str	r3, [sp, #116]	; 0x74
 8007d16:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007d1a:	2b2b      	cmp	r3, #43	; 0x2b
 8007d1c:	d075      	beq.n	8007e0a <_strtod_l+0x28a>
 8007d1e:	2b2d      	cmp	r3, #45	; 0x2d
 8007d20:	d07b      	beq.n	8007e1a <_strtod_l+0x29a>
 8007d22:	f04f 0c00 	mov.w	ip, #0
 8007d26:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007d2a:	2909      	cmp	r1, #9
 8007d2c:	f240 8082 	bls.w	8007e34 <_strtod_l+0x2b4>
 8007d30:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007d34:	2600      	movs	r6, #0
 8007d36:	e09d      	b.n	8007e74 <_strtod_l+0x2f4>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	e7c4      	b.n	8007cc6 <_strtod_l+0x146>
 8007d3c:	2f08      	cmp	r7, #8
 8007d3e:	bfd8      	it	le
 8007d40:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007d42:	f100 0001 	add.w	r0, r0, #1
 8007d46:	bfda      	itte	le
 8007d48:	fb02 3301 	mlale	r3, r2, r1, r3
 8007d4c:	9309      	strle	r3, [sp, #36]	; 0x24
 8007d4e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007d52:	3701      	adds	r7, #1
 8007d54:	901d      	str	r0, [sp, #116]	; 0x74
 8007d56:	e7bf      	b.n	8007cd8 <_strtod_l+0x158>
 8007d58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d5a:	195a      	adds	r2, r3, r5
 8007d5c:	921d      	str	r2, [sp, #116]	; 0x74
 8007d5e:	5d5b      	ldrb	r3, [r3, r5]
 8007d60:	2f00      	cmp	r7, #0
 8007d62:	d037      	beq.n	8007dd4 <_strtod_l+0x254>
 8007d64:	9007      	str	r0, [sp, #28]
 8007d66:	463d      	mov	r5, r7
 8007d68:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007d6c:	2a09      	cmp	r2, #9
 8007d6e:	d912      	bls.n	8007d96 <_strtod_l+0x216>
 8007d70:	2201      	movs	r2, #1
 8007d72:	e7c2      	b.n	8007cfa <_strtod_l+0x17a>
 8007d74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d76:	1c5a      	adds	r2, r3, #1
 8007d78:	921d      	str	r2, [sp, #116]	; 0x74
 8007d7a:	785b      	ldrb	r3, [r3, #1]
 8007d7c:	3001      	adds	r0, #1
 8007d7e:	2b30      	cmp	r3, #48	; 0x30
 8007d80:	d0f8      	beq.n	8007d74 <_strtod_l+0x1f4>
 8007d82:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007d86:	2a08      	cmp	r2, #8
 8007d88:	f200 84db 	bhi.w	8008742 <_strtod_l+0xbc2>
 8007d8c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007d8e:	9007      	str	r0, [sp, #28]
 8007d90:	2000      	movs	r0, #0
 8007d92:	920a      	str	r2, [sp, #40]	; 0x28
 8007d94:	4605      	mov	r5, r0
 8007d96:	3b30      	subs	r3, #48	; 0x30
 8007d98:	f100 0201 	add.w	r2, r0, #1
 8007d9c:	d014      	beq.n	8007dc8 <_strtod_l+0x248>
 8007d9e:	9907      	ldr	r1, [sp, #28]
 8007da0:	4411      	add	r1, r2
 8007da2:	9107      	str	r1, [sp, #28]
 8007da4:	462a      	mov	r2, r5
 8007da6:	eb00 0e05 	add.w	lr, r0, r5
 8007daa:	210a      	movs	r1, #10
 8007dac:	4572      	cmp	r2, lr
 8007dae:	d113      	bne.n	8007dd8 <_strtod_l+0x258>
 8007db0:	182a      	adds	r2, r5, r0
 8007db2:	2a08      	cmp	r2, #8
 8007db4:	f105 0501 	add.w	r5, r5, #1
 8007db8:	4405      	add	r5, r0
 8007dba:	dc1c      	bgt.n	8007df6 <_strtod_l+0x276>
 8007dbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007dbe:	220a      	movs	r2, #10
 8007dc0:	fb02 3301 	mla	r3, r2, r1, r3
 8007dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007dca:	1c59      	adds	r1, r3, #1
 8007dcc:	911d      	str	r1, [sp, #116]	; 0x74
 8007dce:	785b      	ldrb	r3, [r3, #1]
 8007dd0:	4610      	mov	r0, r2
 8007dd2:	e7c9      	b.n	8007d68 <_strtod_l+0x1e8>
 8007dd4:	4638      	mov	r0, r7
 8007dd6:	e7d2      	b.n	8007d7e <_strtod_l+0x1fe>
 8007dd8:	2a08      	cmp	r2, #8
 8007dda:	dc04      	bgt.n	8007de6 <_strtod_l+0x266>
 8007ddc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007dde:	434e      	muls	r6, r1
 8007de0:	9609      	str	r6, [sp, #36]	; 0x24
 8007de2:	3201      	adds	r2, #1
 8007de4:	e7e2      	b.n	8007dac <_strtod_l+0x22c>
 8007de6:	f102 0c01 	add.w	ip, r2, #1
 8007dea:	f1bc 0f10 	cmp.w	ip, #16
 8007dee:	bfd8      	it	le
 8007df0:	fb01 f909 	mulle.w	r9, r1, r9
 8007df4:	e7f5      	b.n	8007de2 <_strtod_l+0x262>
 8007df6:	2d10      	cmp	r5, #16
 8007df8:	bfdc      	itt	le
 8007dfa:	220a      	movle	r2, #10
 8007dfc:	fb02 3909 	mlale	r9, r2, r9, r3
 8007e00:	e7e1      	b.n	8007dc6 <_strtod_l+0x246>
 8007e02:	2300      	movs	r3, #0
 8007e04:	9307      	str	r3, [sp, #28]
 8007e06:	2201      	movs	r2, #1
 8007e08:	e77c      	b.n	8007d04 <_strtod_l+0x184>
 8007e0a:	f04f 0c00 	mov.w	ip, #0
 8007e0e:	f108 0302 	add.w	r3, r8, #2
 8007e12:	931d      	str	r3, [sp, #116]	; 0x74
 8007e14:	f898 3002 	ldrb.w	r3, [r8, #2]
 8007e18:	e785      	b.n	8007d26 <_strtod_l+0x1a6>
 8007e1a:	f04f 0c01 	mov.w	ip, #1
 8007e1e:	e7f6      	b.n	8007e0e <_strtod_l+0x28e>
 8007e20:	0800ab94 	.word	0x0800ab94
 8007e24:	0800a9c4 	.word	0x0800a9c4
 8007e28:	7ff00000 	.word	0x7ff00000
 8007e2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e2e:	1c59      	adds	r1, r3, #1
 8007e30:	911d      	str	r1, [sp, #116]	; 0x74
 8007e32:	785b      	ldrb	r3, [r3, #1]
 8007e34:	2b30      	cmp	r3, #48	; 0x30
 8007e36:	d0f9      	beq.n	8007e2c <_strtod_l+0x2ac>
 8007e38:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007e3c:	2908      	cmp	r1, #8
 8007e3e:	f63f af79 	bhi.w	8007d34 <_strtod_l+0x1b4>
 8007e42:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007e46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e48:	9308      	str	r3, [sp, #32]
 8007e4a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e4c:	1c59      	adds	r1, r3, #1
 8007e4e:	911d      	str	r1, [sp, #116]	; 0x74
 8007e50:	785b      	ldrb	r3, [r3, #1]
 8007e52:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8007e56:	2e09      	cmp	r6, #9
 8007e58:	d937      	bls.n	8007eca <_strtod_l+0x34a>
 8007e5a:	9e08      	ldr	r6, [sp, #32]
 8007e5c:	1b89      	subs	r1, r1, r6
 8007e5e:	2908      	cmp	r1, #8
 8007e60:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007e64:	dc02      	bgt.n	8007e6c <_strtod_l+0x2ec>
 8007e66:	4576      	cmp	r6, lr
 8007e68:	bfa8      	it	ge
 8007e6a:	4676      	movge	r6, lr
 8007e6c:	f1bc 0f00 	cmp.w	ip, #0
 8007e70:	d000      	beq.n	8007e74 <_strtod_l+0x2f4>
 8007e72:	4276      	negs	r6, r6
 8007e74:	2d00      	cmp	r5, #0
 8007e76:	d14f      	bne.n	8007f18 <_strtod_l+0x398>
 8007e78:	9904      	ldr	r1, [sp, #16]
 8007e7a:	4301      	orrs	r1, r0
 8007e7c:	f47f aec2 	bne.w	8007c04 <_strtod_l+0x84>
 8007e80:	2a00      	cmp	r2, #0
 8007e82:	f47f aedb 	bne.w	8007c3c <_strtod_l+0xbc>
 8007e86:	2b69      	cmp	r3, #105	; 0x69
 8007e88:	d027      	beq.n	8007eda <_strtod_l+0x35a>
 8007e8a:	dc24      	bgt.n	8007ed6 <_strtod_l+0x356>
 8007e8c:	2b49      	cmp	r3, #73	; 0x49
 8007e8e:	d024      	beq.n	8007eda <_strtod_l+0x35a>
 8007e90:	2b4e      	cmp	r3, #78	; 0x4e
 8007e92:	f47f aed3 	bne.w	8007c3c <_strtod_l+0xbc>
 8007e96:	499e      	ldr	r1, [pc, #632]	; (8008110 <_strtod_l+0x590>)
 8007e98:	a81d      	add	r0, sp, #116	; 0x74
 8007e9a:	f000 ffd5 	bl	8008e48 <__match>
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	f43f aecc 	beq.w	8007c3c <_strtod_l+0xbc>
 8007ea4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	2b28      	cmp	r3, #40	; 0x28
 8007eaa:	d12d      	bne.n	8007f08 <_strtod_l+0x388>
 8007eac:	4999      	ldr	r1, [pc, #612]	; (8008114 <_strtod_l+0x594>)
 8007eae:	aa20      	add	r2, sp, #128	; 0x80
 8007eb0:	a81d      	add	r0, sp, #116	; 0x74
 8007eb2:	f000 ffdd 	bl	8008e70 <__hexnan>
 8007eb6:	2805      	cmp	r0, #5
 8007eb8:	d126      	bne.n	8007f08 <_strtod_l+0x388>
 8007eba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ebc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8007ec0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007ec4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007ec8:	e69c      	b.n	8007c04 <_strtod_l+0x84>
 8007eca:	210a      	movs	r1, #10
 8007ecc:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007ed0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007ed4:	e7b9      	b.n	8007e4a <_strtod_l+0x2ca>
 8007ed6:	2b6e      	cmp	r3, #110	; 0x6e
 8007ed8:	e7db      	b.n	8007e92 <_strtod_l+0x312>
 8007eda:	498f      	ldr	r1, [pc, #572]	; (8008118 <_strtod_l+0x598>)
 8007edc:	a81d      	add	r0, sp, #116	; 0x74
 8007ede:	f000 ffb3 	bl	8008e48 <__match>
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	f43f aeaa 	beq.w	8007c3c <_strtod_l+0xbc>
 8007ee8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007eea:	498c      	ldr	r1, [pc, #560]	; (800811c <_strtod_l+0x59c>)
 8007eec:	3b01      	subs	r3, #1
 8007eee:	a81d      	add	r0, sp, #116	; 0x74
 8007ef0:	931d      	str	r3, [sp, #116]	; 0x74
 8007ef2:	f000 ffa9 	bl	8008e48 <__match>
 8007ef6:	b910      	cbnz	r0, 8007efe <_strtod_l+0x37e>
 8007ef8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007efa:	3301      	adds	r3, #1
 8007efc:	931d      	str	r3, [sp, #116]	; 0x74
 8007efe:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800812c <_strtod_l+0x5ac>
 8007f02:	f04f 0a00 	mov.w	sl, #0
 8007f06:	e67d      	b.n	8007c04 <_strtod_l+0x84>
 8007f08:	4885      	ldr	r0, [pc, #532]	; (8008120 <_strtod_l+0x5a0>)
 8007f0a:	f001 fd85 	bl	8009a18 <nan>
 8007f0e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007f12:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007f16:	e675      	b.n	8007c04 <_strtod_l+0x84>
 8007f18:	9b07      	ldr	r3, [sp, #28]
 8007f1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f1c:	1af3      	subs	r3, r6, r3
 8007f1e:	2f00      	cmp	r7, #0
 8007f20:	bf08      	it	eq
 8007f22:	462f      	moveq	r7, r5
 8007f24:	2d10      	cmp	r5, #16
 8007f26:	9308      	str	r3, [sp, #32]
 8007f28:	46a8      	mov	r8, r5
 8007f2a:	bfa8      	it	ge
 8007f2c:	f04f 0810 	movge.w	r8, #16
 8007f30:	f7f8 faf8 	bl	8000524 <__aeabi_ui2d>
 8007f34:	2d09      	cmp	r5, #9
 8007f36:	4682      	mov	sl, r0
 8007f38:	468b      	mov	fp, r1
 8007f3a:	dd13      	ble.n	8007f64 <_strtod_l+0x3e4>
 8007f3c:	4b79      	ldr	r3, [pc, #484]	; (8008124 <_strtod_l+0x5a4>)
 8007f3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007f42:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007f46:	f7f8 fb67 	bl	8000618 <__aeabi_dmul>
 8007f4a:	4682      	mov	sl, r0
 8007f4c:	4648      	mov	r0, r9
 8007f4e:	468b      	mov	fp, r1
 8007f50:	f7f8 fae8 	bl	8000524 <__aeabi_ui2d>
 8007f54:	4602      	mov	r2, r0
 8007f56:	460b      	mov	r3, r1
 8007f58:	4650      	mov	r0, sl
 8007f5a:	4659      	mov	r1, fp
 8007f5c:	f7f8 f9a6 	bl	80002ac <__adddf3>
 8007f60:	4682      	mov	sl, r0
 8007f62:	468b      	mov	fp, r1
 8007f64:	2d0f      	cmp	r5, #15
 8007f66:	dc38      	bgt.n	8007fda <_strtod_l+0x45a>
 8007f68:	9b08      	ldr	r3, [sp, #32]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f43f ae4a 	beq.w	8007c04 <_strtod_l+0x84>
 8007f70:	dd24      	ble.n	8007fbc <_strtod_l+0x43c>
 8007f72:	2b16      	cmp	r3, #22
 8007f74:	dc0b      	bgt.n	8007f8e <_strtod_l+0x40e>
 8007f76:	4d6b      	ldr	r5, [pc, #428]	; (8008124 <_strtod_l+0x5a4>)
 8007f78:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8007f7c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007f80:	4652      	mov	r2, sl
 8007f82:	465b      	mov	r3, fp
 8007f84:	f7f8 fb48 	bl	8000618 <__aeabi_dmul>
 8007f88:	4682      	mov	sl, r0
 8007f8a:	468b      	mov	fp, r1
 8007f8c:	e63a      	b.n	8007c04 <_strtod_l+0x84>
 8007f8e:	9a08      	ldr	r2, [sp, #32]
 8007f90:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007f94:	4293      	cmp	r3, r2
 8007f96:	db20      	blt.n	8007fda <_strtod_l+0x45a>
 8007f98:	4c62      	ldr	r4, [pc, #392]	; (8008124 <_strtod_l+0x5a4>)
 8007f9a:	f1c5 050f 	rsb	r5, r5, #15
 8007f9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007fa2:	4652      	mov	r2, sl
 8007fa4:	465b      	mov	r3, fp
 8007fa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007faa:	f7f8 fb35 	bl	8000618 <__aeabi_dmul>
 8007fae:	9b08      	ldr	r3, [sp, #32]
 8007fb0:	1b5d      	subs	r5, r3, r5
 8007fb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007fb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007fba:	e7e3      	b.n	8007f84 <_strtod_l+0x404>
 8007fbc:	9b08      	ldr	r3, [sp, #32]
 8007fbe:	3316      	adds	r3, #22
 8007fc0:	db0b      	blt.n	8007fda <_strtod_l+0x45a>
 8007fc2:	9b07      	ldr	r3, [sp, #28]
 8007fc4:	4a57      	ldr	r2, [pc, #348]	; (8008124 <_strtod_l+0x5a4>)
 8007fc6:	1b9e      	subs	r6, r3, r6
 8007fc8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007fcc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007fd0:	4650      	mov	r0, sl
 8007fd2:	4659      	mov	r1, fp
 8007fd4:	f7f8 fc4a 	bl	800086c <__aeabi_ddiv>
 8007fd8:	e7d6      	b.n	8007f88 <_strtod_l+0x408>
 8007fda:	9b08      	ldr	r3, [sp, #32]
 8007fdc:	eba5 0808 	sub.w	r8, r5, r8
 8007fe0:	4498      	add	r8, r3
 8007fe2:	f1b8 0f00 	cmp.w	r8, #0
 8007fe6:	dd71      	ble.n	80080cc <_strtod_l+0x54c>
 8007fe8:	f018 030f 	ands.w	r3, r8, #15
 8007fec:	d00a      	beq.n	8008004 <_strtod_l+0x484>
 8007fee:	494d      	ldr	r1, [pc, #308]	; (8008124 <_strtod_l+0x5a4>)
 8007ff0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ff4:	4652      	mov	r2, sl
 8007ff6:	465b      	mov	r3, fp
 8007ff8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ffc:	f7f8 fb0c 	bl	8000618 <__aeabi_dmul>
 8008000:	4682      	mov	sl, r0
 8008002:	468b      	mov	fp, r1
 8008004:	f038 080f 	bics.w	r8, r8, #15
 8008008:	d04d      	beq.n	80080a6 <_strtod_l+0x526>
 800800a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800800e:	dd22      	ble.n	8008056 <_strtod_l+0x4d6>
 8008010:	2500      	movs	r5, #0
 8008012:	462e      	mov	r6, r5
 8008014:	9509      	str	r5, [sp, #36]	; 0x24
 8008016:	9507      	str	r5, [sp, #28]
 8008018:	2322      	movs	r3, #34	; 0x22
 800801a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800812c <_strtod_l+0x5ac>
 800801e:	6023      	str	r3, [r4, #0]
 8008020:	f04f 0a00 	mov.w	sl, #0
 8008024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008026:	2b00      	cmp	r3, #0
 8008028:	f43f adec 	beq.w	8007c04 <_strtod_l+0x84>
 800802c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800802e:	4620      	mov	r0, r4
 8008030:	f001 f80c 	bl	800904c <_Bfree>
 8008034:	9907      	ldr	r1, [sp, #28]
 8008036:	4620      	mov	r0, r4
 8008038:	f001 f808 	bl	800904c <_Bfree>
 800803c:	4631      	mov	r1, r6
 800803e:	4620      	mov	r0, r4
 8008040:	f001 f804 	bl	800904c <_Bfree>
 8008044:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008046:	4620      	mov	r0, r4
 8008048:	f001 f800 	bl	800904c <_Bfree>
 800804c:	4629      	mov	r1, r5
 800804e:	4620      	mov	r0, r4
 8008050:	f000 fffc 	bl	800904c <_Bfree>
 8008054:	e5d6      	b.n	8007c04 <_strtod_l+0x84>
 8008056:	2300      	movs	r3, #0
 8008058:	ea4f 1828 	mov.w	r8, r8, asr #4
 800805c:	4650      	mov	r0, sl
 800805e:	4659      	mov	r1, fp
 8008060:	4699      	mov	r9, r3
 8008062:	f1b8 0f01 	cmp.w	r8, #1
 8008066:	dc21      	bgt.n	80080ac <_strtod_l+0x52c>
 8008068:	b10b      	cbz	r3, 800806e <_strtod_l+0x4ee>
 800806a:	4682      	mov	sl, r0
 800806c:	468b      	mov	fp, r1
 800806e:	4b2e      	ldr	r3, [pc, #184]	; (8008128 <_strtod_l+0x5a8>)
 8008070:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008074:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008078:	4652      	mov	r2, sl
 800807a:	465b      	mov	r3, fp
 800807c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008080:	f7f8 faca 	bl	8000618 <__aeabi_dmul>
 8008084:	4b29      	ldr	r3, [pc, #164]	; (800812c <_strtod_l+0x5ac>)
 8008086:	460a      	mov	r2, r1
 8008088:	400b      	ands	r3, r1
 800808a:	4929      	ldr	r1, [pc, #164]	; (8008130 <_strtod_l+0x5b0>)
 800808c:	428b      	cmp	r3, r1
 800808e:	4682      	mov	sl, r0
 8008090:	d8be      	bhi.n	8008010 <_strtod_l+0x490>
 8008092:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008096:	428b      	cmp	r3, r1
 8008098:	bf86      	itte	hi
 800809a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008134 <_strtod_l+0x5b4>
 800809e:	f04f 3aff 	movhi.w	sl, #4294967295
 80080a2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80080a6:	2300      	movs	r3, #0
 80080a8:	9304      	str	r3, [sp, #16]
 80080aa:	e081      	b.n	80081b0 <_strtod_l+0x630>
 80080ac:	f018 0f01 	tst.w	r8, #1
 80080b0:	d007      	beq.n	80080c2 <_strtod_l+0x542>
 80080b2:	4b1d      	ldr	r3, [pc, #116]	; (8008128 <_strtod_l+0x5a8>)
 80080b4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80080b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080bc:	f7f8 faac 	bl	8000618 <__aeabi_dmul>
 80080c0:	2301      	movs	r3, #1
 80080c2:	f109 0901 	add.w	r9, r9, #1
 80080c6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80080ca:	e7ca      	b.n	8008062 <_strtod_l+0x4e2>
 80080cc:	d0eb      	beq.n	80080a6 <_strtod_l+0x526>
 80080ce:	f1c8 0800 	rsb	r8, r8, #0
 80080d2:	f018 020f 	ands.w	r2, r8, #15
 80080d6:	d00a      	beq.n	80080ee <_strtod_l+0x56e>
 80080d8:	4b12      	ldr	r3, [pc, #72]	; (8008124 <_strtod_l+0x5a4>)
 80080da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080de:	4650      	mov	r0, sl
 80080e0:	4659      	mov	r1, fp
 80080e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e6:	f7f8 fbc1 	bl	800086c <__aeabi_ddiv>
 80080ea:	4682      	mov	sl, r0
 80080ec:	468b      	mov	fp, r1
 80080ee:	ea5f 1828 	movs.w	r8, r8, asr #4
 80080f2:	d0d8      	beq.n	80080a6 <_strtod_l+0x526>
 80080f4:	f1b8 0f1f 	cmp.w	r8, #31
 80080f8:	dd1e      	ble.n	8008138 <_strtod_l+0x5b8>
 80080fa:	2500      	movs	r5, #0
 80080fc:	462e      	mov	r6, r5
 80080fe:	9509      	str	r5, [sp, #36]	; 0x24
 8008100:	9507      	str	r5, [sp, #28]
 8008102:	2322      	movs	r3, #34	; 0x22
 8008104:	f04f 0a00 	mov.w	sl, #0
 8008108:	f04f 0b00 	mov.w	fp, #0
 800810c:	6023      	str	r3, [r4, #0]
 800810e:	e789      	b.n	8008024 <_strtod_l+0x4a4>
 8008110:	0800a9c1 	.word	0x0800a9c1
 8008114:	0800a9d8 	.word	0x0800a9d8
 8008118:	0800a9b8 	.word	0x0800a9b8
 800811c:	0800a9bb 	.word	0x0800a9bb
 8008120:	0800ad57 	.word	0x0800ad57
 8008124:	0800ac48 	.word	0x0800ac48
 8008128:	0800ac20 	.word	0x0800ac20
 800812c:	7ff00000 	.word	0x7ff00000
 8008130:	7ca00000 	.word	0x7ca00000
 8008134:	7fefffff 	.word	0x7fefffff
 8008138:	f018 0310 	ands.w	r3, r8, #16
 800813c:	bf18      	it	ne
 800813e:	236a      	movne	r3, #106	; 0x6a
 8008140:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80084f8 <_strtod_l+0x978>
 8008144:	9304      	str	r3, [sp, #16]
 8008146:	4650      	mov	r0, sl
 8008148:	4659      	mov	r1, fp
 800814a:	2300      	movs	r3, #0
 800814c:	f018 0f01 	tst.w	r8, #1
 8008150:	d004      	beq.n	800815c <_strtod_l+0x5dc>
 8008152:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008156:	f7f8 fa5f 	bl	8000618 <__aeabi_dmul>
 800815a:	2301      	movs	r3, #1
 800815c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008160:	f109 0908 	add.w	r9, r9, #8
 8008164:	d1f2      	bne.n	800814c <_strtod_l+0x5cc>
 8008166:	b10b      	cbz	r3, 800816c <_strtod_l+0x5ec>
 8008168:	4682      	mov	sl, r0
 800816a:	468b      	mov	fp, r1
 800816c:	9b04      	ldr	r3, [sp, #16]
 800816e:	b1bb      	cbz	r3, 80081a0 <_strtod_l+0x620>
 8008170:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008174:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008178:	2b00      	cmp	r3, #0
 800817a:	4659      	mov	r1, fp
 800817c:	dd10      	ble.n	80081a0 <_strtod_l+0x620>
 800817e:	2b1f      	cmp	r3, #31
 8008180:	f340 8128 	ble.w	80083d4 <_strtod_l+0x854>
 8008184:	2b34      	cmp	r3, #52	; 0x34
 8008186:	bfde      	ittt	le
 8008188:	3b20      	suble	r3, #32
 800818a:	f04f 32ff 	movle.w	r2, #4294967295
 800818e:	fa02 f303 	lslle.w	r3, r2, r3
 8008192:	f04f 0a00 	mov.w	sl, #0
 8008196:	bfcc      	ite	gt
 8008198:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800819c:	ea03 0b01 	andle.w	fp, r3, r1
 80081a0:	2200      	movs	r2, #0
 80081a2:	2300      	movs	r3, #0
 80081a4:	4650      	mov	r0, sl
 80081a6:	4659      	mov	r1, fp
 80081a8:	f7f8 fc9e 	bl	8000ae8 <__aeabi_dcmpeq>
 80081ac:	2800      	cmp	r0, #0
 80081ae:	d1a4      	bne.n	80080fa <_strtod_l+0x57a>
 80081b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80081b6:	462b      	mov	r3, r5
 80081b8:	463a      	mov	r2, r7
 80081ba:	4620      	mov	r0, r4
 80081bc:	f000 ffb2 	bl	8009124 <__s2b>
 80081c0:	9009      	str	r0, [sp, #36]	; 0x24
 80081c2:	2800      	cmp	r0, #0
 80081c4:	f43f af24 	beq.w	8008010 <_strtod_l+0x490>
 80081c8:	9b07      	ldr	r3, [sp, #28]
 80081ca:	1b9e      	subs	r6, r3, r6
 80081cc:	9b08      	ldr	r3, [sp, #32]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	bfb4      	ite	lt
 80081d2:	4633      	movlt	r3, r6
 80081d4:	2300      	movge	r3, #0
 80081d6:	9310      	str	r3, [sp, #64]	; 0x40
 80081d8:	9b08      	ldr	r3, [sp, #32]
 80081da:	2500      	movs	r5, #0
 80081dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80081e0:	9318      	str	r3, [sp, #96]	; 0x60
 80081e2:	462e      	mov	r6, r5
 80081e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081e6:	4620      	mov	r0, r4
 80081e8:	6859      	ldr	r1, [r3, #4]
 80081ea:	f000 feef 	bl	8008fcc <_Balloc>
 80081ee:	9007      	str	r0, [sp, #28]
 80081f0:	2800      	cmp	r0, #0
 80081f2:	f43f af11 	beq.w	8008018 <_strtod_l+0x498>
 80081f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081f8:	691a      	ldr	r2, [r3, #16]
 80081fa:	3202      	adds	r2, #2
 80081fc:	f103 010c 	add.w	r1, r3, #12
 8008200:	0092      	lsls	r2, r2, #2
 8008202:	300c      	adds	r0, #12
 8008204:	f7ff fc70 	bl	8007ae8 <memcpy>
 8008208:	ec4b ab10 	vmov	d0, sl, fp
 800820c:	aa20      	add	r2, sp, #128	; 0x80
 800820e:	a91f      	add	r1, sp, #124	; 0x7c
 8008210:	4620      	mov	r0, r4
 8008212:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008216:	f001 fac1 	bl	800979c <__d2b>
 800821a:	901e      	str	r0, [sp, #120]	; 0x78
 800821c:	2800      	cmp	r0, #0
 800821e:	f43f aefb 	beq.w	8008018 <_strtod_l+0x498>
 8008222:	2101      	movs	r1, #1
 8008224:	4620      	mov	r0, r4
 8008226:	f001 f817 	bl	8009258 <__i2b>
 800822a:	4606      	mov	r6, r0
 800822c:	2800      	cmp	r0, #0
 800822e:	f43f aef3 	beq.w	8008018 <_strtod_l+0x498>
 8008232:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008234:	9904      	ldr	r1, [sp, #16]
 8008236:	2b00      	cmp	r3, #0
 8008238:	bfab      	itete	ge
 800823a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800823c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800823e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8008240:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8008244:	bfac      	ite	ge
 8008246:	eb03 0902 	addge.w	r9, r3, r2
 800824a:	1ad7      	sublt	r7, r2, r3
 800824c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800824e:	eba3 0801 	sub.w	r8, r3, r1
 8008252:	4490      	add	r8, r2
 8008254:	4ba3      	ldr	r3, [pc, #652]	; (80084e4 <_strtod_l+0x964>)
 8008256:	f108 38ff 	add.w	r8, r8, #4294967295
 800825a:	4598      	cmp	r8, r3
 800825c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008260:	f280 80cc 	bge.w	80083fc <_strtod_l+0x87c>
 8008264:	eba3 0308 	sub.w	r3, r3, r8
 8008268:	2b1f      	cmp	r3, #31
 800826a:	eba2 0203 	sub.w	r2, r2, r3
 800826e:	f04f 0101 	mov.w	r1, #1
 8008272:	f300 80b6 	bgt.w	80083e2 <_strtod_l+0x862>
 8008276:	fa01 f303 	lsl.w	r3, r1, r3
 800827a:	9311      	str	r3, [sp, #68]	; 0x44
 800827c:	2300      	movs	r3, #0
 800827e:	930c      	str	r3, [sp, #48]	; 0x30
 8008280:	eb09 0802 	add.w	r8, r9, r2
 8008284:	9b04      	ldr	r3, [sp, #16]
 8008286:	45c1      	cmp	r9, r8
 8008288:	4417      	add	r7, r2
 800828a:	441f      	add	r7, r3
 800828c:	464b      	mov	r3, r9
 800828e:	bfa8      	it	ge
 8008290:	4643      	movge	r3, r8
 8008292:	42bb      	cmp	r3, r7
 8008294:	bfa8      	it	ge
 8008296:	463b      	movge	r3, r7
 8008298:	2b00      	cmp	r3, #0
 800829a:	bfc2      	ittt	gt
 800829c:	eba8 0803 	subgt.w	r8, r8, r3
 80082a0:	1aff      	subgt	r7, r7, r3
 80082a2:	eba9 0903 	subgt.w	r9, r9, r3
 80082a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	dd17      	ble.n	80082dc <_strtod_l+0x75c>
 80082ac:	4631      	mov	r1, r6
 80082ae:	461a      	mov	r2, r3
 80082b0:	4620      	mov	r0, r4
 80082b2:	f001 f88d 	bl	80093d0 <__pow5mult>
 80082b6:	4606      	mov	r6, r0
 80082b8:	2800      	cmp	r0, #0
 80082ba:	f43f aead 	beq.w	8008018 <_strtod_l+0x498>
 80082be:	4601      	mov	r1, r0
 80082c0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80082c2:	4620      	mov	r0, r4
 80082c4:	f000 ffde 	bl	8009284 <__multiply>
 80082c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80082ca:	2800      	cmp	r0, #0
 80082cc:	f43f aea4 	beq.w	8008018 <_strtod_l+0x498>
 80082d0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80082d2:	4620      	mov	r0, r4
 80082d4:	f000 feba 	bl	800904c <_Bfree>
 80082d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082da:	931e      	str	r3, [sp, #120]	; 0x78
 80082dc:	f1b8 0f00 	cmp.w	r8, #0
 80082e0:	f300 8091 	bgt.w	8008406 <_strtod_l+0x886>
 80082e4:	9b08      	ldr	r3, [sp, #32]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	dd08      	ble.n	80082fc <_strtod_l+0x77c>
 80082ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80082ec:	9907      	ldr	r1, [sp, #28]
 80082ee:	4620      	mov	r0, r4
 80082f0:	f001 f86e 	bl	80093d0 <__pow5mult>
 80082f4:	9007      	str	r0, [sp, #28]
 80082f6:	2800      	cmp	r0, #0
 80082f8:	f43f ae8e 	beq.w	8008018 <_strtod_l+0x498>
 80082fc:	2f00      	cmp	r7, #0
 80082fe:	dd08      	ble.n	8008312 <_strtod_l+0x792>
 8008300:	9907      	ldr	r1, [sp, #28]
 8008302:	463a      	mov	r2, r7
 8008304:	4620      	mov	r0, r4
 8008306:	f001 f8bd 	bl	8009484 <__lshift>
 800830a:	9007      	str	r0, [sp, #28]
 800830c:	2800      	cmp	r0, #0
 800830e:	f43f ae83 	beq.w	8008018 <_strtod_l+0x498>
 8008312:	f1b9 0f00 	cmp.w	r9, #0
 8008316:	dd08      	ble.n	800832a <_strtod_l+0x7aa>
 8008318:	4631      	mov	r1, r6
 800831a:	464a      	mov	r2, r9
 800831c:	4620      	mov	r0, r4
 800831e:	f001 f8b1 	bl	8009484 <__lshift>
 8008322:	4606      	mov	r6, r0
 8008324:	2800      	cmp	r0, #0
 8008326:	f43f ae77 	beq.w	8008018 <_strtod_l+0x498>
 800832a:	9a07      	ldr	r2, [sp, #28]
 800832c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800832e:	4620      	mov	r0, r4
 8008330:	f001 f930 	bl	8009594 <__mdiff>
 8008334:	4605      	mov	r5, r0
 8008336:	2800      	cmp	r0, #0
 8008338:	f43f ae6e 	beq.w	8008018 <_strtod_l+0x498>
 800833c:	68c3      	ldr	r3, [r0, #12]
 800833e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008340:	2300      	movs	r3, #0
 8008342:	60c3      	str	r3, [r0, #12]
 8008344:	4631      	mov	r1, r6
 8008346:	f001 f909 	bl	800955c <__mcmp>
 800834a:	2800      	cmp	r0, #0
 800834c:	da65      	bge.n	800841a <_strtod_l+0x89a>
 800834e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008350:	ea53 030a 	orrs.w	r3, r3, sl
 8008354:	f040 8087 	bne.w	8008466 <_strtod_l+0x8e6>
 8008358:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800835c:	2b00      	cmp	r3, #0
 800835e:	f040 8082 	bne.w	8008466 <_strtod_l+0x8e6>
 8008362:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008366:	0d1b      	lsrs	r3, r3, #20
 8008368:	051b      	lsls	r3, r3, #20
 800836a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800836e:	d97a      	bls.n	8008466 <_strtod_l+0x8e6>
 8008370:	696b      	ldr	r3, [r5, #20]
 8008372:	b913      	cbnz	r3, 800837a <_strtod_l+0x7fa>
 8008374:	692b      	ldr	r3, [r5, #16]
 8008376:	2b01      	cmp	r3, #1
 8008378:	dd75      	ble.n	8008466 <_strtod_l+0x8e6>
 800837a:	4629      	mov	r1, r5
 800837c:	2201      	movs	r2, #1
 800837e:	4620      	mov	r0, r4
 8008380:	f001 f880 	bl	8009484 <__lshift>
 8008384:	4631      	mov	r1, r6
 8008386:	4605      	mov	r5, r0
 8008388:	f001 f8e8 	bl	800955c <__mcmp>
 800838c:	2800      	cmp	r0, #0
 800838e:	dd6a      	ble.n	8008466 <_strtod_l+0x8e6>
 8008390:	9904      	ldr	r1, [sp, #16]
 8008392:	4a55      	ldr	r2, [pc, #340]	; (80084e8 <_strtod_l+0x968>)
 8008394:	465b      	mov	r3, fp
 8008396:	2900      	cmp	r1, #0
 8008398:	f000 8085 	beq.w	80084a6 <_strtod_l+0x926>
 800839c:	ea02 010b 	and.w	r1, r2, fp
 80083a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80083a4:	dc7f      	bgt.n	80084a6 <_strtod_l+0x926>
 80083a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80083aa:	f77f aeaa 	ble.w	8008102 <_strtod_l+0x582>
 80083ae:	4a4f      	ldr	r2, [pc, #316]	; (80084ec <_strtod_l+0x96c>)
 80083b0:	2300      	movs	r3, #0
 80083b2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80083b6:	4650      	mov	r0, sl
 80083b8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80083bc:	4659      	mov	r1, fp
 80083be:	f7f8 f92b 	bl	8000618 <__aeabi_dmul>
 80083c2:	460b      	mov	r3, r1
 80083c4:	4303      	orrs	r3, r0
 80083c6:	bf08      	it	eq
 80083c8:	2322      	moveq	r3, #34	; 0x22
 80083ca:	4682      	mov	sl, r0
 80083cc:	468b      	mov	fp, r1
 80083ce:	bf08      	it	eq
 80083d0:	6023      	streq	r3, [r4, #0]
 80083d2:	e62b      	b.n	800802c <_strtod_l+0x4ac>
 80083d4:	f04f 32ff 	mov.w	r2, #4294967295
 80083d8:	fa02 f303 	lsl.w	r3, r2, r3
 80083dc:	ea03 0a0a 	and.w	sl, r3, sl
 80083e0:	e6de      	b.n	80081a0 <_strtod_l+0x620>
 80083e2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80083e6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80083ea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80083ee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80083f2:	fa01 f308 	lsl.w	r3, r1, r8
 80083f6:	930c      	str	r3, [sp, #48]	; 0x30
 80083f8:	9111      	str	r1, [sp, #68]	; 0x44
 80083fa:	e741      	b.n	8008280 <_strtod_l+0x700>
 80083fc:	2300      	movs	r3, #0
 80083fe:	930c      	str	r3, [sp, #48]	; 0x30
 8008400:	2301      	movs	r3, #1
 8008402:	9311      	str	r3, [sp, #68]	; 0x44
 8008404:	e73c      	b.n	8008280 <_strtod_l+0x700>
 8008406:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008408:	4642      	mov	r2, r8
 800840a:	4620      	mov	r0, r4
 800840c:	f001 f83a 	bl	8009484 <__lshift>
 8008410:	901e      	str	r0, [sp, #120]	; 0x78
 8008412:	2800      	cmp	r0, #0
 8008414:	f47f af66 	bne.w	80082e4 <_strtod_l+0x764>
 8008418:	e5fe      	b.n	8008018 <_strtod_l+0x498>
 800841a:	465f      	mov	r7, fp
 800841c:	d16e      	bne.n	80084fc <_strtod_l+0x97c>
 800841e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008420:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008424:	b342      	cbz	r2, 8008478 <_strtod_l+0x8f8>
 8008426:	4a32      	ldr	r2, [pc, #200]	; (80084f0 <_strtod_l+0x970>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d128      	bne.n	800847e <_strtod_l+0x8fe>
 800842c:	9b04      	ldr	r3, [sp, #16]
 800842e:	4650      	mov	r0, sl
 8008430:	b1eb      	cbz	r3, 800846e <_strtod_l+0x8ee>
 8008432:	4a2d      	ldr	r2, [pc, #180]	; (80084e8 <_strtod_l+0x968>)
 8008434:	403a      	ands	r2, r7
 8008436:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800843a:	f04f 31ff 	mov.w	r1, #4294967295
 800843e:	d819      	bhi.n	8008474 <_strtod_l+0x8f4>
 8008440:	0d12      	lsrs	r2, r2, #20
 8008442:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008446:	fa01 f303 	lsl.w	r3, r1, r3
 800844a:	4298      	cmp	r0, r3
 800844c:	d117      	bne.n	800847e <_strtod_l+0x8fe>
 800844e:	4b29      	ldr	r3, [pc, #164]	; (80084f4 <_strtod_l+0x974>)
 8008450:	429f      	cmp	r7, r3
 8008452:	d102      	bne.n	800845a <_strtod_l+0x8da>
 8008454:	3001      	adds	r0, #1
 8008456:	f43f addf 	beq.w	8008018 <_strtod_l+0x498>
 800845a:	4b23      	ldr	r3, [pc, #140]	; (80084e8 <_strtod_l+0x968>)
 800845c:	403b      	ands	r3, r7
 800845e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008462:	f04f 0a00 	mov.w	sl, #0
 8008466:	9b04      	ldr	r3, [sp, #16]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1a0      	bne.n	80083ae <_strtod_l+0x82e>
 800846c:	e5de      	b.n	800802c <_strtod_l+0x4ac>
 800846e:	f04f 33ff 	mov.w	r3, #4294967295
 8008472:	e7ea      	b.n	800844a <_strtod_l+0x8ca>
 8008474:	460b      	mov	r3, r1
 8008476:	e7e8      	b.n	800844a <_strtod_l+0x8ca>
 8008478:	ea53 030a 	orrs.w	r3, r3, sl
 800847c:	d088      	beq.n	8008390 <_strtod_l+0x810>
 800847e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008480:	b1db      	cbz	r3, 80084ba <_strtod_l+0x93a>
 8008482:	423b      	tst	r3, r7
 8008484:	d0ef      	beq.n	8008466 <_strtod_l+0x8e6>
 8008486:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008488:	9a04      	ldr	r2, [sp, #16]
 800848a:	4650      	mov	r0, sl
 800848c:	4659      	mov	r1, fp
 800848e:	b1c3      	cbz	r3, 80084c2 <_strtod_l+0x942>
 8008490:	f7ff fb5a 	bl	8007b48 <sulp>
 8008494:	4602      	mov	r2, r0
 8008496:	460b      	mov	r3, r1
 8008498:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800849c:	f7f7 ff06 	bl	80002ac <__adddf3>
 80084a0:	4682      	mov	sl, r0
 80084a2:	468b      	mov	fp, r1
 80084a4:	e7df      	b.n	8008466 <_strtod_l+0x8e6>
 80084a6:	4013      	ands	r3, r2
 80084a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80084ac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80084b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80084b4:	f04f 3aff 	mov.w	sl, #4294967295
 80084b8:	e7d5      	b.n	8008466 <_strtod_l+0x8e6>
 80084ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084bc:	ea13 0f0a 	tst.w	r3, sl
 80084c0:	e7e0      	b.n	8008484 <_strtod_l+0x904>
 80084c2:	f7ff fb41 	bl	8007b48 <sulp>
 80084c6:	4602      	mov	r2, r0
 80084c8:	460b      	mov	r3, r1
 80084ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80084ce:	f7f7 feeb 	bl	80002a8 <__aeabi_dsub>
 80084d2:	2200      	movs	r2, #0
 80084d4:	2300      	movs	r3, #0
 80084d6:	4682      	mov	sl, r0
 80084d8:	468b      	mov	fp, r1
 80084da:	f7f8 fb05 	bl	8000ae8 <__aeabi_dcmpeq>
 80084de:	2800      	cmp	r0, #0
 80084e0:	d0c1      	beq.n	8008466 <_strtod_l+0x8e6>
 80084e2:	e60e      	b.n	8008102 <_strtod_l+0x582>
 80084e4:	fffffc02 	.word	0xfffffc02
 80084e8:	7ff00000 	.word	0x7ff00000
 80084ec:	39500000 	.word	0x39500000
 80084f0:	000fffff 	.word	0x000fffff
 80084f4:	7fefffff 	.word	0x7fefffff
 80084f8:	0800a9f0 	.word	0x0800a9f0
 80084fc:	4631      	mov	r1, r6
 80084fe:	4628      	mov	r0, r5
 8008500:	f001 f9a8 	bl	8009854 <__ratio>
 8008504:	ec59 8b10 	vmov	r8, r9, d0
 8008508:	ee10 0a10 	vmov	r0, s0
 800850c:	2200      	movs	r2, #0
 800850e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008512:	4649      	mov	r1, r9
 8008514:	f7f8 fafc 	bl	8000b10 <__aeabi_dcmple>
 8008518:	2800      	cmp	r0, #0
 800851a:	d07c      	beq.n	8008616 <_strtod_l+0xa96>
 800851c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800851e:	2b00      	cmp	r3, #0
 8008520:	d04c      	beq.n	80085bc <_strtod_l+0xa3c>
 8008522:	4b95      	ldr	r3, [pc, #596]	; (8008778 <_strtod_l+0xbf8>)
 8008524:	2200      	movs	r2, #0
 8008526:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800852a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008778 <_strtod_l+0xbf8>
 800852e:	f04f 0800 	mov.w	r8, #0
 8008532:	4b92      	ldr	r3, [pc, #584]	; (800877c <_strtod_l+0xbfc>)
 8008534:	403b      	ands	r3, r7
 8008536:	9311      	str	r3, [sp, #68]	; 0x44
 8008538:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800853a:	4b91      	ldr	r3, [pc, #580]	; (8008780 <_strtod_l+0xc00>)
 800853c:	429a      	cmp	r2, r3
 800853e:	f040 80b2 	bne.w	80086a6 <_strtod_l+0xb26>
 8008542:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008546:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800854a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800854e:	ec4b ab10 	vmov	d0, sl, fp
 8008552:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8008556:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800855a:	f001 f8a3 	bl	80096a4 <__ulp>
 800855e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008562:	ec53 2b10 	vmov	r2, r3, d0
 8008566:	f7f8 f857 	bl	8000618 <__aeabi_dmul>
 800856a:	4652      	mov	r2, sl
 800856c:	465b      	mov	r3, fp
 800856e:	f7f7 fe9d 	bl	80002ac <__adddf3>
 8008572:	460b      	mov	r3, r1
 8008574:	4981      	ldr	r1, [pc, #516]	; (800877c <_strtod_l+0xbfc>)
 8008576:	4a83      	ldr	r2, [pc, #524]	; (8008784 <_strtod_l+0xc04>)
 8008578:	4019      	ands	r1, r3
 800857a:	4291      	cmp	r1, r2
 800857c:	4682      	mov	sl, r0
 800857e:	d95e      	bls.n	800863e <_strtod_l+0xabe>
 8008580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008582:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008586:	4293      	cmp	r3, r2
 8008588:	d103      	bne.n	8008592 <_strtod_l+0xa12>
 800858a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800858c:	3301      	adds	r3, #1
 800858e:	f43f ad43 	beq.w	8008018 <_strtod_l+0x498>
 8008592:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8008790 <_strtod_l+0xc10>
 8008596:	f04f 3aff 	mov.w	sl, #4294967295
 800859a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800859c:	4620      	mov	r0, r4
 800859e:	f000 fd55 	bl	800904c <_Bfree>
 80085a2:	9907      	ldr	r1, [sp, #28]
 80085a4:	4620      	mov	r0, r4
 80085a6:	f000 fd51 	bl	800904c <_Bfree>
 80085aa:	4631      	mov	r1, r6
 80085ac:	4620      	mov	r0, r4
 80085ae:	f000 fd4d 	bl	800904c <_Bfree>
 80085b2:	4629      	mov	r1, r5
 80085b4:	4620      	mov	r0, r4
 80085b6:	f000 fd49 	bl	800904c <_Bfree>
 80085ba:	e613      	b.n	80081e4 <_strtod_l+0x664>
 80085bc:	f1ba 0f00 	cmp.w	sl, #0
 80085c0:	d11b      	bne.n	80085fa <_strtod_l+0xa7a>
 80085c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80085c6:	b9f3      	cbnz	r3, 8008606 <_strtod_l+0xa86>
 80085c8:	4b6b      	ldr	r3, [pc, #428]	; (8008778 <_strtod_l+0xbf8>)
 80085ca:	2200      	movs	r2, #0
 80085cc:	4640      	mov	r0, r8
 80085ce:	4649      	mov	r1, r9
 80085d0:	f7f8 fa94 	bl	8000afc <__aeabi_dcmplt>
 80085d4:	b9d0      	cbnz	r0, 800860c <_strtod_l+0xa8c>
 80085d6:	4640      	mov	r0, r8
 80085d8:	4649      	mov	r1, r9
 80085da:	4b6b      	ldr	r3, [pc, #428]	; (8008788 <_strtod_l+0xc08>)
 80085dc:	2200      	movs	r2, #0
 80085de:	f7f8 f81b 	bl	8000618 <__aeabi_dmul>
 80085e2:	4680      	mov	r8, r0
 80085e4:	4689      	mov	r9, r1
 80085e6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80085ea:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80085ee:	931b      	str	r3, [sp, #108]	; 0x6c
 80085f0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80085f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80085f8:	e79b      	b.n	8008532 <_strtod_l+0x9b2>
 80085fa:	f1ba 0f01 	cmp.w	sl, #1
 80085fe:	d102      	bne.n	8008606 <_strtod_l+0xa86>
 8008600:	2f00      	cmp	r7, #0
 8008602:	f43f ad7e 	beq.w	8008102 <_strtod_l+0x582>
 8008606:	4b61      	ldr	r3, [pc, #388]	; (800878c <_strtod_l+0xc0c>)
 8008608:	2200      	movs	r2, #0
 800860a:	e78c      	b.n	8008526 <_strtod_l+0x9a6>
 800860c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008788 <_strtod_l+0xc08>
 8008610:	f04f 0800 	mov.w	r8, #0
 8008614:	e7e7      	b.n	80085e6 <_strtod_l+0xa66>
 8008616:	4b5c      	ldr	r3, [pc, #368]	; (8008788 <_strtod_l+0xc08>)
 8008618:	4640      	mov	r0, r8
 800861a:	4649      	mov	r1, r9
 800861c:	2200      	movs	r2, #0
 800861e:	f7f7 fffb 	bl	8000618 <__aeabi_dmul>
 8008622:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008624:	4680      	mov	r8, r0
 8008626:	4689      	mov	r9, r1
 8008628:	b933      	cbnz	r3, 8008638 <_strtod_l+0xab8>
 800862a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800862e:	9012      	str	r0, [sp, #72]	; 0x48
 8008630:	9313      	str	r3, [sp, #76]	; 0x4c
 8008632:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008636:	e7dd      	b.n	80085f4 <_strtod_l+0xa74>
 8008638:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800863c:	e7f9      	b.n	8008632 <_strtod_l+0xab2>
 800863e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008642:	9b04      	ldr	r3, [sp, #16]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1a8      	bne.n	800859a <_strtod_l+0xa1a>
 8008648:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800864c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800864e:	0d1b      	lsrs	r3, r3, #20
 8008650:	051b      	lsls	r3, r3, #20
 8008652:	429a      	cmp	r2, r3
 8008654:	d1a1      	bne.n	800859a <_strtod_l+0xa1a>
 8008656:	4640      	mov	r0, r8
 8008658:	4649      	mov	r1, r9
 800865a:	f7f8 faff 	bl	8000c5c <__aeabi_d2lz>
 800865e:	f7f7 ffad 	bl	80005bc <__aeabi_l2d>
 8008662:	4602      	mov	r2, r0
 8008664:	460b      	mov	r3, r1
 8008666:	4640      	mov	r0, r8
 8008668:	4649      	mov	r1, r9
 800866a:	f7f7 fe1d 	bl	80002a8 <__aeabi_dsub>
 800866e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008670:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008674:	ea43 030a 	orr.w	r3, r3, sl
 8008678:	4313      	orrs	r3, r2
 800867a:	4680      	mov	r8, r0
 800867c:	4689      	mov	r9, r1
 800867e:	d053      	beq.n	8008728 <_strtod_l+0xba8>
 8008680:	a335      	add	r3, pc, #212	; (adr r3, 8008758 <_strtod_l+0xbd8>)
 8008682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008686:	f7f8 fa39 	bl	8000afc <__aeabi_dcmplt>
 800868a:	2800      	cmp	r0, #0
 800868c:	f47f acce 	bne.w	800802c <_strtod_l+0x4ac>
 8008690:	a333      	add	r3, pc, #204	; (adr r3, 8008760 <_strtod_l+0xbe0>)
 8008692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008696:	4640      	mov	r0, r8
 8008698:	4649      	mov	r1, r9
 800869a:	f7f8 fa4d 	bl	8000b38 <__aeabi_dcmpgt>
 800869e:	2800      	cmp	r0, #0
 80086a0:	f43f af7b 	beq.w	800859a <_strtod_l+0xa1a>
 80086a4:	e4c2      	b.n	800802c <_strtod_l+0x4ac>
 80086a6:	9b04      	ldr	r3, [sp, #16]
 80086a8:	b333      	cbz	r3, 80086f8 <_strtod_l+0xb78>
 80086aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80086b0:	d822      	bhi.n	80086f8 <_strtod_l+0xb78>
 80086b2:	a32d      	add	r3, pc, #180	; (adr r3, 8008768 <_strtod_l+0xbe8>)
 80086b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b8:	4640      	mov	r0, r8
 80086ba:	4649      	mov	r1, r9
 80086bc:	f7f8 fa28 	bl	8000b10 <__aeabi_dcmple>
 80086c0:	b1a0      	cbz	r0, 80086ec <_strtod_l+0xb6c>
 80086c2:	4649      	mov	r1, r9
 80086c4:	4640      	mov	r0, r8
 80086c6:	f7f8 fa41 	bl	8000b4c <__aeabi_d2uiz>
 80086ca:	2801      	cmp	r0, #1
 80086cc:	bf38      	it	cc
 80086ce:	2001      	movcc	r0, #1
 80086d0:	f7f7 ff28 	bl	8000524 <__aeabi_ui2d>
 80086d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086d6:	4680      	mov	r8, r0
 80086d8:	4689      	mov	r9, r1
 80086da:	bb13      	cbnz	r3, 8008722 <_strtod_l+0xba2>
 80086dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086e0:	9014      	str	r0, [sp, #80]	; 0x50
 80086e2:	9315      	str	r3, [sp, #84]	; 0x54
 80086e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80086e8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80086ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80086f0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80086f4:	1a9b      	subs	r3, r3, r2
 80086f6:	930d      	str	r3, [sp, #52]	; 0x34
 80086f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80086fc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008700:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008704:	f000 ffce 	bl	80096a4 <__ulp>
 8008708:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800870c:	ec53 2b10 	vmov	r2, r3, d0
 8008710:	f7f7 ff82 	bl	8000618 <__aeabi_dmul>
 8008714:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008718:	f7f7 fdc8 	bl	80002ac <__adddf3>
 800871c:	4682      	mov	sl, r0
 800871e:	468b      	mov	fp, r1
 8008720:	e78f      	b.n	8008642 <_strtod_l+0xac2>
 8008722:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8008726:	e7dd      	b.n	80086e4 <_strtod_l+0xb64>
 8008728:	a311      	add	r3, pc, #68	; (adr r3, 8008770 <_strtod_l+0xbf0>)
 800872a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872e:	f7f8 f9e5 	bl	8000afc <__aeabi_dcmplt>
 8008732:	e7b4      	b.n	800869e <_strtod_l+0xb1e>
 8008734:	2300      	movs	r3, #0
 8008736:	930e      	str	r3, [sp, #56]	; 0x38
 8008738:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800873a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800873c:	6013      	str	r3, [r2, #0]
 800873e:	f7ff ba65 	b.w	8007c0c <_strtod_l+0x8c>
 8008742:	2b65      	cmp	r3, #101	; 0x65
 8008744:	f43f ab5d 	beq.w	8007e02 <_strtod_l+0x282>
 8008748:	2b45      	cmp	r3, #69	; 0x45
 800874a:	f43f ab5a 	beq.w	8007e02 <_strtod_l+0x282>
 800874e:	2201      	movs	r2, #1
 8008750:	f7ff bb92 	b.w	8007e78 <_strtod_l+0x2f8>
 8008754:	f3af 8000 	nop.w
 8008758:	94a03595 	.word	0x94a03595
 800875c:	3fdfffff 	.word	0x3fdfffff
 8008760:	35afe535 	.word	0x35afe535
 8008764:	3fe00000 	.word	0x3fe00000
 8008768:	ffc00000 	.word	0xffc00000
 800876c:	41dfffff 	.word	0x41dfffff
 8008770:	94a03595 	.word	0x94a03595
 8008774:	3fcfffff 	.word	0x3fcfffff
 8008778:	3ff00000 	.word	0x3ff00000
 800877c:	7ff00000 	.word	0x7ff00000
 8008780:	7fe00000 	.word	0x7fe00000
 8008784:	7c9fffff 	.word	0x7c9fffff
 8008788:	3fe00000 	.word	0x3fe00000
 800878c:	bff00000 	.word	0xbff00000
 8008790:	7fefffff 	.word	0x7fefffff

08008794 <strtod>:
 8008794:	460a      	mov	r2, r1
 8008796:	4601      	mov	r1, r0
 8008798:	4802      	ldr	r0, [pc, #8]	; (80087a4 <strtod+0x10>)
 800879a:	4b03      	ldr	r3, [pc, #12]	; (80087a8 <strtod+0x14>)
 800879c:	6800      	ldr	r0, [r0, #0]
 800879e:	f7ff b9ef 	b.w	8007b80 <_strtod_l>
 80087a2:	bf00      	nop
 80087a4:	2000000c 	.word	0x2000000c
 80087a8:	20000074 	.word	0x20000074

080087ac <_strtol_l.isra.0>:
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087b2:	d001      	beq.n	80087b8 <_strtol_l.isra.0+0xc>
 80087b4:	2b24      	cmp	r3, #36	; 0x24
 80087b6:	d906      	bls.n	80087c6 <_strtol_l.isra.0+0x1a>
 80087b8:	f7ff f96c 	bl	8007a94 <__errno>
 80087bc:	2316      	movs	r3, #22
 80087be:	6003      	str	r3, [r0, #0]
 80087c0:	2000      	movs	r0, #0
 80087c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087c6:	4f3a      	ldr	r7, [pc, #232]	; (80088b0 <_strtol_l.isra.0+0x104>)
 80087c8:	468e      	mov	lr, r1
 80087ca:	4676      	mov	r6, lr
 80087cc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80087d0:	5de5      	ldrb	r5, [r4, r7]
 80087d2:	f015 0508 	ands.w	r5, r5, #8
 80087d6:	d1f8      	bne.n	80087ca <_strtol_l.isra.0+0x1e>
 80087d8:	2c2d      	cmp	r4, #45	; 0x2d
 80087da:	d134      	bne.n	8008846 <_strtol_l.isra.0+0x9a>
 80087dc:	f89e 4000 	ldrb.w	r4, [lr]
 80087e0:	f04f 0801 	mov.w	r8, #1
 80087e4:	f106 0e02 	add.w	lr, r6, #2
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d05c      	beq.n	80088a6 <_strtol_l.isra.0+0xfa>
 80087ec:	2b10      	cmp	r3, #16
 80087ee:	d10c      	bne.n	800880a <_strtol_l.isra.0+0x5e>
 80087f0:	2c30      	cmp	r4, #48	; 0x30
 80087f2:	d10a      	bne.n	800880a <_strtol_l.isra.0+0x5e>
 80087f4:	f89e 4000 	ldrb.w	r4, [lr]
 80087f8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80087fc:	2c58      	cmp	r4, #88	; 0x58
 80087fe:	d14d      	bne.n	800889c <_strtol_l.isra.0+0xf0>
 8008800:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008804:	2310      	movs	r3, #16
 8008806:	f10e 0e02 	add.w	lr, lr, #2
 800880a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800880e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008812:	2600      	movs	r6, #0
 8008814:	fbbc f9f3 	udiv	r9, ip, r3
 8008818:	4635      	mov	r5, r6
 800881a:	fb03 ca19 	mls	sl, r3, r9, ip
 800881e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008822:	2f09      	cmp	r7, #9
 8008824:	d818      	bhi.n	8008858 <_strtol_l.isra.0+0xac>
 8008826:	463c      	mov	r4, r7
 8008828:	42a3      	cmp	r3, r4
 800882a:	dd24      	ble.n	8008876 <_strtol_l.isra.0+0xca>
 800882c:	2e00      	cmp	r6, #0
 800882e:	db1f      	blt.n	8008870 <_strtol_l.isra.0+0xc4>
 8008830:	45a9      	cmp	r9, r5
 8008832:	d31d      	bcc.n	8008870 <_strtol_l.isra.0+0xc4>
 8008834:	d101      	bne.n	800883a <_strtol_l.isra.0+0x8e>
 8008836:	45a2      	cmp	sl, r4
 8008838:	db1a      	blt.n	8008870 <_strtol_l.isra.0+0xc4>
 800883a:	fb05 4503 	mla	r5, r5, r3, r4
 800883e:	2601      	movs	r6, #1
 8008840:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008844:	e7eb      	b.n	800881e <_strtol_l.isra.0+0x72>
 8008846:	2c2b      	cmp	r4, #43	; 0x2b
 8008848:	bf08      	it	eq
 800884a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800884e:	46a8      	mov	r8, r5
 8008850:	bf08      	it	eq
 8008852:	f106 0e02 	addeq.w	lr, r6, #2
 8008856:	e7c7      	b.n	80087e8 <_strtol_l.isra.0+0x3c>
 8008858:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800885c:	2f19      	cmp	r7, #25
 800885e:	d801      	bhi.n	8008864 <_strtol_l.isra.0+0xb8>
 8008860:	3c37      	subs	r4, #55	; 0x37
 8008862:	e7e1      	b.n	8008828 <_strtol_l.isra.0+0x7c>
 8008864:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008868:	2f19      	cmp	r7, #25
 800886a:	d804      	bhi.n	8008876 <_strtol_l.isra.0+0xca>
 800886c:	3c57      	subs	r4, #87	; 0x57
 800886e:	e7db      	b.n	8008828 <_strtol_l.isra.0+0x7c>
 8008870:	f04f 36ff 	mov.w	r6, #4294967295
 8008874:	e7e4      	b.n	8008840 <_strtol_l.isra.0+0x94>
 8008876:	2e00      	cmp	r6, #0
 8008878:	da05      	bge.n	8008886 <_strtol_l.isra.0+0xda>
 800887a:	2322      	movs	r3, #34	; 0x22
 800887c:	6003      	str	r3, [r0, #0]
 800887e:	4665      	mov	r5, ip
 8008880:	b942      	cbnz	r2, 8008894 <_strtol_l.isra.0+0xe8>
 8008882:	4628      	mov	r0, r5
 8008884:	e79d      	b.n	80087c2 <_strtol_l.isra.0+0x16>
 8008886:	f1b8 0f00 	cmp.w	r8, #0
 800888a:	d000      	beq.n	800888e <_strtol_l.isra.0+0xe2>
 800888c:	426d      	negs	r5, r5
 800888e:	2a00      	cmp	r2, #0
 8008890:	d0f7      	beq.n	8008882 <_strtol_l.isra.0+0xd6>
 8008892:	b10e      	cbz	r6, 8008898 <_strtol_l.isra.0+0xec>
 8008894:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008898:	6011      	str	r1, [r2, #0]
 800889a:	e7f2      	b.n	8008882 <_strtol_l.isra.0+0xd6>
 800889c:	2430      	movs	r4, #48	; 0x30
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1b3      	bne.n	800880a <_strtol_l.isra.0+0x5e>
 80088a2:	2308      	movs	r3, #8
 80088a4:	e7b1      	b.n	800880a <_strtol_l.isra.0+0x5e>
 80088a6:	2c30      	cmp	r4, #48	; 0x30
 80088a8:	d0a4      	beq.n	80087f4 <_strtol_l.isra.0+0x48>
 80088aa:	230a      	movs	r3, #10
 80088ac:	e7ad      	b.n	800880a <_strtol_l.isra.0+0x5e>
 80088ae:	bf00      	nop
 80088b0:	0800aa19 	.word	0x0800aa19

080088b4 <strtol>:
 80088b4:	4613      	mov	r3, r2
 80088b6:	460a      	mov	r2, r1
 80088b8:	4601      	mov	r1, r0
 80088ba:	4802      	ldr	r0, [pc, #8]	; (80088c4 <strtol+0x10>)
 80088bc:	6800      	ldr	r0, [r0, #0]
 80088be:	f7ff bf75 	b.w	80087ac <_strtol_l.isra.0>
 80088c2:	bf00      	nop
 80088c4:	2000000c 	.word	0x2000000c

080088c8 <rshift>:
 80088c8:	6903      	ldr	r3, [r0, #16]
 80088ca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80088ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088d2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80088d6:	f100 0414 	add.w	r4, r0, #20
 80088da:	dd45      	ble.n	8008968 <rshift+0xa0>
 80088dc:	f011 011f 	ands.w	r1, r1, #31
 80088e0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80088e4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80088e8:	d10c      	bne.n	8008904 <rshift+0x3c>
 80088ea:	f100 0710 	add.w	r7, r0, #16
 80088ee:	4629      	mov	r1, r5
 80088f0:	42b1      	cmp	r1, r6
 80088f2:	d334      	bcc.n	800895e <rshift+0x96>
 80088f4:	1a9b      	subs	r3, r3, r2
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	1eea      	subs	r2, r5, #3
 80088fa:	4296      	cmp	r6, r2
 80088fc:	bf38      	it	cc
 80088fe:	2300      	movcc	r3, #0
 8008900:	4423      	add	r3, r4
 8008902:	e015      	b.n	8008930 <rshift+0x68>
 8008904:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008908:	f1c1 0820 	rsb	r8, r1, #32
 800890c:	40cf      	lsrs	r7, r1
 800890e:	f105 0e04 	add.w	lr, r5, #4
 8008912:	46a1      	mov	r9, r4
 8008914:	4576      	cmp	r6, lr
 8008916:	46f4      	mov	ip, lr
 8008918:	d815      	bhi.n	8008946 <rshift+0x7e>
 800891a:	1a9b      	subs	r3, r3, r2
 800891c:	009a      	lsls	r2, r3, #2
 800891e:	3a04      	subs	r2, #4
 8008920:	3501      	adds	r5, #1
 8008922:	42ae      	cmp	r6, r5
 8008924:	bf38      	it	cc
 8008926:	2200      	movcc	r2, #0
 8008928:	18a3      	adds	r3, r4, r2
 800892a:	50a7      	str	r7, [r4, r2]
 800892c:	b107      	cbz	r7, 8008930 <rshift+0x68>
 800892e:	3304      	adds	r3, #4
 8008930:	1b1a      	subs	r2, r3, r4
 8008932:	42a3      	cmp	r3, r4
 8008934:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008938:	bf08      	it	eq
 800893a:	2300      	moveq	r3, #0
 800893c:	6102      	str	r2, [r0, #16]
 800893e:	bf08      	it	eq
 8008940:	6143      	streq	r3, [r0, #20]
 8008942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008946:	f8dc c000 	ldr.w	ip, [ip]
 800894a:	fa0c fc08 	lsl.w	ip, ip, r8
 800894e:	ea4c 0707 	orr.w	r7, ip, r7
 8008952:	f849 7b04 	str.w	r7, [r9], #4
 8008956:	f85e 7b04 	ldr.w	r7, [lr], #4
 800895a:	40cf      	lsrs	r7, r1
 800895c:	e7da      	b.n	8008914 <rshift+0x4c>
 800895e:	f851 cb04 	ldr.w	ip, [r1], #4
 8008962:	f847 cf04 	str.w	ip, [r7, #4]!
 8008966:	e7c3      	b.n	80088f0 <rshift+0x28>
 8008968:	4623      	mov	r3, r4
 800896a:	e7e1      	b.n	8008930 <rshift+0x68>

0800896c <__hexdig_fun>:
 800896c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008970:	2b09      	cmp	r3, #9
 8008972:	d802      	bhi.n	800897a <__hexdig_fun+0xe>
 8008974:	3820      	subs	r0, #32
 8008976:	b2c0      	uxtb	r0, r0
 8008978:	4770      	bx	lr
 800897a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800897e:	2b05      	cmp	r3, #5
 8008980:	d801      	bhi.n	8008986 <__hexdig_fun+0x1a>
 8008982:	3847      	subs	r0, #71	; 0x47
 8008984:	e7f7      	b.n	8008976 <__hexdig_fun+0xa>
 8008986:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800898a:	2b05      	cmp	r3, #5
 800898c:	d801      	bhi.n	8008992 <__hexdig_fun+0x26>
 800898e:	3827      	subs	r0, #39	; 0x27
 8008990:	e7f1      	b.n	8008976 <__hexdig_fun+0xa>
 8008992:	2000      	movs	r0, #0
 8008994:	4770      	bx	lr
	...

08008998 <__gethex>:
 8008998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800899c:	ed2d 8b02 	vpush	{d8}
 80089a0:	b089      	sub	sp, #36	; 0x24
 80089a2:	ee08 0a10 	vmov	s16, r0
 80089a6:	9304      	str	r3, [sp, #16]
 80089a8:	4bbc      	ldr	r3, [pc, #752]	; (8008c9c <__gethex+0x304>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	9301      	str	r3, [sp, #4]
 80089ae:	4618      	mov	r0, r3
 80089b0:	468b      	mov	fp, r1
 80089b2:	4690      	mov	r8, r2
 80089b4:	f7f7 fc16 	bl	80001e4 <strlen>
 80089b8:	9b01      	ldr	r3, [sp, #4]
 80089ba:	f8db 2000 	ldr.w	r2, [fp]
 80089be:	4403      	add	r3, r0
 80089c0:	4682      	mov	sl, r0
 80089c2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80089c6:	9305      	str	r3, [sp, #20]
 80089c8:	1c93      	adds	r3, r2, #2
 80089ca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80089ce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80089d2:	32fe      	adds	r2, #254	; 0xfe
 80089d4:	18d1      	adds	r1, r2, r3
 80089d6:	461f      	mov	r7, r3
 80089d8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80089dc:	9100      	str	r1, [sp, #0]
 80089de:	2830      	cmp	r0, #48	; 0x30
 80089e0:	d0f8      	beq.n	80089d4 <__gethex+0x3c>
 80089e2:	f7ff ffc3 	bl	800896c <__hexdig_fun>
 80089e6:	4604      	mov	r4, r0
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d13a      	bne.n	8008a62 <__gethex+0xca>
 80089ec:	9901      	ldr	r1, [sp, #4]
 80089ee:	4652      	mov	r2, sl
 80089f0:	4638      	mov	r0, r7
 80089f2:	f001 f829 	bl	8009a48 <strncmp>
 80089f6:	4605      	mov	r5, r0
 80089f8:	2800      	cmp	r0, #0
 80089fa:	d168      	bne.n	8008ace <__gethex+0x136>
 80089fc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008a00:	eb07 060a 	add.w	r6, r7, sl
 8008a04:	f7ff ffb2 	bl	800896c <__hexdig_fun>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d062      	beq.n	8008ad2 <__gethex+0x13a>
 8008a0c:	4633      	mov	r3, r6
 8008a0e:	7818      	ldrb	r0, [r3, #0]
 8008a10:	2830      	cmp	r0, #48	; 0x30
 8008a12:	461f      	mov	r7, r3
 8008a14:	f103 0301 	add.w	r3, r3, #1
 8008a18:	d0f9      	beq.n	8008a0e <__gethex+0x76>
 8008a1a:	f7ff ffa7 	bl	800896c <__hexdig_fun>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	fab0 f480 	clz	r4, r0
 8008a24:	0964      	lsrs	r4, r4, #5
 8008a26:	4635      	mov	r5, r6
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	463a      	mov	r2, r7
 8008a2c:	4616      	mov	r6, r2
 8008a2e:	3201      	adds	r2, #1
 8008a30:	7830      	ldrb	r0, [r6, #0]
 8008a32:	f7ff ff9b 	bl	800896c <__hexdig_fun>
 8008a36:	2800      	cmp	r0, #0
 8008a38:	d1f8      	bne.n	8008a2c <__gethex+0x94>
 8008a3a:	9901      	ldr	r1, [sp, #4]
 8008a3c:	4652      	mov	r2, sl
 8008a3e:	4630      	mov	r0, r6
 8008a40:	f001 f802 	bl	8009a48 <strncmp>
 8008a44:	b980      	cbnz	r0, 8008a68 <__gethex+0xd0>
 8008a46:	b94d      	cbnz	r5, 8008a5c <__gethex+0xc4>
 8008a48:	eb06 050a 	add.w	r5, r6, sl
 8008a4c:	462a      	mov	r2, r5
 8008a4e:	4616      	mov	r6, r2
 8008a50:	3201      	adds	r2, #1
 8008a52:	7830      	ldrb	r0, [r6, #0]
 8008a54:	f7ff ff8a 	bl	800896c <__hexdig_fun>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	d1f8      	bne.n	8008a4e <__gethex+0xb6>
 8008a5c:	1bad      	subs	r5, r5, r6
 8008a5e:	00ad      	lsls	r5, r5, #2
 8008a60:	e004      	b.n	8008a6c <__gethex+0xd4>
 8008a62:	2400      	movs	r4, #0
 8008a64:	4625      	mov	r5, r4
 8008a66:	e7e0      	b.n	8008a2a <__gethex+0x92>
 8008a68:	2d00      	cmp	r5, #0
 8008a6a:	d1f7      	bne.n	8008a5c <__gethex+0xc4>
 8008a6c:	7833      	ldrb	r3, [r6, #0]
 8008a6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a72:	2b50      	cmp	r3, #80	; 0x50
 8008a74:	d13b      	bne.n	8008aee <__gethex+0x156>
 8008a76:	7873      	ldrb	r3, [r6, #1]
 8008a78:	2b2b      	cmp	r3, #43	; 0x2b
 8008a7a:	d02c      	beq.n	8008ad6 <__gethex+0x13e>
 8008a7c:	2b2d      	cmp	r3, #45	; 0x2d
 8008a7e:	d02e      	beq.n	8008ade <__gethex+0x146>
 8008a80:	1c71      	adds	r1, r6, #1
 8008a82:	f04f 0900 	mov.w	r9, #0
 8008a86:	7808      	ldrb	r0, [r1, #0]
 8008a88:	f7ff ff70 	bl	800896c <__hexdig_fun>
 8008a8c:	1e43      	subs	r3, r0, #1
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	2b18      	cmp	r3, #24
 8008a92:	d82c      	bhi.n	8008aee <__gethex+0x156>
 8008a94:	f1a0 0210 	sub.w	r2, r0, #16
 8008a98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008a9c:	f7ff ff66 	bl	800896c <__hexdig_fun>
 8008aa0:	1e43      	subs	r3, r0, #1
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b18      	cmp	r3, #24
 8008aa6:	d91d      	bls.n	8008ae4 <__gethex+0x14c>
 8008aa8:	f1b9 0f00 	cmp.w	r9, #0
 8008aac:	d000      	beq.n	8008ab0 <__gethex+0x118>
 8008aae:	4252      	negs	r2, r2
 8008ab0:	4415      	add	r5, r2
 8008ab2:	f8cb 1000 	str.w	r1, [fp]
 8008ab6:	b1e4      	cbz	r4, 8008af2 <__gethex+0x15a>
 8008ab8:	9b00      	ldr	r3, [sp, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	bf14      	ite	ne
 8008abe:	2700      	movne	r7, #0
 8008ac0:	2706      	moveq	r7, #6
 8008ac2:	4638      	mov	r0, r7
 8008ac4:	b009      	add	sp, #36	; 0x24
 8008ac6:	ecbd 8b02 	vpop	{d8}
 8008aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ace:	463e      	mov	r6, r7
 8008ad0:	4625      	mov	r5, r4
 8008ad2:	2401      	movs	r4, #1
 8008ad4:	e7ca      	b.n	8008a6c <__gethex+0xd4>
 8008ad6:	f04f 0900 	mov.w	r9, #0
 8008ada:	1cb1      	adds	r1, r6, #2
 8008adc:	e7d3      	b.n	8008a86 <__gethex+0xee>
 8008ade:	f04f 0901 	mov.w	r9, #1
 8008ae2:	e7fa      	b.n	8008ada <__gethex+0x142>
 8008ae4:	230a      	movs	r3, #10
 8008ae6:	fb03 0202 	mla	r2, r3, r2, r0
 8008aea:	3a10      	subs	r2, #16
 8008aec:	e7d4      	b.n	8008a98 <__gethex+0x100>
 8008aee:	4631      	mov	r1, r6
 8008af0:	e7df      	b.n	8008ab2 <__gethex+0x11a>
 8008af2:	1bf3      	subs	r3, r6, r7
 8008af4:	3b01      	subs	r3, #1
 8008af6:	4621      	mov	r1, r4
 8008af8:	2b07      	cmp	r3, #7
 8008afa:	dc0b      	bgt.n	8008b14 <__gethex+0x17c>
 8008afc:	ee18 0a10 	vmov	r0, s16
 8008b00:	f000 fa64 	bl	8008fcc <_Balloc>
 8008b04:	4604      	mov	r4, r0
 8008b06:	b940      	cbnz	r0, 8008b1a <__gethex+0x182>
 8008b08:	4b65      	ldr	r3, [pc, #404]	; (8008ca0 <__gethex+0x308>)
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	21de      	movs	r1, #222	; 0xde
 8008b0e:	4865      	ldr	r0, [pc, #404]	; (8008ca4 <__gethex+0x30c>)
 8008b10:	f000 ffba 	bl	8009a88 <__assert_func>
 8008b14:	3101      	adds	r1, #1
 8008b16:	105b      	asrs	r3, r3, #1
 8008b18:	e7ee      	b.n	8008af8 <__gethex+0x160>
 8008b1a:	f100 0914 	add.w	r9, r0, #20
 8008b1e:	f04f 0b00 	mov.w	fp, #0
 8008b22:	f1ca 0301 	rsb	r3, sl, #1
 8008b26:	f8cd 9008 	str.w	r9, [sp, #8]
 8008b2a:	f8cd b000 	str.w	fp, [sp]
 8008b2e:	9306      	str	r3, [sp, #24]
 8008b30:	42b7      	cmp	r7, r6
 8008b32:	d340      	bcc.n	8008bb6 <__gethex+0x21e>
 8008b34:	9802      	ldr	r0, [sp, #8]
 8008b36:	9b00      	ldr	r3, [sp, #0]
 8008b38:	f840 3b04 	str.w	r3, [r0], #4
 8008b3c:	eba0 0009 	sub.w	r0, r0, r9
 8008b40:	1080      	asrs	r0, r0, #2
 8008b42:	0146      	lsls	r6, r0, #5
 8008b44:	6120      	str	r0, [r4, #16]
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 fb36 	bl	80091b8 <__hi0bits>
 8008b4c:	1a30      	subs	r0, r6, r0
 8008b4e:	f8d8 6000 	ldr.w	r6, [r8]
 8008b52:	42b0      	cmp	r0, r6
 8008b54:	dd63      	ble.n	8008c1e <__gethex+0x286>
 8008b56:	1b87      	subs	r7, r0, r6
 8008b58:	4639      	mov	r1, r7
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f000 fed0 	bl	8009900 <__any_on>
 8008b60:	4682      	mov	sl, r0
 8008b62:	b1a8      	cbz	r0, 8008b90 <__gethex+0x1f8>
 8008b64:	1e7b      	subs	r3, r7, #1
 8008b66:	1159      	asrs	r1, r3, #5
 8008b68:	f003 021f 	and.w	r2, r3, #31
 8008b6c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008b70:	f04f 0a01 	mov.w	sl, #1
 8008b74:	fa0a f202 	lsl.w	r2, sl, r2
 8008b78:	420a      	tst	r2, r1
 8008b7a:	d009      	beq.n	8008b90 <__gethex+0x1f8>
 8008b7c:	4553      	cmp	r3, sl
 8008b7e:	dd05      	ble.n	8008b8c <__gethex+0x1f4>
 8008b80:	1eb9      	subs	r1, r7, #2
 8008b82:	4620      	mov	r0, r4
 8008b84:	f000 febc 	bl	8009900 <__any_on>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d145      	bne.n	8008c18 <__gethex+0x280>
 8008b8c:	f04f 0a02 	mov.w	sl, #2
 8008b90:	4639      	mov	r1, r7
 8008b92:	4620      	mov	r0, r4
 8008b94:	f7ff fe98 	bl	80088c8 <rshift>
 8008b98:	443d      	add	r5, r7
 8008b9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b9e:	42ab      	cmp	r3, r5
 8008ba0:	da4c      	bge.n	8008c3c <__gethex+0x2a4>
 8008ba2:	ee18 0a10 	vmov	r0, s16
 8008ba6:	4621      	mov	r1, r4
 8008ba8:	f000 fa50 	bl	800904c <_Bfree>
 8008bac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008bae:	2300      	movs	r3, #0
 8008bb0:	6013      	str	r3, [r2, #0]
 8008bb2:	27a3      	movs	r7, #163	; 0xa3
 8008bb4:	e785      	b.n	8008ac2 <__gethex+0x12a>
 8008bb6:	1e73      	subs	r3, r6, #1
 8008bb8:	9a05      	ldr	r2, [sp, #20]
 8008bba:	9303      	str	r3, [sp, #12]
 8008bbc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d019      	beq.n	8008bf8 <__gethex+0x260>
 8008bc4:	f1bb 0f20 	cmp.w	fp, #32
 8008bc8:	d107      	bne.n	8008bda <__gethex+0x242>
 8008bca:	9b02      	ldr	r3, [sp, #8]
 8008bcc:	9a00      	ldr	r2, [sp, #0]
 8008bce:	f843 2b04 	str.w	r2, [r3], #4
 8008bd2:	9302      	str	r3, [sp, #8]
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	469b      	mov	fp, r3
 8008bda:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008bde:	f7ff fec5 	bl	800896c <__hexdig_fun>
 8008be2:	9b00      	ldr	r3, [sp, #0]
 8008be4:	f000 000f 	and.w	r0, r0, #15
 8008be8:	fa00 f00b 	lsl.w	r0, r0, fp
 8008bec:	4303      	orrs	r3, r0
 8008bee:	9300      	str	r3, [sp, #0]
 8008bf0:	f10b 0b04 	add.w	fp, fp, #4
 8008bf4:	9b03      	ldr	r3, [sp, #12]
 8008bf6:	e00d      	b.n	8008c14 <__gethex+0x27c>
 8008bf8:	9b03      	ldr	r3, [sp, #12]
 8008bfa:	9a06      	ldr	r2, [sp, #24]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	42bb      	cmp	r3, r7
 8008c00:	d3e0      	bcc.n	8008bc4 <__gethex+0x22c>
 8008c02:	4618      	mov	r0, r3
 8008c04:	9901      	ldr	r1, [sp, #4]
 8008c06:	9307      	str	r3, [sp, #28]
 8008c08:	4652      	mov	r2, sl
 8008c0a:	f000 ff1d 	bl	8009a48 <strncmp>
 8008c0e:	9b07      	ldr	r3, [sp, #28]
 8008c10:	2800      	cmp	r0, #0
 8008c12:	d1d7      	bne.n	8008bc4 <__gethex+0x22c>
 8008c14:	461e      	mov	r6, r3
 8008c16:	e78b      	b.n	8008b30 <__gethex+0x198>
 8008c18:	f04f 0a03 	mov.w	sl, #3
 8008c1c:	e7b8      	b.n	8008b90 <__gethex+0x1f8>
 8008c1e:	da0a      	bge.n	8008c36 <__gethex+0x29e>
 8008c20:	1a37      	subs	r7, r6, r0
 8008c22:	4621      	mov	r1, r4
 8008c24:	ee18 0a10 	vmov	r0, s16
 8008c28:	463a      	mov	r2, r7
 8008c2a:	f000 fc2b 	bl	8009484 <__lshift>
 8008c2e:	1bed      	subs	r5, r5, r7
 8008c30:	4604      	mov	r4, r0
 8008c32:	f100 0914 	add.w	r9, r0, #20
 8008c36:	f04f 0a00 	mov.w	sl, #0
 8008c3a:	e7ae      	b.n	8008b9a <__gethex+0x202>
 8008c3c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008c40:	42a8      	cmp	r0, r5
 8008c42:	dd72      	ble.n	8008d2a <__gethex+0x392>
 8008c44:	1b45      	subs	r5, r0, r5
 8008c46:	42ae      	cmp	r6, r5
 8008c48:	dc36      	bgt.n	8008cb8 <__gethex+0x320>
 8008c4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d02a      	beq.n	8008ca8 <__gethex+0x310>
 8008c52:	2b03      	cmp	r3, #3
 8008c54:	d02c      	beq.n	8008cb0 <__gethex+0x318>
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d115      	bne.n	8008c86 <__gethex+0x2ee>
 8008c5a:	42ae      	cmp	r6, r5
 8008c5c:	d113      	bne.n	8008c86 <__gethex+0x2ee>
 8008c5e:	2e01      	cmp	r6, #1
 8008c60:	d10b      	bne.n	8008c7a <__gethex+0x2e2>
 8008c62:	9a04      	ldr	r2, [sp, #16]
 8008c64:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008c68:	6013      	str	r3, [r2, #0]
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	6123      	str	r3, [r4, #16]
 8008c6e:	f8c9 3000 	str.w	r3, [r9]
 8008c72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c74:	2762      	movs	r7, #98	; 0x62
 8008c76:	601c      	str	r4, [r3, #0]
 8008c78:	e723      	b.n	8008ac2 <__gethex+0x12a>
 8008c7a:	1e71      	subs	r1, r6, #1
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f000 fe3f 	bl	8009900 <__any_on>
 8008c82:	2800      	cmp	r0, #0
 8008c84:	d1ed      	bne.n	8008c62 <__gethex+0x2ca>
 8008c86:	ee18 0a10 	vmov	r0, s16
 8008c8a:	4621      	mov	r1, r4
 8008c8c:	f000 f9de 	bl	800904c <_Bfree>
 8008c90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c92:	2300      	movs	r3, #0
 8008c94:	6013      	str	r3, [r2, #0]
 8008c96:	2750      	movs	r7, #80	; 0x50
 8008c98:	e713      	b.n	8008ac2 <__gethex+0x12a>
 8008c9a:	bf00      	nop
 8008c9c:	0800ab94 	.word	0x0800ab94
 8008ca0:	0800ab19 	.word	0x0800ab19
 8008ca4:	0800ab2a 	.word	0x0800ab2a
 8008ca8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1eb      	bne.n	8008c86 <__gethex+0x2ee>
 8008cae:	e7d8      	b.n	8008c62 <__gethex+0x2ca>
 8008cb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1d5      	bne.n	8008c62 <__gethex+0x2ca>
 8008cb6:	e7e6      	b.n	8008c86 <__gethex+0x2ee>
 8008cb8:	1e6f      	subs	r7, r5, #1
 8008cba:	f1ba 0f00 	cmp.w	sl, #0
 8008cbe:	d131      	bne.n	8008d24 <__gethex+0x38c>
 8008cc0:	b127      	cbz	r7, 8008ccc <__gethex+0x334>
 8008cc2:	4639      	mov	r1, r7
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	f000 fe1b 	bl	8009900 <__any_on>
 8008cca:	4682      	mov	sl, r0
 8008ccc:	117b      	asrs	r3, r7, #5
 8008cce:	2101      	movs	r1, #1
 8008cd0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008cd4:	f007 071f 	and.w	r7, r7, #31
 8008cd8:	fa01 f707 	lsl.w	r7, r1, r7
 8008cdc:	421f      	tst	r7, r3
 8008cde:	4629      	mov	r1, r5
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	bf18      	it	ne
 8008ce4:	f04a 0a02 	orrne.w	sl, sl, #2
 8008ce8:	1b76      	subs	r6, r6, r5
 8008cea:	f7ff fded 	bl	80088c8 <rshift>
 8008cee:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008cf2:	2702      	movs	r7, #2
 8008cf4:	f1ba 0f00 	cmp.w	sl, #0
 8008cf8:	d048      	beq.n	8008d8c <__gethex+0x3f4>
 8008cfa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008cfe:	2b02      	cmp	r3, #2
 8008d00:	d015      	beq.n	8008d2e <__gethex+0x396>
 8008d02:	2b03      	cmp	r3, #3
 8008d04:	d017      	beq.n	8008d36 <__gethex+0x39e>
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d109      	bne.n	8008d1e <__gethex+0x386>
 8008d0a:	f01a 0f02 	tst.w	sl, #2
 8008d0e:	d006      	beq.n	8008d1e <__gethex+0x386>
 8008d10:	f8d9 0000 	ldr.w	r0, [r9]
 8008d14:	ea4a 0a00 	orr.w	sl, sl, r0
 8008d18:	f01a 0f01 	tst.w	sl, #1
 8008d1c:	d10e      	bne.n	8008d3c <__gethex+0x3a4>
 8008d1e:	f047 0710 	orr.w	r7, r7, #16
 8008d22:	e033      	b.n	8008d8c <__gethex+0x3f4>
 8008d24:	f04f 0a01 	mov.w	sl, #1
 8008d28:	e7d0      	b.n	8008ccc <__gethex+0x334>
 8008d2a:	2701      	movs	r7, #1
 8008d2c:	e7e2      	b.n	8008cf4 <__gethex+0x35c>
 8008d2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d30:	f1c3 0301 	rsb	r3, r3, #1
 8008d34:	9315      	str	r3, [sp, #84]	; 0x54
 8008d36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d0f0      	beq.n	8008d1e <__gethex+0x386>
 8008d3c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008d40:	f104 0314 	add.w	r3, r4, #20
 8008d44:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008d48:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008d4c:	f04f 0c00 	mov.w	ip, #0
 8008d50:	4618      	mov	r0, r3
 8008d52:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d56:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008d5a:	d01c      	beq.n	8008d96 <__gethex+0x3fe>
 8008d5c:	3201      	adds	r2, #1
 8008d5e:	6002      	str	r2, [r0, #0]
 8008d60:	2f02      	cmp	r7, #2
 8008d62:	f104 0314 	add.w	r3, r4, #20
 8008d66:	d13f      	bne.n	8008de8 <__gethex+0x450>
 8008d68:	f8d8 2000 	ldr.w	r2, [r8]
 8008d6c:	3a01      	subs	r2, #1
 8008d6e:	42b2      	cmp	r2, r6
 8008d70:	d10a      	bne.n	8008d88 <__gethex+0x3f0>
 8008d72:	1171      	asrs	r1, r6, #5
 8008d74:	2201      	movs	r2, #1
 8008d76:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d7a:	f006 061f 	and.w	r6, r6, #31
 8008d7e:	fa02 f606 	lsl.w	r6, r2, r6
 8008d82:	421e      	tst	r6, r3
 8008d84:	bf18      	it	ne
 8008d86:	4617      	movne	r7, r2
 8008d88:	f047 0720 	orr.w	r7, r7, #32
 8008d8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d8e:	601c      	str	r4, [r3, #0]
 8008d90:	9b04      	ldr	r3, [sp, #16]
 8008d92:	601d      	str	r5, [r3, #0]
 8008d94:	e695      	b.n	8008ac2 <__gethex+0x12a>
 8008d96:	4299      	cmp	r1, r3
 8008d98:	f843 cc04 	str.w	ip, [r3, #-4]
 8008d9c:	d8d8      	bhi.n	8008d50 <__gethex+0x3b8>
 8008d9e:	68a3      	ldr	r3, [r4, #8]
 8008da0:	459b      	cmp	fp, r3
 8008da2:	db19      	blt.n	8008dd8 <__gethex+0x440>
 8008da4:	6861      	ldr	r1, [r4, #4]
 8008da6:	ee18 0a10 	vmov	r0, s16
 8008daa:	3101      	adds	r1, #1
 8008dac:	f000 f90e 	bl	8008fcc <_Balloc>
 8008db0:	4681      	mov	r9, r0
 8008db2:	b918      	cbnz	r0, 8008dbc <__gethex+0x424>
 8008db4:	4b1a      	ldr	r3, [pc, #104]	; (8008e20 <__gethex+0x488>)
 8008db6:	4602      	mov	r2, r0
 8008db8:	2184      	movs	r1, #132	; 0x84
 8008dba:	e6a8      	b.n	8008b0e <__gethex+0x176>
 8008dbc:	6922      	ldr	r2, [r4, #16]
 8008dbe:	3202      	adds	r2, #2
 8008dc0:	f104 010c 	add.w	r1, r4, #12
 8008dc4:	0092      	lsls	r2, r2, #2
 8008dc6:	300c      	adds	r0, #12
 8008dc8:	f7fe fe8e 	bl	8007ae8 <memcpy>
 8008dcc:	4621      	mov	r1, r4
 8008dce:	ee18 0a10 	vmov	r0, s16
 8008dd2:	f000 f93b 	bl	800904c <_Bfree>
 8008dd6:	464c      	mov	r4, r9
 8008dd8:	6923      	ldr	r3, [r4, #16]
 8008dda:	1c5a      	adds	r2, r3, #1
 8008ddc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008de0:	6122      	str	r2, [r4, #16]
 8008de2:	2201      	movs	r2, #1
 8008de4:	615a      	str	r2, [r3, #20]
 8008de6:	e7bb      	b.n	8008d60 <__gethex+0x3c8>
 8008de8:	6922      	ldr	r2, [r4, #16]
 8008dea:	455a      	cmp	r2, fp
 8008dec:	dd0b      	ble.n	8008e06 <__gethex+0x46e>
 8008dee:	2101      	movs	r1, #1
 8008df0:	4620      	mov	r0, r4
 8008df2:	f7ff fd69 	bl	80088c8 <rshift>
 8008df6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008dfa:	3501      	adds	r5, #1
 8008dfc:	42ab      	cmp	r3, r5
 8008dfe:	f6ff aed0 	blt.w	8008ba2 <__gethex+0x20a>
 8008e02:	2701      	movs	r7, #1
 8008e04:	e7c0      	b.n	8008d88 <__gethex+0x3f0>
 8008e06:	f016 061f 	ands.w	r6, r6, #31
 8008e0a:	d0fa      	beq.n	8008e02 <__gethex+0x46a>
 8008e0c:	449a      	add	sl, r3
 8008e0e:	f1c6 0620 	rsb	r6, r6, #32
 8008e12:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008e16:	f000 f9cf 	bl	80091b8 <__hi0bits>
 8008e1a:	42b0      	cmp	r0, r6
 8008e1c:	dbe7      	blt.n	8008dee <__gethex+0x456>
 8008e1e:	e7f0      	b.n	8008e02 <__gethex+0x46a>
 8008e20:	0800ab19 	.word	0x0800ab19

08008e24 <L_shift>:
 8008e24:	f1c2 0208 	rsb	r2, r2, #8
 8008e28:	0092      	lsls	r2, r2, #2
 8008e2a:	b570      	push	{r4, r5, r6, lr}
 8008e2c:	f1c2 0620 	rsb	r6, r2, #32
 8008e30:	6843      	ldr	r3, [r0, #4]
 8008e32:	6804      	ldr	r4, [r0, #0]
 8008e34:	fa03 f506 	lsl.w	r5, r3, r6
 8008e38:	432c      	orrs	r4, r5
 8008e3a:	40d3      	lsrs	r3, r2
 8008e3c:	6004      	str	r4, [r0, #0]
 8008e3e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008e42:	4288      	cmp	r0, r1
 8008e44:	d3f4      	bcc.n	8008e30 <L_shift+0xc>
 8008e46:	bd70      	pop	{r4, r5, r6, pc}

08008e48 <__match>:
 8008e48:	b530      	push	{r4, r5, lr}
 8008e4a:	6803      	ldr	r3, [r0, #0]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e52:	b914      	cbnz	r4, 8008e5a <__match+0x12>
 8008e54:	6003      	str	r3, [r0, #0]
 8008e56:	2001      	movs	r0, #1
 8008e58:	bd30      	pop	{r4, r5, pc}
 8008e5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e5e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008e62:	2d19      	cmp	r5, #25
 8008e64:	bf98      	it	ls
 8008e66:	3220      	addls	r2, #32
 8008e68:	42a2      	cmp	r2, r4
 8008e6a:	d0f0      	beq.n	8008e4e <__match+0x6>
 8008e6c:	2000      	movs	r0, #0
 8008e6e:	e7f3      	b.n	8008e58 <__match+0x10>

08008e70 <__hexnan>:
 8008e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e74:	680b      	ldr	r3, [r1, #0]
 8008e76:	6801      	ldr	r1, [r0, #0]
 8008e78:	115e      	asrs	r6, r3, #5
 8008e7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008e7e:	f013 031f 	ands.w	r3, r3, #31
 8008e82:	b087      	sub	sp, #28
 8008e84:	bf18      	it	ne
 8008e86:	3604      	addne	r6, #4
 8008e88:	2500      	movs	r5, #0
 8008e8a:	1f37      	subs	r7, r6, #4
 8008e8c:	4682      	mov	sl, r0
 8008e8e:	4690      	mov	r8, r2
 8008e90:	9301      	str	r3, [sp, #4]
 8008e92:	f846 5c04 	str.w	r5, [r6, #-4]
 8008e96:	46b9      	mov	r9, r7
 8008e98:	463c      	mov	r4, r7
 8008e9a:	9502      	str	r5, [sp, #8]
 8008e9c:	46ab      	mov	fp, r5
 8008e9e:	784a      	ldrb	r2, [r1, #1]
 8008ea0:	1c4b      	adds	r3, r1, #1
 8008ea2:	9303      	str	r3, [sp, #12]
 8008ea4:	b342      	cbz	r2, 8008ef8 <__hexnan+0x88>
 8008ea6:	4610      	mov	r0, r2
 8008ea8:	9105      	str	r1, [sp, #20]
 8008eaa:	9204      	str	r2, [sp, #16]
 8008eac:	f7ff fd5e 	bl	800896c <__hexdig_fun>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	d14f      	bne.n	8008f54 <__hexnan+0xe4>
 8008eb4:	9a04      	ldr	r2, [sp, #16]
 8008eb6:	9905      	ldr	r1, [sp, #20]
 8008eb8:	2a20      	cmp	r2, #32
 8008eba:	d818      	bhi.n	8008eee <__hexnan+0x7e>
 8008ebc:	9b02      	ldr	r3, [sp, #8]
 8008ebe:	459b      	cmp	fp, r3
 8008ec0:	dd13      	ble.n	8008eea <__hexnan+0x7a>
 8008ec2:	454c      	cmp	r4, r9
 8008ec4:	d206      	bcs.n	8008ed4 <__hexnan+0x64>
 8008ec6:	2d07      	cmp	r5, #7
 8008ec8:	dc04      	bgt.n	8008ed4 <__hexnan+0x64>
 8008eca:	462a      	mov	r2, r5
 8008ecc:	4649      	mov	r1, r9
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f7ff ffa8 	bl	8008e24 <L_shift>
 8008ed4:	4544      	cmp	r4, r8
 8008ed6:	d950      	bls.n	8008f7a <__hexnan+0x10a>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	f1a4 0904 	sub.w	r9, r4, #4
 8008ede:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ee2:	f8cd b008 	str.w	fp, [sp, #8]
 8008ee6:	464c      	mov	r4, r9
 8008ee8:	461d      	mov	r5, r3
 8008eea:	9903      	ldr	r1, [sp, #12]
 8008eec:	e7d7      	b.n	8008e9e <__hexnan+0x2e>
 8008eee:	2a29      	cmp	r2, #41	; 0x29
 8008ef0:	d156      	bne.n	8008fa0 <__hexnan+0x130>
 8008ef2:	3102      	adds	r1, #2
 8008ef4:	f8ca 1000 	str.w	r1, [sl]
 8008ef8:	f1bb 0f00 	cmp.w	fp, #0
 8008efc:	d050      	beq.n	8008fa0 <__hexnan+0x130>
 8008efe:	454c      	cmp	r4, r9
 8008f00:	d206      	bcs.n	8008f10 <__hexnan+0xa0>
 8008f02:	2d07      	cmp	r5, #7
 8008f04:	dc04      	bgt.n	8008f10 <__hexnan+0xa0>
 8008f06:	462a      	mov	r2, r5
 8008f08:	4649      	mov	r1, r9
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	f7ff ff8a 	bl	8008e24 <L_shift>
 8008f10:	4544      	cmp	r4, r8
 8008f12:	d934      	bls.n	8008f7e <__hexnan+0x10e>
 8008f14:	f1a8 0204 	sub.w	r2, r8, #4
 8008f18:	4623      	mov	r3, r4
 8008f1a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008f1e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008f22:	429f      	cmp	r7, r3
 8008f24:	d2f9      	bcs.n	8008f1a <__hexnan+0xaa>
 8008f26:	1b3b      	subs	r3, r7, r4
 8008f28:	f023 0303 	bic.w	r3, r3, #3
 8008f2c:	3304      	adds	r3, #4
 8008f2e:	3401      	adds	r4, #1
 8008f30:	3e03      	subs	r6, #3
 8008f32:	42b4      	cmp	r4, r6
 8008f34:	bf88      	it	hi
 8008f36:	2304      	movhi	r3, #4
 8008f38:	4443      	add	r3, r8
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f843 2b04 	str.w	r2, [r3], #4
 8008f40:	429f      	cmp	r7, r3
 8008f42:	d2fb      	bcs.n	8008f3c <__hexnan+0xcc>
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	b91b      	cbnz	r3, 8008f50 <__hexnan+0xe0>
 8008f48:	4547      	cmp	r7, r8
 8008f4a:	d127      	bne.n	8008f9c <__hexnan+0x12c>
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	603b      	str	r3, [r7, #0]
 8008f50:	2005      	movs	r0, #5
 8008f52:	e026      	b.n	8008fa2 <__hexnan+0x132>
 8008f54:	3501      	adds	r5, #1
 8008f56:	2d08      	cmp	r5, #8
 8008f58:	f10b 0b01 	add.w	fp, fp, #1
 8008f5c:	dd06      	ble.n	8008f6c <__hexnan+0xfc>
 8008f5e:	4544      	cmp	r4, r8
 8008f60:	d9c3      	bls.n	8008eea <__hexnan+0x7a>
 8008f62:	2300      	movs	r3, #0
 8008f64:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f68:	2501      	movs	r5, #1
 8008f6a:	3c04      	subs	r4, #4
 8008f6c:	6822      	ldr	r2, [r4, #0]
 8008f6e:	f000 000f 	and.w	r0, r0, #15
 8008f72:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008f76:	6022      	str	r2, [r4, #0]
 8008f78:	e7b7      	b.n	8008eea <__hexnan+0x7a>
 8008f7a:	2508      	movs	r5, #8
 8008f7c:	e7b5      	b.n	8008eea <__hexnan+0x7a>
 8008f7e:	9b01      	ldr	r3, [sp, #4]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d0df      	beq.n	8008f44 <__hexnan+0xd4>
 8008f84:	f04f 32ff 	mov.w	r2, #4294967295
 8008f88:	f1c3 0320 	rsb	r3, r3, #32
 8008f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f90:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008f94:	401a      	ands	r2, r3
 8008f96:	f846 2c04 	str.w	r2, [r6, #-4]
 8008f9a:	e7d3      	b.n	8008f44 <__hexnan+0xd4>
 8008f9c:	3f04      	subs	r7, #4
 8008f9e:	e7d1      	b.n	8008f44 <__hexnan+0xd4>
 8008fa0:	2004      	movs	r0, #4
 8008fa2:	b007      	add	sp, #28
 8008fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008fa8 <__ascii_mbtowc>:
 8008fa8:	b082      	sub	sp, #8
 8008faa:	b901      	cbnz	r1, 8008fae <__ascii_mbtowc+0x6>
 8008fac:	a901      	add	r1, sp, #4
 8008fae:	b142      	cbz	r2, 8008fc2 <__ascii_mbtowc+0x1a>
 8008fb0:	b14b      	cbz	r3, 8008fc6 <__ascii_mbtowc+0x1e>
 8008fb2:	7813      	ldrb	r3, [r2, #0]
 8008fb4:	600b      	str	r3, [r1, #0]
 8008fb6:	7812      	ldrb	r2, [r2, #0]
 8008fb8:	1e10      	subs	r0, r2, #0
 8008fba:	bf18      	it	ne
 8008fbc:	2001      	movne	r0, #1
 8008fbe:	b002      	add	sp, #8
 8008fc0:	4770      	bx	lr
 8008fc2:	4610      	mov	r0, r2
 8008fc4:	e7fb      	b.n	8008fbe <__ascii_mbtowc+0x16>
 8008fc6:	f06f 0001 	mvn.w	r0, #1
 8008fca:	e7f8      	b.n	8008fbe <__ascii_mbtowc+0x16>

08008fcc <_Balloc>:
 8008fcc:	b570      	push	{r4, r5, r6, lr}
 8008fce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fd0:	4604      	mov	r4, r0
 8008fd2:	460d      	mov	r5, r1
 8008fd4:	b976      	cbnz	r6, 8008ff4 <_Balloc+0x28>
 8008fd6:	2010      	movs	r0, #16
 8008fd8:	f000 fd86 	bl	8009ae8 <malloc>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	6260      	str	r0, [r4, #36]	; 0x24
 8008fe0:	b920      	cbnz	r0, 8008fec <_Balloc+0x20>
 8008fe2:	4b18      	ldr	r3, [pc, #96]	; (8009044 <_Balloc+0x78>)
 8008fe4:	4818      	ldr	r0, [pc, #96]	; (8009048 <_Balloc+0x7c>)
 8008fe6:	2166      	movs	r1, #102	; 0x66
 8008fe8:	f000 fd4e 	bl	8009a88 <__assert_func>
 8008fec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ff0:	6006      	str	r6, [r0, #0]
 8008ff2:	60c6      	str	r6, [r0, #12]
 8008ff4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008ff6:	68f3      	ldr	r3, [r6, #12]
 8008ff8:	b183      	cbz	r3, 800901c <_Balloc+0x50>
 8008ffa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009002:	b9b8      	cbnz	r0, 8009034 <_Balloc+0x68>
 8009004:	2101      	movs	r1, #1
 8009006:	fa01 f605 	lsl.w	r6, r1, r5
 800900a:	1d72      	adds	r2, r6, #5
 800900c:	0092      	lsls	r2, r2, #2
 800900e:	4620      	mov	r0, r4
 8009010:	f000 fc97 	bl	8009942 <_calloc_r>
 8009014:	b160      	cbz	r0, 8009030 <_Balloc+0x64>
 8009016:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800901a:	e00e      	b.n	800903a <_Balloc+0x6e>
 800901c:	2221      	movs	r2, #33	; 0x21
 800901e:	2104      	movs	r1, #4
 8009020:	4620      	mov	r0, r4
 8009022:	f000 fc8e 	bl	8009942 <_calloc_r>
 8009026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009028:	60f0      	str	r0, [r6, #12]
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1e4      	bne.n	8008ffa <_Balloc+0x2e>
 8009030:	2000      	movs	r0, #0
 8009032:	bd70      	pop	{r4, r5, r6, pc}
 8009034:	6802      	ldr	r2, [r0, #0]
 8009036:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800903a:	2300      	movs	r3, #0
 800903c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009040:	e7f7      	b.n	8009032 <_Balloc+0x66>
 8009042:	bf00      	nop
 8009044:	0800aba8 	.word	0x0800aba8
 8009048:	0800abbf 	.word	0x0800abbf

0800904c <_Bfree>:
 800904c:	b570      	push	{r4, r5, r6, lr}
 800904e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009050:	4605      	mov	r5, r0
 8009052:	460c      	mov	r4, r1
 8009054:	b976      	cbnz	r6, 8009074 <_Bfree+0x28>
 8009056:	2010      	movs	r0, #16
 8009058:	f000 fd46 	bl	8009ae8 <malloc>
 800905c:	4602      	mov	r2, r0
 800905e:	6268      	str	r0, [r5, #36]	; 0x24
 8009060:	b920      	cbnz	r0, 800906c <_Bfree+0x20>
 8009062:	4b09      	ldr	r3, [pc, #36]	; (8009088 <_Bfree+0x3c>)
 8009064:	4809      	ldr	r0, [pc, #36]	; (800908c <_Bfree+0x40>)
 8009066:	218a      	movs	r1, #138	; 0x8a
 8009068:	f000 fd0e 	bl	8009a88 <__assert_func>
 800906c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009070:	6006      	str	r6, [r0, #0]
 8009072:	60c6      	str	r6, [r0, #12]
 8009074:	b13c      	cbz	r4, 8009086 <_Bfree+0x3a>
 8009076:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009078:	6862      	ldr	r2, [r4, #4]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009080:	6021      	str	r1, [r4, #0]
 8009082:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009086:	bd70      	pop	{r4, r5, r6, pc}
 8009088:	0800aba8 	.word	0x0800aba8
 800908c:	0800abbf 	.word	0x0800abbf

08009090 <__multadd>:
 8009090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009094:	690e      	ldr	r6, [r1, #16]
 8009096:	4607      	mov	r7, r0
 8009098:	4698      	mov	r8, r3
 800909a:	460c      	mov	r4, r1
 800909c:	f101 0014 	add.w	r0, r1, #20
 80090a0:	2300      	movs	r3, #0
 80090a2:	6805      	ldr	r5, [r0, #0]
 80090a4:	b2a9      	uxth	r1, r5
 80090a6:	fb02 8101 	mla	r1, r2, r1, r8
 80090aa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80090ae:	0c2d      	lsrs	r5, r5, #16
 80090b0:	fb02 c505 	mla	r5, r2, r5, ip
 80090b4:	b289      	uxth	r1, r1
 80090b6:	3301      	adds	r3, #1
 80090b8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80090bc:	429e      	cmp	r6, r3
 80090be:	f840 1b04 	str.w	r1, [r0], #4
 80090c2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80090c6:	dcec      	bgt.n	80090a2 <__multadd+0x12>
 80090c8:	f1b8 0f00 	cmp.w	r8, #0
 80090cc:	d022      	beq.n	8009114 <__multadd+0x84>
 80090ce:	68a3      	ldr	r3, [r4, #8]
 80090d0:	42b3      	cmp	r3, r6
 80090d2:	dc19      	bgt.n	8009108 <__multadd+0x78>
 80090d4:	6861      	ldr	r1, [r4, #4]
 80090d6:	4638      	mov	r0, r7
 80090d8:	3101      	adds	r1, #1
 80090da:	f7ff ff77 	bl	8008fcc <_Balloc>
 80090de:	4605      	mov	r5, r0
 80090e0:	b928      	cbnz	r0, 80090ee <__multadd+0x5e>
 80090e2:	4602      	mov	r2, r0
 80090e4:	4b0d      	ldr	r3, [pc, #52]	; (800911c <__multadd+0x8c>)
 80090e6:	480e      	ldr	r0, [pc, #56]	; (8009120 <__multadd+0x90>)
 80090e8:	21b5      	movs	r1, #181	; 0xb5
 80090ea:	f000 fccd 	bl	8009a88 <__assert_func>
 80090ee:	6922      	ldr	r2, [r4, #16]
 80090f0:	3202      	adds	r2, #2
 80090f2:	f104 010c 	add.w	r1, r4, #12
 80090f6:	0092      	lsls	r2, r2, #2
 80090f8:	300c      	adds	r0, #12
 80090fa:	f7fe fcf5 	bl	8007ae8 <memcpy>
 80090fe:	4621      	mov	r1, r4
 8009100:	4638      	mov	r0, r7
 8009102:	f7ff ffa3 	bl	800904c <_Bfree>
 8009106:	462c      	mov	r4, r5
 8009108:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800910c:	3601      	adds	r6, #1
 800910e:	f8c3 8014 	str.w	r8, [r3, #20]
 8009112:	6126      	str	r6, [r4, #16]
 8009114:	4620      	mov	r0, r4
 8009116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800911a:	bf00      	nop
 800911c:	0800ab19 	.word	0x0800ab19
 8009120:	0800abbf 	.word	0x0800abbf

08009124 <__s2b>:
 8009124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009128:	460c      	mov	r4, r1
 800912a:	4615      	mov	r5, r2
 800912c:	461f      	mov	r7, r3
 800912e:	2209      	movs	r2, #9
 8009130:	3308      	adds	r3, #8
 8009132:	4606      	mov	r6, r0
 8009134:	fb93 f3f2 	sdiv	r3, r3, r2
 8009138:	2100      	movs	r1, #0
 800913a:	2201      	movs	r2, #1
 800913c:	429a      	cmp	r2, r3
 800913e:	db09      	blt.n	8009154 <__s2b+0x30>
 8009140:	4630      	mov	r0, r6
 8009142:	f7ff ff43 	bl	8008fcc <_Balloc>
 8009146:	b940      	cbnz	r0, 800915a <__s2b+0x36>
 8009148:	4602      	mov	r2, r0
 800914a:	4b19      	ldr	r3, [pc, #100]	; (80091b0 <__s2b+0x8c>)
 800914c:	4819      	ldr	r0, [pc, #100]	; (80091b4 <__s2b+0x90>)
 800914e:	21ce      	movs	r1, #206	; 0xce
 8009150:	f000 fc9a 	bl	8009a88 <__assert_func>
 8009154:	0052      	lsls	r2, r2, #1
 8009156:	3101      	adds	r1, #1
 8009158:	e7f0      	b.n	800913c <__s2b+0x18>
 800915a:	9b08      	ldr	r3, [sp, #32]
 800915c:	6143      	str	r3, [r0, #20]
 800915e:	2d09      	cmp	r5, #9
 8009160:	f04f 0301 	mov.w	r3, #1
 8009164:	6103      	str	r3, [r0, #16]
 8009166:	dd16      	ble.n	8009196 <__s2b+0x72>
 8009168:	f104 0909 	add.w	r9, r4, #9
 800916c:	46c8      	mov	r8, r9
 800916e:	442c      	add	r4, r5
 8009170:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009174:	4601      	mov	r1, r0
 8009176:	3b30      	subs	r3, #48	; 0x30
 8009178:	220a      	movs	r2, #10
 800917a:	4630      	mov	r0, r6
 800917c:	f7ff ff88 	bl	8009090 <__multadd>
 8009180:	45a0      	cmp	r8, r4
 8009182:	d1f5      	bne.n	8009170 <__s2b+0x4c>
 8009184:	f1a5 0408 	sub.w	r4, r5, #8
 8009188:	444c      	add	r4, r9
 800918a:	1b2d      	subs	r5, r5, r4
 800918c:	1963      	adds	r3, r4, r5
 800918e:	42bb      	cmp	r3, r7
 8009190:	db04      	blt.n	800919c <__s2b+0x78>
 8009192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009196:	340a      	adds	r4, #10
 8009198:	2509      	movs	r5, #9
 800919a:	e7f6      	b.n	800918a <__s2b+0x66>
 800919c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80091a0:	4601      	mov	r1, r0
 80091a2:	3b30      	subs	r3, #48	; 0x30
 80091a4:	220a      	movs	r2, #10
 80091a6:	4630      	mov	r0, r6
 80091a8:	f7ff ff72 	bl	8009090 <__multadd>
 80091ac:	e7ee      	b.n	800918c <__s2b+0x68>
 80091ae:	bf00      	nop
 80091b0:	0800ab19 	.word	0x0800ab19
 80091b4:	0800abbf 	.word	0x0800abbf

080091b8 <__hi0bits>:
 80091b8:	0c03      	lsrs	r3, r0, #16
 80091ba:	041b      	lsls	r3, r3, #16
 80091bc:	b9d3      	cbnz	r3, 80091f4 <__hi0bits+0x3c>
 80091be:	0400      	lsls	r0, r0, #16
 80091c0:	2310      	movs	r3, #16
 80091c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80091c6:	bf04      	itt	eq
 80091c8:	0200      	lsleq	r0, r0, #8
 80091ca:	3308      	addeq	r3, #8
 80091cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80091d0:	bf04      	itt	eq
 80091d2:	0100      	lsleq	r0, r0, #4
 80091d4:	3304      	addeq	r3, #4
 80091d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80091da:	bf04      	itt	eq
 80091dc:	0080      	lsleq	r0, r0, #2
 80091de:	3302      	addeq	r3, #2
 80091e0:	2800      	cmp	r0, #0
 80091e2:	db05      	blt.n	80091f0 <__hi0bits+0x38>
 80091e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80091e8:	f103 0301 	add.w	r3, r3, #1
 80091ec:	bf08      	it	eq
 80091ee:	2320      	moveq	r3, #32
 80091f0:	4618      	mov	r0, r3
 80091f2:	4770      	bx	lr
 80091f4:	2300      	movs	r3, #0
 80091f6:	e7e4      	b.n	80091c2 <__hi0bits+0xa>

080091f8 <__lo0bits>:
 80091f8:	6803      	ldr	r3, [r0, #0]
 80091fa:	f013 0207 	ands.w	r2, r3, #7
 80091fe:	4601      	mov	r1, r0
 8009200:	d00b      	beq.n	800921a <__lo0bits+0x22>
 8009202:	07da      	lsls	r2, r3, #31
 8009204:	d424      	bmi.n	8009250 <__lo0bits+0x58>
 8009206:	0798      	lsls	r0, r3, #30
 8009208:	bf49      	itett	mi
 800920a:	085b      	lsrmi	r3, r3, #1
 800920c:	089b      	lsrpl	r3, r3, #2
 800920e:	2001      	movmi	r0, #1
 8009210:	600b      	strmi	r3, [r1, #0]
 8009212:	bf5c      	itt	pl
 8009214:	600b      	strpl	r3, [r1, #0]
 8009216:	2002      	movpl	r0, #2
 8009218:	4770      	bx	lr
 800921a:	b298      	uxth	r0, r3
 800921c:	b9b0      	cbnz	r0, 800924c <__lo0bits+0x54>
 800921e:	0c1b      	lsrs	r3, r3, #16
 8009220:	2010      	movs	r0, #16
 8009222:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009226:	bf04      	itt	eq
 8009228:	0a1b      	lsreq	r3, r3, #8
 800922a:	3008      	addeq	r0, #8
 800922c:	071a      	lsls	r2, r3, #28
 800922e:	bf04      	itt	eq
 8009230:	091b      	lsreq	r3, r3, #4
 8009232:	3004      	addeq	r0, #4
 8009234:	079a      	lsls	r2, r3, #30
 8009236:	bf04      	itt	eq
 8009238:	089b      	lsreq	r3, r3, #2
 800923a:	3002      	addeq	r0, #2
 800923c:	07da      	lsls	r2, r3, #31
 800923e:	d403      	bmi.n	8009248 <__lo0bits+0x50>
 8009240:	085b      	lsrs	r3, r3, #1
 8009242:	f100 0001 	add.w	r0, r0, #1
 8009246:	d005      	beq.n	8009254 <__lo0bits+0x5c>
 8009248:	600b      	str	r3, [r1, #0]
 800924a:	4770      	bx	lr
 800924c:	4610      	mov	r0, r2
 800924e:	e7e8      	b.n	8009222 <__lo0bits+0x2a>
 8009250:	2000      	movs	r0, #0
 8009252:	4770      	bx	lr
 8009254:	2020      	movs	r0, #32
 8009256:	4770      	bx	lr

08009258 <__i2b>:
 8009258:	b510      	push	{r4, lr}
 800925a:	460c      	mov	r4, r1
 800925c:	2101      	movs	r1, #1
 800925e:	f7ff feb5 	bl	8008fcc <_Balloc>
 8009262:	4602      	mov	r2, r0
 8009264:	b928      	cbnz	r0, 8009272 <__i2b+0x1a>
 8009266:	4b05      	ldr	r3, [pc, #20]	; (800927c <__i2b+0x24>)
 8009268:	4805      	ldr	r0, [pc, #20]	; (8009280 <__i2b+0x28>)
 800926a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800926e:	f000 fc0b 	bl	8009a88 <__assert_func>
 8009272:	2301      	movs	r3, #1
 8009274:	6144      	str	r4, [r0, #20]
 8009276:	6103      	str	r3, [r0, #16]
 8009278:	bd10      	pop	{r4, pc}
 800927a:	bf00      	nop
 800927c:	0800ab19 	.word	0x0800ab19
 8009280:	0800abbf 	.word	0x0800abbf

08009284 <__multiply>:
 8009284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009288:	4614      	mov	r4, r2
 800928a:	690a      	ldr	r2, [r1, #16]
 800928c:	6923      	ldr	r3, [r4, #16]
 800928e:	429a      	cmp	r2, r3
 8009290:	bfb8      	it	lt
 8009292:	460b      	movlt	r3, r1
 8009294:	460d      	mov	r5, r1
 8009296:	bfbc      	itt	lt
 8009298:	4625      	movlt	r5, r4
 800929a:	461c      	movlt	r4, r3
 800929c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80092a0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80092a4:	68ab      	ldr	r3, [r5, #8]
 80092a6:	6869      	ldr	r1, [r5, #4]
 80092a8:	eb0a 0709 	add.w	r7, sl, r9
 80092ac:	42bb      	cmp	r3, r7
 80092ae:	b085      	sub	sp, #20
 80092b0:	bfb8      	it	lt
 80092b2:	3101      	addlt	r1, #1
 80092b4:	f7ff fe8a 	bl	8008fcc <_Balloc>
 80092b8:	b930      	cbnz	r0, 80092c8 <__multiply+0x44>
 80092ba:	4602      	mov	r2, r0
 80092bc:	4b42      	ldr	r3, [pc, #264]	; (80093c8 <__multiply+0x144>)
 80092be:	4843      	ldr	r0, [pc, #268]	; (80093cc <__multiply+0x148>)
 80092c0:	f240 115d 	movw	r1, #349	; 0x15d
 80092c4:	f000 fbe0 	bl	8009a88 <__assert_func>
 80092c8:	f100 0614 	add.w	r6, r0, #20
 80092cc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80092d0:	4633      	mov	r3, r6
 80092d2:	2200      	movs	r2, #0
 80092d4:	4543      	cmp	r3, r8
 80092d6:	d31e      	bcc.n	8009316 <__multiply+0x92>
 80092d8:	f105 0c14 	add.w	ip, r5, #20
 80092dc:	f104 0314 	add.w	r3, r4, #20
 80092e0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80092e4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80092e8:	9202      	str	r2, [sp, #8]
 80092ea:	ebac 0205 	sub.w	r2, ip, r5
 80092ee:	3a15      	subs	r2, #21
 80092f0:	f022 0203 	bic.w	r2, r2, #3
 80092f4:	3204      	adds	r2, #4
 80092f6:	f105 0115 	add.w	r1, r5, #21
 80092fa:	458c      	cmp	ip, r1
 80092fc:	bf38      	it	cc
 80092fe:	2204      	movcc	r2, #4
 8009300:	9201      	str	r2, [sp, #4]
 8009302:	9a02      	ldr	r2, [sp, #8]
 8009304:	9303      	str	r3, [sp, #12]
 8009306:	429a      	cmp	r2, r3
 8009308:	d808      	bhi.n	800931c <__multiply+0x98>
 800930a:	2f00      	cmp	r7, #0
 800930c:	dc55      	bgt.n	80093ba <__multiply+0x136>
 800930e:	6107      	str	r7, [r0, #16]
 8009310:	b005      	add	sp, #20
 8009312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009316:	f843 2b04 	str.w	r2, [r3], #4
 800931a:	e7db      	b.n	80092d4 <__multiply+0x50>
 800931c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009320:	f1ba 0f00 	cmp.w	sl, #0
 8009324:	d020      	beq.n	8009368 <__multiply+0xe4>
 8009326:	f105 0e14 	add.w	lr, r5, #20
 800932a:	46b1      	mov	r9, r6
 800932c:	2200      	movs	r2, #0
 800932e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009332:	f8d9 b000 	ldr.w	fp, [r9]
 8009336:	b2a1      	uxth	r1, r4
 8009338:	fa1f fb8b 	uxth.w	fp, fp
 800933c:	fb0a b101 	mla	r1, sl, r1, fp
 8009340:	4411      	add	r1, r2
 8009342:	f8d9 2000 	ldr.w	r2, [r9]
 8009346:	0c24      	lsrs	r4, r4, #16
 8009348:	0c12      	lsrs	r2, r2, #16
 800934a:	fb0a 2404 	mla	r4, sl, r4, r2
 800934e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009352:	b289      	uxth	r1, r1
 8009354:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009358:	45f4      	cmp	ip, lr
 800935a:	f849 1b04 	str.w	r1, [r9], #4
 800935e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009362:	d8e4      	bhi.n	800932e <__multiply+0xaa>
 8009364:	9901      	ldr	r1, [sp, #4]
 8009366:	5072      	str	r2, [r6, r1]
 8009368:	9a03      	ldr	r2, [sp, #12]
 800936a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800936e:	3304      	adds	r3, #4
 8009370:	f1b9 0f00 	cmp.w	r9, #0
 8009374:	d01f      	beq.n	80093b6 <__multiply+0x132>
 8009376:	6834      	ldr	r4, [r6, #0]
 8009378:	f105 0114 	add.w	r1, r5, #20
 800937c:	46b6      	mov	lr, r6
 800937e:	f04f 0a00 	mov.w	sl, #0
 8009382:	880a      	ldrh	r2, [r1, #0]
 8009384:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009388:	fb09 b202 	mla	r2, r9, r2, fp
 800938c:	4492      	add	sl, r2
 800938e:	b2a4      	uxth	r4, r4
 8009390:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009394:	f84e 4b04 	str.w	r4, [lr], #4
 8009398:	f851 4b04 	ldr.w	r4, [r1], #4
 800939c:	f8be 2000 	ldrh.w	r2, [lr]
 80093a0:	0c24      	lsrs	r4, r4, #16
 80093a2:	fb09 2404 	mla	r4, r9, r4, r2
 80093a6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80093aa:	458c      	cmp	ip, r1
 80093ac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80093b0:	d8e7      	bhi.n	8009382 <__multiply+0xfe>
 80093b2:	9a01      	ldr	r2, [sp, #4]
 80093b4:	50b4      	str	r4, [r6, r2]
 80093b6:	3604      	adds	r6, #4
 80093b8:	e7a3      	b.n	8009302 <__multiply+0x7e>
 80093ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1a5      	bne.n	800930e <__multiply+0x8a>
 80093c2:	3f01      	subs	r7, #1
 80093c4:	e7a1      	b.n	800930a <__multiply+0x86>
 80093c6:	bf00      	nop
 80093c8:	0800ab19 	.word	0x0800ab19
 80093cc:	0800abbf 	.word	0x0800abbf

080093d0 <__pow5mult>:
 80093d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093d4:	4615      	mov	r5, r2
 80093d6:	f012 0203 	ands.w	r2, r2, #3
 80093da:	4606      	mov	r6, r0
 80093dc:	460f      	mov	r7, r1
 80093de:	d007      	beq.n	80093f0 <__pow5mult+0x20>
 80093e0:	4c25      	ldr	r4, [pc, #148]	; (8009478 <__pow5mult+0xa8>)
 80093e2:	3a01      	subs	r2, #1
 80093e4:	2300      	movs	r3, #0
 80093e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80093ea:	f7ff fe51 	bl	8009090 <__multadd>
 80093ee:	4607      	mov	r7, r0
 80093f0:	10ad      	asrs	r5, r5, #2
 80093f2:	d03d      	beq.n	8009470 <__pow5mult+0xa0>
 80093f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80093f6:	b97c      	cbnz	r4, 8009418 <__pow5mult+0x48>
 80093f8:	2010      	movs	r0, #16
 80093fa:	f000 fb75 	bl	8009ae8 <malloc>
 80093fe:	4602      	mov	r2, r0
 8009400:	6270      	str	r0, [r6, #36]	; 0x24
 8009402:	b928      	cbnz	r0, 8009410 <__pow5mult+0x40>
 8009404:	4b1d      	ldr	r3, [pc, #116]	; (800947c <__pow5mult+0xac>)
 8009406:	481e      	ldr	r0, [pc, #120]	; (8009480 <__pow5mult+0xb0>)
 8009408:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800940c:	f000 fb3c 	bl	8009a88 <__assert_func>
 8009410:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009414:	6004      	str	r4, [r0, #0]
 8009416:	60c4      	str	r4, [r0, #12]
 8009418:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800941c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009420:	b94c      	cbnz	r4, 8009436 <__pow5mult+0x66>
 8009422:	f240 2171 	movw	r1, #625	; 0x271
 8009426:	4630      	mov	r0, r6
 8009428:	f7ff ff16 	bl	8009258 <__i2b>
 800942c:	2300      	movs	r3, #0
 800942e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009432:	4604      	mov	r4, r0
 8009434:	6003      	str	r3, [r0, #0]
 8009436:	f04f 0900 	mov.w	r9, #0
 800943a:	07eb      	lsls	r3, r5, #31
 800943c:	d50a      	bpl.n	8009454 <__pow5mult+0x84>
 800943e:	4639      	mov	r1, r7
 8009440:	4622      	mov	r2, r4
 8009442:	4630      	mov	r0, r6
 8009444:	f7ff ff1e 	bl	8009284 <__multiply>
 8009448:	4639      	mov	r1, r7
 800944a:	4680      	mov	r8, r0
 800944c:	4630      	mov	r0, r6
 800944e:	f7ff fdfd 	bl	800904c <_Bfree>
 8009452:	4647      	mov	r7, r8
 8009454:	106d      	asrs	r5, r5, #1
 8009456:	d00b      	beq.n	8009470 <__pow5mult+0xa0>
 8009458:	6820      	ldr	r0, [r4, #0]
 800945a:	b938      	cbnz	r0, 800946c <__pow5mult+0x9c>
 800945c:	4622      	mov	r2, r4
 800945e:	4621      	mov	r1, r4
 8009460:	4630      	mov	r0, r6
 8009462:	f7ff ff0f 	bl	8009284 <__multiply>
 8009466:	6020      	str	r0, [r4, #0]
 8009468:	f8c0 9000 	str.w	r9, [r0]
 800946c:	4604      	mov	r4, r0
 800946e:	e7e4      	b.n	800943a <__pow5mult+0x6a>
 8009470:	4638      	mov	r0, r7
 8009472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009476:	bf00      	nop
 8009478:	0800ad10 	.word	0x0800ad10
 800947c:	0800aba8 	.word	0x0800aba8
 8009480:	0800abbf 	.word	0x0800abbf

08009484 <__lshift>:
 8009484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009488:	460c      	mov	r4, r1
 800948a:	6849      	ldr	r1, [r1, #4]
 800948c:	6923      	ldr	r3, [r4, #16]
 800948e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009492:	68a3      	ldr	r3, [r4, #8]
 8009494:	4607      	mov	r7, r0
 8009496:	4691      	mov	r9, r2
 8009498:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800949c:	f108 0601 	add.w	r6, r8, #1
 80094a0:	42b3      	cmp	r3, r6
 80094a2:	db0b      	blt.n	80094bc <__lshift+0x38>
 80094a4:	4638      	mov	r0, r7
 80094a6:	f7ff fd91 	bl	8008fcc <_Balloc>
 80094aa:	4605      	mov	r5, r0
 80094ac:	b948      	cbnz	r0, 80094c2 <__lshift+0x3e>
 80094ae:	4602      	mov	r2, r0
 80094b0:	4b28      	ldr	r3, [pc, #160]	; (8009554 <__lshift+0xd0>)
 80094b2:	4829      	ldr	r0, [pc, #164]	; (8009558 <__lshift+0xd4>)
 80094b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80094b8:	f000 fae6 	bl	8009a88 <__assert_func>
 80094bc:	3101      	adds	r1, #1
 80094be:	005b      	lsls	r3, r3, #1
 80094c0:	e7ee      	b.n	80094a0 <__lshift+0x1c>
 80094c2:	2300      	movs	r3, #0
 80094c4:	f100 0114 	add.w	r1, r0, #20
 80094c8:	f100 0210 	add.w	r2, r0, #16
 80094cc:	4618      	mov	r0, r3
 80094ce:	4553      	cmp	r3, sl
 80094d0:	db33      	blt.n	800953a <__lshift+0xb6>
 80094d2:	6920      	ldr	r0, [r4, #16]
 80094d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094d8:	f104 0314 	add.w	r3, r4, #20
 80094dc:	f019 091f 	ands.w	r9, r9, #31
 80094e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80094e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80094e8:	d02b      	beq.n	8009542 <__lshift+0xbe>
 80094ea:	f1c9 0e20 	rsb	lr, r9, #32
 80094ee:	468a      	mov	sl, r1
 80094f0:	2200      	movs	r2, #0
 80094f2:	6818      	ldr	r0, [r3, #0]
 80094f4:	fa00 f009 	lsl.w	r0, r0, r9
 80094f8:	4302      	orrs	r2, r0
 80094fa:	f84a 2b04 	str.w	r2, [sl], #4
 80094fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009502:	459c      	cmp	ip, r3
 8009504:	fa22 f20e 	lsr.w	r2, r2, lr
 8009508:	d8f3      	bhi.n	80094f2 <__lshift+0x6e>
 800950a:	ebac 0304 	sub.w	r3, ip, r4
 800950e:	3b15      	subs	r3, #21
 8009510:	f023 0303 	bic.w	r3, r3, #3
 8009514:	3304      	adds	r3, #4
 8009516:	f104 0015 	add.w	r0, r4, #21
 800951a:	4584      	cmp	ip, r0
 800951c:	bf38      	it	cc
 800951e:	2304      	movcc	r3, #4
 8009520:	50ca      	str	r2, [r1, r3]
 8009522:	b10a      	cbz	r2, 8009528 <__lshift+0xa4>
 8009524:	f108 0602 	add.w	r6, r8, #2
 8009528:	3e01      	subs	r6, #1
 800952a:	4638      	mov	r0, r7
 800952c:	612e      	str	r6, [r5, #16]
 800952e:	4621      	mov	r1, r4
 8009530:	f7ff fd8c 	bl	800904c <_Bfree>
 8009534:	4628      	mov	r0, r5
 8009536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800953a:	f842 0f04 	str.w	r0, [r2, #4]!
 800953e:	3301      	adds	r3, #1
 8009540:	e7c5      	b.n	80094ce <__lshift+0x4a>
 8009542:	3904      	subs	r1, #4
 8009544:	f853 2b04 	ldr.w	r2, [r3], #4
 8009548:	f841 2f04 	str.w	r2, [r1, #4]!
 800954c:	459c      	cmp	ip, r3
 800954e:	d8f9      	bhi.n	8009544 <__lshift+0xc0>
 8009550:	e7ea      	b.n	8009528 <__lshift+0xa4>
 8009552:	bf00      	nop
 8009554:	0800ab19 	.word	0x0800ab19
 8009558:	0800abbf 	.word	0x0800abbf

0800955c <__mcmp>:
 800955c:	b530      	push	{r4, r5, lr}
 800955e:	6902      	ldr	r2, [r0, #16]
 8009560:	690c      	ldr	r4, [r1, #16]
 8009562:	1b12      	subs	r2, r2, r4
 8009564:	d10e      	bne.n	8009584 <__mcmp+0x28>
 8009566:	f100 0314 	add.w	r3, r0, #20
 800956a:	3114      	adds	r1, #20
 800956c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009570:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009574:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009578:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800957c:	42a5      	cmp	r5, r4
 800957e:	d003      	beq.n	8009588 <__mcmp+0x2c>
 8009580:	d305      	bcc.n	800958e <__mcmp+0x32>
 8009582:	2201      	movs	r2, #1
 8009584:	4610      	mov	r0, r2
 8009586:	bd30      	pop	{r4, r5, pc}
 8009588:	4283      	cmp	r3, r0
 800958a:	d3f3      	bcc.n	8009574 <__mcmp+0x18>
 800958c:	e7fa      	b.n	8009584 <__mcmp+0x28>
 800958e:	f04f 32ff 	mov.w	r2, #4294967295
 8009592:	e7f7      	b.n	8009584 <__mcmp+0x28>

08009594 <__mdiff>:
 8009594:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009598:	460c      	mov	r4, r1
 800959a:	4606      	mov	r6, r0
 800959c:	4611      	mov	r1, r2
 800959e:	4620      	mov	r0, r4
 80095a0:	4617      	mov	r7, r2
 80095a2:	f7ff ffdb 	bl	800955c <__mcmp>
 80095a6:	1e05      	subs	r5, r0, #0
 80095a8:	d110      	bne.n	80095cc <__mdiff+0x38>
 80095aa:	4629      	mov	r1, r5
 80095ac:	4630      	mov	r0, r6
 80095ae:	f7ff fd0d 	bl	8008fcc <_Balloc>
 80095b2:	b930      	cbnz	r0, 80095c2 <__mdiff+0x2e>
 80095b4:	4b39      	ldr	r3, [pc, #228]	; (800969c <__mdiff+0x108>)
 80095b6:	4602      	mov	r2, r0
 80095b8:	f240 2132 	movw	r1, #562	; 0x232
 80095bc:	4838      	ldr	r0, [pc, #224]	; (80096a0 <__mdiff+0x10c>)
 80095be:	f000 fa63 	bl	8009a88 <__assert_func>
 80095c2:	2301      	movs	r3, #1
 80095c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80095c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095cc:	bfa4      	itt	ge
 80095ce:	463b      	movge	r3, r7
 80095d0:	4627      	movge	r7, r4
 80095d2:	4630      	mov	r0, r6
 80095d4:	6879      	ldr	r1, [r7, #4]
 80095d6:	bfa6      	itte	ge
 80095d8:	461c      	movge	r4, r3
 80095da:	2500      	movge	r5, #0
 80095dc:	2501      	movlt	r5, #1
 80095de:	f7ff fcf5 	bl	8008fcc <_Balloc>
 80095e2:	b920      	cbnz	r0, 80095ee <__mdiff+0x5a>
 80095e4:	4b2d      	ldr	r3, [pc, #180]	; (800969c <__mdiff+0x108>)
 80095e6:	4602      	mov	r2, r0
 80095e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80095ec:	e7e6      	b.n	80095bc <__mdiff+0x28>
 80095ee:	693e      	ldr	r6, [r7, #16]
 80095f0:	60c5      	str	r5, [r0, #12]
 80095f2:	6925      	ldr	r5, [r4, #16]
 80095f4:	f107 0114 	add.w	r1, r7, #20
 80095f8:	f104 0914 	add.w	r9, r4, #20
 80095fc:	f100 0e14 	add.w	lr, r0, #20
 8009600:	f107 0210 	add.w	r2, r7, #16
 8009604:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009608:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800960c:	46f2      	mov	sl, lr
 800960e:	2700      	movs	r7, #0
 8009610:	f859 3b04 	ldr.w	r3, [r9], #4
 8009614:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009618:	fa1f f883 	uxth.w	r8, r3
 800961c:	fa17 f78b 	uxtah	r7, r7, fp
 8009620:	0c1b      	lsrs	r3, r3, #16
 8009622:	eba7 0808 	sub.w	r8, r7, r8
 8009626:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800962a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800962e:	fa1f f888 	uxth.w	r8, r8
 8009632:	141f      	asrs	r7, r3, #16
 8009634:	454d      	cmp	r5, r9
 8009636:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800963a:	f84a 3b04 	str.w	r3, [sl], #4
 800963e:	d8e7      	bhi.n	8009610 <__mdiff+0x7c>
 8009640:	1b2b      	subs	r3, r5, r4
 8009642:	3b15      	subs	r3, #21
 8009644:	f023 0303 	bic.w	r3, r3, #3
 8009648:	3304      	adds	r3, #4
 800964a:	3415      	adds	r4, #21
 800964c:	42a5      	cmp	r5, r4
 800964e:	bf38      	it	cc
 8009650:	2304      	movcc	r3, #4
 8009652:	4419      	add	r1, r3
 8009654:	4473      	add	r3, lr
 8009656:	469e      	mov	lr, r3
 8009658:	460d      	mov	r5, r1
 800965a:	4565      	cmp	r5, ip
 800965c:	d30e      	bcc.n	800967c <__mdiff+0xe8>
 800965e:	f10c 0203 	add.w	r2, ip, #3
 8009662:	1a52      	subs	r2, r2, r1
 8009664:	f022 0203 	bic.w	r2, r2, #3
 8009668:	3903      	subs	r1, #3
 800966a:	458c      	cmp	ip, r1
 800966c:	bf38      	it	cc
 800966e:	2200      	movcc	r2, #0
 8009670:	441a      	add	r2, r3
 8009672:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009676:	b17b      	cbz	r3, 8009698 <__mdiff+0x104>
 8009678:	6106      	str	r6, [r0, #16]
 800967a:	e7a5      	b.n	80095c8 <__mdiff+0x34>
 800967c:	f855 8b04 	ldr.w	r8, [r5], #4
 8009680:	fa17 f488 	uxtah	r4, r7, r8
 8009684:	1422      	asrs	r2, r4, #16
 8009686:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800968a:	b2a4      	uxth	r4, r4
 800968c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009690:	f84e 4b04 	str.w	r4, [lr], #4
 8009694:	1417      	asrs	r7, r2, #16
 8009696:	e7e0      	b.n	800965a <__mdiff+0xc6>
 8009698:	3e01      	subs	r6, #1
 800969a:	e7ea      	b.n	8009672 <__mdiff+0xde>
 800969c:	0800ab19 	.word	0x0800ab19
 80096a0:	0800abbf 	.word	0x0800abbf

080096a4 <__ulp>:
 80096a4:	b082      	sub	sp, #8
 80096a6:	ed8d 0b00 	vstr	d0, [sp]
 80096aa:	9b01      	ldr	r3, [sp, #4]
 80096ac:	4912      	ldr	r1, [pc, #72]	; (80096f8 <__ulp+0x54>)
 80096ae:	4019      	ands	r1, r3
 80096b0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80096b4:	2900      	cmp	r1, #0
 80096b6:	dd05      	ble.n	80096c4 <__ulp+0x20>
 80096b8:	2200      	movs	r2, #0
 80096ba:	460b      	mov	r3, r1
 80096bc:	ec43 2b10 	vmov	d0, r2, r3
 80096c0:	b002      	add	sp, #8
 80096c2:	4770      	bx	lr
 80096c4:	4249      	negs	r1, r1
 80096c6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80096ca:	ea4f 5021 	mov.w	r0, r1, asr #20
 80096ce:	f04f 0200 	mov.w	r2, #0
 80096d2:	f04f 0300 	mov.w	r3, #0
 80096d6:	da04      	bge.n	80096e2 <__ulp+0x3e>
 80096d8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80096dc:	fa41 f300 	asr.w	r3, r1, r0
 80096e0:	e7ec      	b.n	80096bc <__ulp+0x18>
 80096e2:	f1a0 0114 	sub.w	r1, r0, #20
 80096e6:	291e      	cmp	r1, #30
 80096e8:	bfda      	itte	le
 80096ea:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80096ee:	fa20 f101 	lsrle.w	r1, r0, r1
 80096f2:	2101      	movgt	r1, #1
 80096f4:	460a      	mov	r2, r1
 80096f6:	e7e1      	b.n	80096bc <__ulp+0x18>
 80096f8:	7ff00000 	.word	0x7ff00000

080096fc <__b2d>:
 80096fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fe:	6905      	ldr	r5, [r0, #16]
 8009700:	f100 0714 	add.w	r7, r0, #20
 8009704:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009708:	1f2e      	subs	r6, r5, #4
 800970a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800970e:	4620      	mov	r0, r4
 8009710:	f7ff fd52 	bl	80091b8 <__hi0bits>
 8009714:	f1c0 0320 	rsb	r3, r0, #32
 8009718:	280a      	cmp	r0, #10
 800971a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009798 <__b2d+0x9c>
 800971e:	600b      	str	r3, [r1, #0]
 8009720:	dc14      	bgt.n	800974c <__b2d+0x50>
 8009722:	f1c0 0e0b 	rsb	lr, r0, #11
 8009726:	fa24 f10e 	lsr.w	r1, r4, lr
 800972a:	42b7      	cmp	r7, r6
 800972c:	ea41 030c 	orr.w	r3, r1, ip
 8009730:	bf34      	ite	cc
 8009732:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009736:	2100      	movcs	r1, #0
 8009738:	3015      	adds	r0, #21
 800973a:	fa04 f000 	lsl.w	r0, r4, r0
 800973e:	fa21 f10e 	lsr.w	r1, r1, lr
 8009742:	ea40 0201 	orr.w	r2, r0, r1
 8009746:	ec43 2b10 	vmov	d0, r2, r3
 800974a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800974c:	42b7      	cmp	r7, r6
 800974e:	bf3a      	itte	cc
 8009750:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009754:	f1a5 0608 	subcc.w	r6, r5, #8
 8009758:	2100      	movcs	r1, #0
 800975a:	380b      	subs	r0, #11
 800975c:	d017      	beq.n	800978e <__b2d+0x92>
 800975e:	f1c0 0c20 	rsb	ip, r0, #32
 8009762:	fa04 f500 	lsl.w	r5, r4, r0
 8009766:	42be      	cmp	r6, r7
 8009768:	fa21 f40c 	lsr.w	r4, r1, ip
 800976c:	ea45 0504 	orr.w	r5, r5, r4
 8009770:	bf8c      	ite	hi
 8009772:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009776:	2400      	movls	r4, #0
 8009778:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800977c:	fa01 f000 	lsl.w	r0, r1, r0
 8009780:	fa24 f40c 	lsr.w	r4, r4, ip
 8009784:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009788:	ea40 0204 	orr.w	r2, r0, r4
 800978c:	e7db      	b.n	8009746 <__b2d+0x4a>
 800978e:	ea44 030c 	orr.w	r3, r4, ip
 8009792:	460a      	mov	r2, r1
 8009794:	e7d7      	b.n	8009746 <__b2d+0x4a>
 8009796:	bf00      	nop
 8009798:	3ff00000 	.word	0x3ff00000

0800979c <__d2b>:
 800979c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80097a0:	4689      	mov	r9, r1
 80097a2:	2101      	movs	r1, #1
 80097a4:	ec57 6b10 	vmov	r6, r7, d0
 80097a8:	4690      	mov	r8, r2
 80097aa:	f7ff fc0f 	bl	8008fcc <_Balloc>
 80097ae:	4604      	mov	r4, r0
 80097b0:	b930      	cbnz	r0, 80097c0 <__d2b+0x24>
 80097b2:	4602      	mov	r2, r0
 80097b4:	4b25      	ldr	r3, [pc, #148]	; (800984c <__d2b+0xb0>)
 80097b6:	4826      	ldr	r0, [pc, #152]	; (8009850 <__d2b+0xb4>)
 80097b8:	f240 310a 	movw	r1, #778	; 0x30a
 80097bc:	f000 f964 	bl	8009a88 <__assert_func>
 80097c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80097c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80097c8:	bb35      	cbnz	r5, 8009818 <__d2b+0x7c>
 80097ca:	2e00      	cmp	r6, #0
 80097cc:	9301      	str	r3, [sp, #4]
 80097ce:	d028      	beq.n	8009822 <__d2b+0x86>
 80097d0:	4668      	mov	r0, sp
 80097d2:	9600      	str	r6, [sp, #0]
 80097d4:	f7ff fd10 	bl	80091f8 <__lo0bits>
 80097d8:	9900      	ldr	r1, [sp, #0]
 80097da:	b300      	cbz	r0, 800981e <__d2b+0x82>
 80097dc:	9a01      	ldr	r2, [sp, #4]
 80097de:	f1c0 0320 	rsb	r3, r0, #32
 80097e2:	fa02 f303 	lsl.w	r3, r2, r3
 80097e6:	430b      	orrs	r3, r1
 80097e8:	40c2      	lsrs	r2, r0
 80097ea:	6163      	str	r3, [r4, #20]
 80097ec:	9201      	str	r2, [sp, #4]
 80097ee:	9b01      	ldr	r3, [sp, #4]
 80097f0:	61a3      	str	r3, [r4, #24]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	bf14      	ite	ne
 80097f6:	2202      	movne	r2, #2
 80097f8:	2201      	moveq	r2, #1
 80097fa:	6122      	str	r2, [r4, #16]
 80097fc:	b1d5      	cbz	r5, 8009834 <__d2b+0x98>
 80097fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009802:	4405      	add	r5, r0
 8009804:	f8c9 5000 	str.w	r5, [r9]
 8009808:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800980c:	f8c8 0000 	str.w	r0, [r8]
 8009810:	4620      	mov	r0, r4
 8009812:	b003      	add	sp, #12
 8009814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009818:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800981c:	e7d5      	b.n	80097ca <__d2b+0x2e>
 800981e:	6161      	str	r1, [r4, #20]
 8009820:	e7e5      	b.n	80097ee <__d2b+0x52>
 8009822:	a801      	add	r0, sp, #4
 8009824:	f7ff fce8 	bl	80091f8 <__lo0bits>
 8009828:	9b01      	ldr	r3, [sp, #4]
 800982a:	6163      	str	r3, [r4, #20]
 800982c:	2201      	movs	r2, #1
 800982e:	6122      	str	r2, [r4, #16]
 8009830:	3020      	adds	r0, #32
 8009832:	e7e3      	b.n	80097fc <__d2b+0x60>
 8009834:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009838:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800983c:	f8c9 0000 	str.w	r0, [r9]
 8009840:	6918      	ldr	r0, [r3, #16]
 8009842:	f7ff fcb9 	bl	80091b8 <__hi0bits>
 8009846:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800984a:	e7df      	b.n	800980c <__d2b+0x70>
 800984c:	0800ab19 	.word	0x0800ab19
 8009850:	0800abbf 	.word	0x0800abbf

08009854 <__ratio>:
 8009854:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009858:	4688      	mov	r8, r1
 800985a:	4669      	mov	r1, sp
 800985c:	4681      	mov	r9, r0
 800985e:	f7ff ff4d 	bl	80096fc <__b2d>
 8009862:	a901      	add	r1, sp, #4
 8009864:	4640      	mov	r0, r8
 8009866:	ec55 4b10 	vmov	r4, r5, d0
 800986a:	f7ff ff47 	bl	80096fc <__b2d>
 800986e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009872:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009876:	eba3 0c02 	sub.w	ip, r3, r2
 800987a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800987e:	1a9b      	subs	r3, r3, r2
 8009880:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009884:	ec51 0b10 	vmov	r0, r1, d0
 8009888:	2b00      	cmp	r3, #0
 800988a:	bfd6      	itet	le
 800988c:	460a      	movle	r2, r1
 800988e:	462a      	movgt	r2, r5
 8009890:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009894:	468b      	mov	fp, r1
 8009896:	462f      	mov	r7, r5
 8009898:	bfd4      	ite	le
 800989a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800989e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80098a2:	4620      	mov	r0, r4
 80098a4:	ee10 2a10 	vmov	r2, s0
 80098a8:	465b      	mov	r3, fp
 80098aa:	4639      	mov	r1, r7
 80098ac:	f7f6 ffde 	bl	800086c <__aeabi_ddiv>
 80098b0:	ec41 0b10 	vmov	d0, r0, r1
 80098b4:	b003      	add	sp, #12
 80098b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080098ba <__copybits>:
 80098ba:	3901      	subs	r1, #1
 80098bc:	b570      	push	{r4, r5, r6, lr}
 80098be:	1149      	asrs	r1, r1, #5
 80098c0:	6914      	ldr	r4, [r2, #16]
 80098c2:	3101      	adds	r1, #1
 80098c4:	f102 0314 	add.w	r3, r2, #20
 80098c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80098cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80098d0:	1f05      	subs	r5, r0, #4
 80098d2:	42a3      	cmp	r3, r4
 80098d4:	d30c      	bcc.n	80098f0 <__copybits+0x36>
 80098d6:	1aa3      	subs	r3, r4, r2
 80098d8:	3b11      	subs	r3, #17
 80098da:	f023 0303 	bic.w	r3, r3, #3
 80098de:	3211      	adds	r2, #17
 80098e0:	42a2      	cmp	r2, r4
 80098e2:	bf88      	it	hi
 80098e4:	2300      	movhi	r3, #0
 80098e6:	4418      	add	r0, r3
 80098e8:	2300      	movs	r3, #0
 80098ea:	4288      	cmp	r0, r1
 80098ec:	d305      	bcc.n	80098fa <__copybits+0x40>
 80098ee:	bd70      	pop	{r4, r5, r6, pc}
 80098f0:	f853 6b04 	ldr.w	r6, [r3], #4
 80098f4:	f845 6f04 	str.w	r6, [r5, #4]!
 80098f8:	e7eb      	b.n	80098d2 <__copybits+0x18>
 80098fa:	f840 3b04 	str.w	r3, [r0], #4
 80098fe:	e7f4      	b.n	80098ea <__copybits+0x30>

08009900 <__any_on>:
 8009900:	f100 0214 	add.w	r2, r0, #20
 8009904:	6900      	ldr	r0, [r0, #16]
 8009906:	114b      	asrs	r3, r1, #5
 8009908:	4298      	cmp	r0, r3
 800990a:	b510      	push	{r4, lr}
 800990c:	db11      	blt.n	8009932 <__any_on+0x32>
 800990e:	dd0a      	ble.n	8009926 <__any_on+0x26>
 8009910:	f011 011f 	ands.w	r1, r1, #31
 8009914:	d007      	beq.n	8009926 <__any_on+0x26>
 8009916:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800991a:	fa24 f001 	lsr.w	r0, r4, r1
 800991e:	fa00 f101 	lsl.w	r1, r0, r1
 8009922:	428c      	cmp	r4, r1
 8009924:	d10b      	bne.n	800993e <__any_on+0x3e>
 8009926:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800992a:	4293      	cmp	r3, r2
 800992c:	d803      	bhi.n	8009936 <__any_on+0x36>
 800992e:	2000      	movs	r0, #0
 8009930:	bd10      	pop	{r4, pc}
 8009932:	4603      	mov	r3, r0
 8009934:	e7f7      	b.n	8009926 <__any_on+0x26>
 8009936:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800993a:	2900      	cmp	r1, #0
 800993c:	d0f5      	beq.n	800992a <__any_on+0x2a>
 800993e:	2001      	movs	r0, #1
 8009940:	e7f6      	b.n	8009930 <__any_on+0x30>

08009942 <_calloc_r>:
 8009942:	b513      	push	{r0, r1, r4, lr}
 8009944:	434a      	muls	r2, r1
 8009946:	4611      	mov	r1, r2
 8009948:	9201      	str	r2, [sp, #4]
 800994a:	f000 f809 	bl	8009960 <_malloc_r>
 800994e:	4604      	mov	r4, r0
 8009950:	b118      	cbz	r0, 800995a <_calloc_r+0x18>
 8009952:	9a01      	ldr	r2, [sp, #4]
 8009954:	2100      	movs	r1, #0
 8009956:	f7fe f8d5 	bl	8007b04 <memset>
 800995a:	4620      	mov	r0, r4
 800995c:	b002      	add	sp, #8
 800995e:	bd10      	pop	{r4, pc}

08009960 <_malloc_r>:
 8009960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009962:	1ccd      	adds	r5, r1, #3
 8009964:	f025 0503 	bic.w	r5, r5, #3
 8009968:	3508      	adds	r5, #8
 800996a:	2d0c      	cmp	r5, #12
 800996c:	bf38      	it	cc
 800996e:	250c      	movcc	r5, #12
 8009970:	2d00      	cmp	r5, #0
 8009972:	4606      	mov	r6, r0
 8009974:	db01      	blt.n	800997a <_malloc_r+0x1a>
 8009976:	42a9      	cmp	r1, r5
 8009978:	d903      	bls.n	8009982 <_malloc_r+0x22>
 800997a:	230c      	movs	r3, #12
 800997c:	6033      	str	r3, [r6, #0]
 800997e:	2000      	movs	r0, #0
 8009980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009982:	f000 f8b9 	bl	8009af8 <__malloc_lock>
 8009986:	4921      	ldr	r1, [pc, #132]	; (8009a0c <_malloc_r+0xac>)
 8009988:	680a      	ldr	r2, [r1, #0]
 800998a:	4614      	mov	r4, r2
 800998c:	b99c      	cbnz	r4, 80099b6 <_malloc_r+0x56>
 800998e:	4f20      	ldr	r7, [pc, #128]	; (8009a10 <_malloc_r+0xb0>)
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	b923      	cbnz	r3, 800999e <_malloc_r+0x3e>
 8009994:	4621      	mov	r1, r4
 8009996:	4630      	mov	r0, r6
 8009998:	f000 f846 	bl	8009a28 <_sbrk_r>
 800999c:	6038      	str	r0, [r7, #0]
 800999e:	4629      	mov	r1, r5
 80099a0:	4630      	mov	r0, r6
 80099a2:	f000 f841 	bl	8009a28 <_sbrk_r>
 80099a6:	1c43      	adds	r3, r0, #1
 80099a8:	d123      	bne.n	80099f2 <_malloc_r+0x92>
 80099aa:	230c      	movs	r3, #12
 80099ac:	6033      	str	r3, [r6, #0]
 80099ae:	4630      	mov	r0, r6
 80099b0:	f000 f8a8 	bl	8009b04 <__malloc_unlock>
 80099b4:	e7e3      	b.n	800997e <_malloc_r+0x1e>
 80099b6:	6823      	ldr	r3, [r4, #0]
 80099b8:	1b5b      	subs	r3, r3, r5
 80099ba:	d417      	bmi.n	80099ec <_malloc_r+0x8c>
 80099bc:	2b0b      	cmp	r3, #11
 80099be:	d903      	bls.n	80099c8 <_malloc_r+0x68>
 80099c0:	6023      	str	r3, [r4, #0]
 80099c2:	441c      	add	r4, r3
 80099c4:	6025      	str	r5, [r4, #0]
 80099c6:	e004      	b.n	80099d2 <_malloc_r+0x72>
 80099c8:	6863      	ldr	r3, [r4, #4]
 80099ca:	42a2      	cmp	r2, r4
 80099cc:	bf0c      	ite	eq
 80099ce:	600b      	streq	r3, [r1, #0]
 80099d0:	6053      	strne	r3, [r2, #4]
 80099d2:	4630      	mov	r0, r6
 80099d4:	f000 f896 	bl	8009b04 <__malloc_unlock>
 80099d8:	f104 000b 	add.w	r0, r4, #11
 80099dc:	1d23      	adds	r3, r4, #4
 80099de:	f020 0007 	bic.w	r0, r0, #7
 80099e2:	1ac2      	subs	r2, r0, r3
 80099e4:	d0cc      	beq.n	8009980 <_malloc_r+0x20>
 80099e6:	1a1b      	subs	r3, r3, r0
 80099e8:	50a3      	str	r3, [r4, r2]
 80099ea:	e7c9      	b.n	8009980 <_malloc_r+0x20>
 80099ec:	4622      	mov	r2, r4
 80099ee:	6864      	ldr	r4, [r4, #4]
 80099f0:	e7cc      	b.n	800998c <_malloc_r+0x2c>
 80099f2:	1cc4      	adds	r4, r0, #3
 80099f4:	f024 0403 	bic.w	r4, r4, #3
 80099f8:	42a0      	cmp	r0, r4
 80099fa:	d0e3      	beq.n	80099c4 <_malloc_r+0x64>
 80099fc:	1a21      	subs	r1, r4, r0
 80099fe:	4630      	mov	r0, r6
 8009a00:	f000 f812 	bl	8009a28 <_sbrk_r>
 8009a04:	3001      	adds	r0, #1
 8009a06:	d1dd      	bne.n	80099c4 <_malloc_r+0x64>
 8009a08:	e7cf      	b.n	80099aa <_malloc_r+0x4a>
 8009a0a:	bf00      	nop
 8009a0c:	20000208 	.word	0x20000208
 8009a10:	2000020c 	.word	0x2000020c
 8009a14:	00000000 	.word	0x00000000

08009a18 <nan>:
 8009a18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009a20 <nan+0x8>
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop
 8009a20:	00000000 	.word	0x00000000
 8009a24:	7ff80000 	.word	0x7ff80000

08009a28 <_sbrk_r>:
 8009a28:	b538      	push	{r3, r4, r5, lr}
 8009a2a:	4d06      	ldr	r5, [pc, #24]	; (8009a44 <_sbrk_r+0x1c>)
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	4604      	mov	r4, r0
 8009a30:	4608      	mov	r0, r1
 8009a32:	602b      	str	r3, [r5, #0]
 8009a34:	f7f8 fcd4 	bl	80023e0 <_sbrk>
 8009a38:	1c43      	adds	r3, r0, #1
 8009a3a:	d102      	bne.n	8009a42 <_sbrk_r+0x1a>
 8009a3c:	682b      	ldr	r3, [r5, #0]
 8009a3e:	b103      	cbz	r3, 8009a42 <_sbrk_r+0x1a>
 8009a40:	6023      	str	r3, [r4, #0]
 8009a42:	bd38      	pop	{r3, r4, r5, pc}
 8009a44:	20000650 	.word	0x20000650

08009a48 <strncmp>:
 8009a48:	b510      	push	{r4, lr}
 8009a4a:	b16a      	cbz	r2, 8009a68 <strncmp+0x20>
 8009a4c:	3901      	subs	r1, #1
 8009a4e:	1884      	adds	r4, r0, r2
 8009a50:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009a54:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d103      	bne.n	8009a64 <strncmp+0x1c>
 8009a5c:	42a0      	cmp	r0, r4
 8009a5e:	d001      	beq.n	8009a64 <strncmp+0x1c>
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d1f5      	bne.n	8009a50 <strncmp+0x8>
 8009a64:	1a98      	subs	r0, r3, r2
 8009a66:	bd10      	pop	{r4, pc}
 8009a68:	4610      	mov	r0, r2
 8009a6a:	e7fc      	b.n	8009a66 <strncmp+0x1e>

08009a6c <__ascii_wctomb>:
 8009a6c:	b149      	cbz	r1, 8009a82 <__ascii_wctomb+0x16>
 8009a6e:	2aff      	cmp	r2, #255	; 0xff
 8009a70:	bf85      	ittet	hi
 8009a72:	238a      	movhi	r3, #138	; 0x8a
 8009a74:	6003      	strhi	r3, [r0, #0]
 8009a76:	700a      	strbls	r2, [r1, #0]
 8009a78:	f04f 30ff 	movhi.w	r0, #4294967295
 8009a7c:	bf98      	it	ls
 8009a7e:	2001      	movls	r0, #1
 8009a80:	4770      	bx	lr
 8009a82:	4608      	mov	r0, r1
 8009a84:	4770      	bx	lr
	...

08009a88 <__assert_func>:
 8009a88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a8a:	4614      	mov	r4, r2
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	4b09      	ldr	r3, [pc, #36]	; (8009ab4 <__assert_func+0x2c>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4605      	mov	r5, r0
 8009a94:	68d8      	ldr	r0, [r3, #12]
 8009a96:	b14c      	cbz	r4, 8009aac <__assert_func+0x24>
 8009a98:	4b07      	ldr	r3, [pc, #28]	; (8009ab8 <__assert_func+0x30>)
 8009a9a:	9100      	str	r1, [sp, #0]
 8009a9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009aa0:	4906      	ldr	r1, [pc, #24]	; (8009abc <__assert_func+0x34>)
 8009aa2:	462b      	mov	r3, r5
 8009aa4:	f000 f80e 	bl	8009ac4 <fiprintf>
 8009aa8:	f000 fc30 	bl	800a30c <abort>
 8009aac:	4b04      	ldr	r3, [pc, #16]	; (8009ac0 <__assert_func+0x38>)
 8009aae:	461c      	mov	r4, r3
 8009ab0:	e7f3      	b.n	8009a9a <__assert_func+0x12>
 8009ab2:	bf00      	nop
 8009ab4:	2000000c 	.word	0x2000000c
 8009ab8:	0800ad1c 	.word	0x0800ad1c
 8009abc:	0800ad29 	.word	0x0800ad29
 8009ac0:	0800ad57 	.word	0x0800ad57

08009ac4 <fiprintf>:
 8009ac4:	b40e      	push	{r1, r2, r3}
 8009ac6:	b503      	push	{r0, r1, lr}
 8009ac8:	4601      	mov	r1, r0
 8009aca:	ab03      	add	r3, sp, #12
 8009acc:	4805      	ldr	r0, [pc, #20]	; (8009ae4 <fiprintf+0x20>)
 8009ace:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ad2:	6800      	ldr	r0, [r0, #0]
 8009ad4:	9301      	str	r3, [sp, #4]
 8009ad6:	f000 f895 	bl	8009c04 <_vfiprintf_r>
 8009ada:	b002      	add	sp, #8
 8009adc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ae0:	b003      	add	sp, #12
 8009ae2:	4770      	bx	lr
 8009ae4:	2000000c 	.word	0x2000000c

08009ae8 <malloc>:
 8009ae8:	4b02      	ldr	r3, [pc, #8]	; (8009af4 <malloc+0xc>)
 8009aea:	4601      	mov	r1, r0
 8009aec:	6818      	ldr	r0, [r3, #0]
 8009aee:	f7ff bf37 	b.w	8009960 <_malloc_r>
 8009af2:	bf00      	nop
 8009af4:	2000000c 	.word	0x2000000c

08009af8 <__malloc_lock>:
 8009af8:	4801      	ldr	r0, [pc, #4]	; (8009b00 <__malloc_lock+0x8>)
 8009afa:	f000 bdc7 	b.w	800a68c <__retarget_lock_acquire_recursive>
 8009afe:	bf00      	nop
 8009b00:	20000658 	.word	0x20000658

08009b04 <__malloc_unlock>:
 8009b04:	4801      	ldr	r0, [pc, #4]	; (8009b0c <__malloc_unlock+0x8>)
 8009b06:	f000 bdc2 	b.w	800a68e <__retarget_lock_release_recursive>
 8009b0a:	bf00      	nop
 8009b0c:	20000658 	.word	0x20000658

08009b10 <_free_r>:
 8009b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b12:	2900      	cmp	r1, #0
 8009b14:	d048      	beq.n	8009ba8 <_free_r+0x98>
 8009b16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b1a:	9001      	str	r0, [sp, #4]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f1a1 0404 	sub.w	r4, r1, #4
 8009b22:	bfb8      	it	lt
 8009b24:	18e4      	addlt	r4, r4, r3
 8009b26:	f7ff ffe7 	bl	8009af8 <__malloc_lock>
 8009b2a:	4a20      	ldr	r2, [pc, #128]	; (8009bac <_free_r+0x9c>)
 8009b2c:	9801      	ldr	r0, [sp, #4]
 8009b2e:	6813      	ldr	r3, [r2, #0]
 8009b30:	4615      	mov	r5, r2
 8009b32:	b933      	cbnz	r3, 8009b42 <_free_r+0x32>
 8009b34:	6063      	str	r3, [r4, #4]
 8009b36:	6014      	str	r4, [r2, #0]
 8009b38:	b003      	add	sp, #12
 8009b3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b3e:	f7ff bfe1 	b.w	8009b04 <__malloc_unlock>
 8009b42:	42a3      	cmp	r3, r4
 8009b44:	d90b      	bls.n	8009b5e <_free_r+0x4e>
 8009b46:	6821      	ldr	r1, [r4, #0]
 8009b48:	1862      	adds	r2, r4, r1
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	bf04      	itt	eq
 8009b4e:	681a      	ldreq	r2, [r3, #0]
 8009b50:	685b      	ldreq	r3, [r3, #4]
 8009b52:	6063      	str	r3, [r4, #4]
 8009b54:	bf04      	itt	eq
 8009b56:	1852      	addeq	r2, r2, r1
 8009b58:	6022      	streq	r2, [r4, #0]
 8009b5a:	602c      	str	r4, [r5, #0]
 8009b5c:	e7ec      	b.n	8009b38 <_free_r+0x28>
 8009b5e:	461a      	mov	r2, r3
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	b10b      	cbz	r3, 8009b68 <_free_r+0x58>
 8009b64:	42a3      	cmp	r3, r4
 8009b66:	d9fa      	bls.n	8009b5e <_free_r+0x4e>
 8009b68:	6811      	ldr	r1, [r2, #0]
 8009b6a:	1855      	adds	r5, r2, r1
 8009b6c:	42a5      	cmp	r5, r4
 8009b6e:	d10b      	bne.n	8009b88 <_free_r+0x78>
 8009b70:	6824      	ldr	r4, [r4, #0]
 8009b72:	4421      	add	r1, r4
 8009b74:	1854      	adds	r4, r2, r1
 8009b76:	42a3      	cmp	r3, r4
 8009b78:	6011      	str	r1, [r2, #0]
 8009b7a:	d1dd      	bne.n	8009b38 <_free_r+0x28>
 8009b7c:	681c      	ldr	r4, [r3, #0]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	6053      	str	r3, [r2, #4]
 8009b82:	4421      	add	r1, r4
 8009b84:	6011      	str	r1, [r2, #0]
 8009b86:	e7d7      	b.n	8009b38 <_free_r+0x28>
 8009b88:	d902      	bls.n	8009b90 <_free_r+0x80>
 8009b8a:	230c      	movs	r3, #12
 8009b8c:	6003      	str	r3, [r0, #0]
 8009b8e:	e7d3      	b.n	8009b38 <_free_r+0x28>
 8009b90:	6825      	ldr	r5, [r4, #0]
 8009b92:	1961      	adds	r1, r4, r5
 8009b94:	428b      	cmp	r3, r1
 8009b96:	bf04      	itt	eq
 8009b98:	6819      	ldreq	r1, [r3, #0]
 8009b9a:	685b      	ldreq	r3, [r3, #4]
 8009b9c:	6063      	str	r3, [r4, #4]
 8009b9e:	bf04      	itt	eq
 8009ba0:	1949      	addeq	r1, r1, r5
 8009ba2:	6021      	streq	r1, [r4, #0]
 8009ba4:	6054      	str	r4, [r2, #4]
 8009ba6:	e7c7      	b.n	8009b38 <_free_r+0x28>
 8009ba8:	b003      	add	sp, #12
 8009baa:	bd30      	pop	{r4, r5, pc}
 8009bac:	20000208 	.word	0x20000208

08009bb0 <__sfputc_r>:
 8009bb0:	6893      	ldr	r3, [r2, #8]
 8009bb2:	3b01      	subs	r3, #1
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	b410      	push	{r4}
 8009bb8:	6093      	str	r3, [r2, #8]
 8009bba:	da08      	bge.n	8009bce <__sfputc_r+0x1e>
 8009bbc:	6994      	ldr	r4, [r2, #24]
 8009bbe:	42a3      	cmp	r3, r4
 8009bc0:	db01      	blt.n	8009bc6 <__sfputc_r+0x16>
 8009bc2:	290a      	cmp	r1, #10
 8009bc4:	d103      	bne.n	8009bce <__sfputc_r+0x1e>
 8009bc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bca:	f000 badf 	b.w	800a18c <__swbuf_r>
 8009bce:	6813      	ldr	r3, [r2, #0]
 8009bd0:	1c58      	adds	r0, r3, #1
 8009bd2:	6010      	str	r0, [r2, #0]
 8009bd4:	7019      	strb	r1, [r3, #0]
 8009bd6:	4608      	mov	r0, r1
 8009bd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bdc:	4770      	bx	lr

08009bde <__sfputs_r>:
 8009bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009be0:	4606      	mov	r6, r0
 8009be2:	460f      	mov	r7, r1
 8009be4:	4614      	mov	r4, r2
 8009be6:	18d5      	adds	r5, r2, r3
 8009be8:	42ac      	cmp	r4, r5
 8009bea:	d101      	bne.n	8009bf0 <__sfputs_r+0x12>
 8009bec:	2000      	movs	r0, #0
 8009bee:	e007      	b.n	8009c00 <__sfputs_r+0x22>
 8009bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bf4:	463a      	mov	r2, r7
 8009bf6:	4630      	mov	r0, r6
 8009bf8:	f7ff ffda 	bl	8009bb0 <__sfputc_r>
 8009bfc:	1c43      	adds	r3, r0, #1
 8009bfe:	d1f3      	bne.n	8009be8 <__sfputs_r+0xa>
 8009c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c04 <_vfiprintf_r>:
 8009c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c08:	460d      	mov	r5, r1
 8009c0a:	b09d      	sub	sp, #116	; 0x74
 8009c0c:	4614      	mov	r4, r2
 8009c0e:	4698      	mov	r8, r3
 8009c10:	4606      	mov	r6, r0
 8009c12:	b118      	cbz	r0, 8009c1c <_vfiprintf_r+0x18>
 8009c14:	6983      	ldr	r3, [r0, #24]
 8009c16:	b90b      	cbnz	r3, 8009c1c <_vfiprintf_r+0x18>
 8009c18:	f000 fc9a 	bl	800a550 <__sinit>
 8009c1c:	4b89      	ldr	r3, [pc, #548]	; (8009e44 <_vfiprintf_r+0x240>)
 8009c1e:	429d      	cmp	r5, r3
 8009c20:	d11b      	bne.n	8009c5a <_vfiprintf_r+0x56>
 8009c22:	6875      	ldr	r5, [r6, #4]
 8009c24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c26:	07d9      	lsls	r1, r3, #31
 8009c28:	d405      	bmi.n	8009c36 <_vfiprintf_r+0x32>
 8009c2a:	89ab      	ldrh	r3, [r5, #12]
 8009c2c:	059a      	lsls	r2, r3, #22
 8009c2e:	d402      	bmi.n	8009c36 <_vfiprintf_r+0x32>
 8009c30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c32:	f000 fd2b 	bl	800a68c <__retarget_lock_acquire_recursive>
 8009c36:	89ab      	ldrh	r3, [r5, #12]
 8009c38:	071b      	lsls	r3, r3, #28
 8009c3a:	d501      	bpl.n	8009c40 <_vfiprintf_r+0x3c>
 8009c3c:	692b      	ldr	r3, [r5, #16]
 8009c3e:	b9eb      	cbnz	r3, 8009c7c <_vfiprintf_r+0x78>
 8009c40:	4629      	mov	r1, r5
 8009c42:	4630      	mov	r0, r6
 8009c44:	f000 faf4 	bl	800a230 <__swsetup_r>
 8009c48:	b1c0      	cbz	r0, 8009c7c <_vfiprintf_r+0x78>
 8009c4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c4c:	07dc      	lsls	r4, r3, #31
 8009c4e:	d50e      	bpl.n	8009c6e <_vfiprintf_r+0x6a>
 8009c50:	f04f 30ff 	mov.w	r0, #4294967295
 8009c54:	b01d      	add	sp, #116	; 0x74
 8009c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c5a:	4b7b      	ldr	r3, [pc, #492]	; (8009e48 <_vfiprintf_r+0x244>)
 8009c5c:	429d      	cmp	r5, r3
 8009c5e:	d101      	bne.n	8009c64 <_vfiprintf_r+0x60>
 8009c60:	68b5      	ldr	r5, [r6, #8]
 8009c62:	e7df      	b.n	8009c24 <_vfiprintf_r+0x20>
 8009c64:	4b79      	ldr	r3, [pc, #484]	; (8009e4c <_vfiprintf_r+0x248>)
 8009c66:	429d      	cmp	r5, r3
 8009c68:	bf08      	it	eq
 8009c6a:	68f5      	ldreq	r5, [r6, #12]
 8009c6c:	e7da      	b.n	8009c24 <_vfiprintf_r+0x20>
 8009c6e:	89ab      	ldrh	r3, [r5, #12]
 8009c70:	0598      	lsls	r0, r3, #22
 8009c72:	d4ed      	bmi.n	8009c50 <_vfiprintf_r+0x4c>
 8009c74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c76:	f000 fd0a 	bl	800a68e <__retarget_lock_release_recursive>
 8009c7a:	e7e9      	b.n	8009c50 <_vfiprintf_r+0x4c>
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c80:	2320      	movs	r3, #32
 8009c82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c86:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c8a:	2330      	movs	r3, #48	; 0x30
 8009c8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009e50 <_vfiprintf_r+0x24c>
 8009c90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c94:	f04f 0901 	mov.w	r9, #1
 8009c98:	4623      	mov	r3, r4
 8009c9a:	469a      	mov	sl, r3
 8009c9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ca0:	b10a      	cbz	r2, 8009ca6 <_vfiprintf_r+0xa2>
 8009ca2:	2a25      	cmp	r2, #37	; 0x25
 8009ca4:	d1f9      	bne.n	8009c9a <_vfiprintf_r+0x96>
 8009ca6:	ebba 0b04 	subs.w	fp, sl, r4
 8009caa:	d00b      	beq.n	8009cc4 <_vfiprintf_r+0xc0>
 8009cac:	465b      	mov	r3, fp
 8009cae:	4622      	mov	r2, r4
 8009cb0:	4629      	mov	r1, r5
 8009cb2:	4630      	mov	r0, r6
 8009cb4:	f7ff ff93 	bl	8009bde <__sfputs_r>
 8009cb8:	3001      	adds	r0, #1
 8009cba:	f000 80aa 	beq.w	8009e12 <_vfiprintf_r+0x20e>
 8009cbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cc0:	445a      	add	r2, fp
 8009cc2:	9209      	str	r2, [sp, #36]	; 0x24
 8009cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f000 80a2 	beq.w	8009e12 <_vfiprintf_r+0x20e>
 8009cce:	2300      	movs	r3, #0
 8009cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8009cd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cd8:	f10a 0a01 	add.w	sl, sl, #1
 8009cdc:	9304      	str	r3, [sp, #16]
 8009cde:	9307      	str	r3, [sp, #28]
 8009ce0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ce4:	931a      	str	r3, [sp, #104]	; 0x68
 8009ce6:	4654      	mov	r4, sl
 8009ce8:	2205      	movs	r2, #5
 8009cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cee:	4858      	ldr	r0, [pc, #352]	; (8009e50 <_vfiprintf_r+0x24c>)
 8009cf0:	f7f6 fa86 	bl	8000200 <memchr>
 8009cf4:	9a04      	ldr	r2, [sp, #16]
 8009cf6:	b9d8      	cbnz	r0, 8009d30 <_vfiprintf_r+0x12c>
 8009cf8:	06d1      	lsls	r1, r2, #27
 8009cfa:	bf44      	itt	mi
 8009cfc:	2320      	movmi	r3, #32
 8009cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d02:	0713      	lsls	r3, r2, #28
 8009d04:	bf44      	itt	mi
 8009d06:	232b      	movmi	r3, #43	; 0x2b
 8009d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d10:	2b2a      	cmp	r3, #42	; 0x2a
 8009d12:	d015      	beq.n	8009d40 <_vfiprintf_r+0x13c>
 8009d14:	9a07      	ldr	r2, [sp, #28]
 8009d16:	4654      	mov	r4, sl
 8009d18:	2000      	movs	r0, #0
 8009d1a:	f04f 0c0a 	mov.w	ip, #10
 8009d1e:	4621      	mov	r1, r4
 8009d20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d24:	3b30      	subs	r3, #48	; 0x30
 8009d26:	2b09      	cmp	r3, #9
 8009d28:	d94e      	bls.n	8009dc8 <_vfiprintf_r+0x1c4>
 8009d2a:	b1b0      	cbz	r0, 8009d5a <_vfiprintf_r+0x156>
 8009d2c:	9207      	str	r2, [sp, #28]
 8009d2e:	e014      	b.n	8009d5a <_vfiprintf_r+0x156>
 8009d30:	eba0 0308 	sub.w	r3, r0, r8
 8009d34:	fa09 f303 	lsl.w	r3, r9, r3
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	9304      	str	r3, [sp, #16]
 8009d3c:	46a2      	mov	sl, r4
 8009d3e:	e7d2      	b.n	8009ce6 <_vfiprintf_r+0xe2>
 8009d40:	9b03      	ldr	r3, [sp, #12]
 8009d42:	1d19      	adds	r1, r3, #4
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	9103      	str	r1, [sp, #12]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	bfbb      	ittet	lt
 8009d4c:	425b      	neglt	r3, r3
 8009d4e:	f042 0202 	orrlt.w	r2, r2, #2
 8009d52:	9307      	strge	r3, [sp, #28]
 8009d54:	9307      	strlt	r3, [sp, #28]
 8009d56:	bfb8      	it	lt
 8009d58:	9204      	strlt	r2, [sp, #16]
 8009d5a:	7823      	ldrb	r3, [r4, #0]
 8009d5c:	2b2e      	cmp	r3, #46	; 0x2e
 8009d5e:	d10c      	bne.n	8009d7a <_vfiprintf_r+0x176>
 8009d60:	7863      	ldrb	r3, [r4, #1]
 8009d62:	2b2a      	cmp	r3, #42	; 0x2a
 8009d64:	d135      	bne.n	8009dd2 <_vfiprintf_r+0x1ce>
 8009d66:	9b03      	ldr	r3, [sp, #12]
 8009d68:	1d1a      	adds	r2, r3, #4
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	9203      	str	r2, [sp, #12]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	bfb8      	it	lt
 8009d72:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d76:	3402      	adds	r4, #2
 8009d78:	9305      	str	r3, [sp, #20]
 8009d7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009e60 <_vfiprintf_r+0x25c>
 8009d7e:	7821      	ldrb	r1, [r4, #0]
 8009d80:	2203      	movs	r2, #3
 8009d82:	4650      	mov	r0, sl
 8009d84:	f7f6 fa3c 	bl	8000200 <memchr>
 8009d88:	b140      	cbz	r0, 8009d9c <_vfiprintf_r+0x198>
 8009d8a:	2340      	movs	r3, #64	; 0x40
 8009d8c:	eba0 000a 	sub.w	r0, r0, sl
 8009d90:	fa03 f000 	lsl.w	r0, r3, r0
 8009d94:	9b04      	ldr	r3, [sp, #16]
 8009d96:	4303      	orrs	r3, r0
 8009d98:	3401      	adds	r4, #1
 8009d9a:	9304      	str	r3, [sp, #16]
 8009d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009da0:	482c      	ldr	r0, [pc, #176]	; (8009e54 <_vfiprintf_r+0x250>)
 8009da2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009da6:	2206      	movs	r2, #6
 8009da8:	f7f6 fa2a 	bl	8000200 <memchr>
 8009dac:	2800      	cmp	r0, #0
 8009dae:	d03f      	beq.n	8009e30 <_vfiprintf_r+0x22c>
 8009db0:	4b29      	ldr	r3, [pc, #164]	; (8009e58 <_vfiprintf_r+0x254>)
 8009db2:	bb1b      	cbnz	r3, 8009dfc <_vfiprintf_r+0x1f8>
 8009db4:	9b03      	ldr	r3, [sp, #12]
 8009db6:	3307      	adds	r3, #7
 8009db8:	f023 0307 	bic.w	r3, r3, #7
 8009dbc:	3308      	adds	r3, #8
 8009dbe:	9303      	str	r3, [sp, #12]
 8009dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dc2:	443b      	add	r3, r7
 8009dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8009dc6:	e767      	b.n	8009c98 <_vfiprintf_r+0x94>
 8009dc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dcc:	460c      	mov	r4, r1
 8009dce:	2001      	movs	r0, #1
 8009dd0:	e7a5      	b.n	8009d1e <_vfiprintf_r+0x11a>
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	3401      	adds	r4, #1
 8009dd6:	9305      	str	r3, [sp, #20]
 8009dd8:	4619      	mov	r1, r3
 8009dda:	f04f 0c0a 	mov.w	ip, #10
 8009dde:	4620      	mov	r0, r4
 8009de0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009de4:	3a30      	subs	r2, #48	; 0x30
 8009de6:	2a09      	cmp	r2, #9
 8009de8:	d903      	bls.n	8009df2 <_vfiprintf_r+0x1ee>
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d0c5      	beq.n	8009d7a <_vfiprintf_r+0x176>
 8009dee:	9105      	str	r1, [sp, #20]
 8009df0:	e7c3      	b.n	8009d7a <_vfiprintf_r+0x176>
 8009df2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009df6:	4604      	mov	r4, r0
 8009df8:	2301      	movs	r3, #1
 8009dfa:	e7f0      	b.n	8009dde <_vfiprintf_r+0x1da>
 8009dfc:	ab03      	add	r3, sp, #12
 8009dfe:	9300      	str	r3, [sp, #0]
 8009e00:	462a      	mov	r2, r5
 8009e02:	4b16      	ldr	r3, [pc, #88]	; (8009e5c <_vfiprintf_r+0x258>)
 8009e04:	a904      	add	r1, sp, #16
 8009e06:	4630      	mov	r0, r6
 8009e08:	f3af 8000 	nop.w
 8009e0c:	4607      	mov	r7, r0
 8009e0e:	1c78      	adds	r0, r7, #1
 8009e10:	d1d6      	bne.n	8009dc0 <_vfiprintf_r+0x1bc>
 8009e12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e14:	07d9      	lsls	r1, r3, #31
 8009e16:	d405      	bmi.n	8009e24 <_vfiprintf_r+0x220>
 8009e18:	89ab      	ldrh	r3, [r5, #12]
 8009e1a:	059a      	lsls	r2, r3, #22
 8009e1c:	d402      	bmi.n	8009e24 <_vfiprintf_r+0x220>
 8009e1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e20:	f000 fc35 	bl	800a68e <__retarget_lock_release_recursive>
 8009e24:	89ab      	ldrh	r3, [r5, #12]
 8009e26:	065b      	lsls	r3, r3, #25
 8009e28:	f53f af12 	bmi.w	8009c50 <_vfiprintf_r+0x4c>
 8009e2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e2e:	e711      	b.n	8009c54 <_vfiprintf_r+0x50>
 8009e30:	ab03      	add	r3, sp, #12
 8009e32:	9300      	str	r3, [sp, #0]
 8009e34:	462a      	mov	r2, r5
 8009e36:	4b09      	ldr	r3, [pc, #36]	; (8009e5c <_vfiprintf_r+0x258>)
 8009e38:	a904      	add	r1, sp, #16
 8009e3a:	4630      	mov	r0, r6
 8009e3c:	f000 f880 	bl	8009f40 <_printf_i>
 8009e40:	e7e4      	b.n	8009e0c <_vfiprintf_r+0x208>
 8009e42:	bf00      	nop
 8009e44:	0800adac 	.word	0x0800adac
 8009e48:	0800adcc 	.word	0x0800adcc
 8009e4c:	0800ad8c 	.word	0x0800ad8c
 8009e50:	0800ad58 	.word	0x0800ad58
 8009e54:	0800ad62 	.word	0x0800ad62
 8009e58:	00000000 	.word	0x00000000
 8009e5c:	08009bdf 	.word	0x08009bdf
 8009e60:	0800ad5e 	.word	0x0800ad5e

08009e64 <_printf_common>:
 8009e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e68:	4616      	mov	r6, r2
 8009e6a:	4699      	mov	r9, r3
 8009e6c:	688a      	ldr	r2, [r1, #8]
 8009e6e:	690b      	ldr	r3, [r1, #16]
 8009e70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e74:	4293      	cmp	r3, r2
 8009e76:	bfb8      	it	lt
 8009e78:	4613      	movlt	r3, r2
 8009e7a:	6033      	str	r3, [r6, #0]
 8009e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e80:	4607      	mov	r7, r0
 8009e82:	460c      	mov	r4, r1
 8009e84:	b10a      	cbz	r2, 8009e8a <_printf_common+0x26>
 8009e86:	3301      	adds	r3, #1
 8009e88:	6033      	str	r3, [r6, #0]
 8009e8a:	6823      	ldr	r3, [r4, #0]
 8009e8c:	0699      	lsls	r1, r3, #26
 8009e8e:	bf42      	ittt	mi
 8009e90:	6833      	ldrmi	r3, [r6, #0]
 8009e92:	3302      	addmi	r3, #2
 8009e94:	6033      	strmi	r3, [r6, #0]
 8009e96:	6825      	ldr	r5, [r4, #0]
 8009e98:	f015 0506 	ands.w	r5, r5, #6
 8009e9c:	d106      	bne.n	8009eac <_printf_common+0x48>
 8009e9e:	f104 0a19 	add.w	sl, r4, #25
 8009ea2:	68e3      	ldr	r3, [r4, #12]
 8009ea4:	6832      	ldr	r2, [r6, #0]
 8009ea6:	1a9b      	subs	r3, r3, r2
 8009ea8:	42ab      	cmp	r3, r5
 8009eaa:	dc26      	bgt.n	8009efa <_printf_common+0x96>
 8009eac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009eb0:	1e13      	subs	r3, r2, #0
 8009eb2:	6822      	ldr	r2, [r4, #0]
 8009eb4:	bf18      	it	ne
 8009eb6:	2301      	movne	r3, #1
 8009eb8:	0692      	lsls	r2, r2, #26
 8009eba:	d42b      	bmi.n	8009f14 <_printf_common+0xb0>
 8009ebc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ec0:	4649      	mov	r1, r9
 8009ec2:	4638      	mov	r0, r7
 8009ec4:	47c0      	blx	r8
 8009ec6:	3001      	adds	r0, #1
 8009ec8:	d01e      	beq.n	8009f08 <_printf_common+0xa4>
 8009eca:	6823      	ldr	r3, [r4, #0]
 8009ecc:	68e5      	ldr	r5, [r4, #12]
 8009ece:	6832      	ldr	r2, [r6, #0]
 8009ed0:	f003 0306 	and.w	r3, r3, #6
 8009ed4:	2b04      	cmp	r3, #4
 8009ed6:	bf08      	it	eq
 8009ed8:	1aad      	subeq	r5, r5, r2
 8009eda:	68a3      	ldr	r3, [r4, #8]
 8009edc:	6922      	ldr	r2, [r4, #16]
 8009ede:	bf0c      	ite	eq
 8009ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ee4:	2500      	movne	r5, #0
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	bfc4      	itt	gt
 8009eea:	1a9b      	subgt	r3, r3, r2
 8009eec:	18ed      	addgt	r5, r5, r3
 8009eee:	2600      	movs	r6, #0
 8009ef0:	341a      	adds	r4, #26
 8009ef2:	42b5      	cmp	r5, r6
 8009ef4:	d11a      	bne.n	8009f2c <_printf_common+0xc8>
 8009ef6:	2000      	movs	r0, #0
 8009ef8:	e008      	b.n	8009f0c <_printf_common+0xa8>
 8009efa:	2301      	movs	r3, #1
 8009efc:	4652      	mov	r2, sl
 8009efe:	4649      	mov	r1, r9
 8009f00:	4638      	mov	r0, r7
 8009f02:	47c0      	blx	r8
 8009f04:	3001      	adds	r0, #1
 8009f06:	d103      	bne.n	8009f10 <_printf_common+0xac>
 8009f08:	f04f 30ff 	mov.w	r0, #4294967295
 8009f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f10:	3501      	adds	r5, #1
 8009f12:	e7c6      	b.n	8009ea2 <_printf_common+0x3e>
 8009f14:	18e1      	adds	r1, r4, r3
 8009f16:	1c5a      	adds	r2, r3, #1
 8009f18:	2030      	movs	r0, #48	; 0x30
 8009f1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f1e:	4422      	add	r2, r4
 8009f20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f28:	3302      	adds	r3, #2
 8009f2a:	e7c7      	b.n	8009ebc <_printf_common+0x58>
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	4622      	mov	r2, r4
 8009f30:	4649      	mov	r1, r9
 8009f32:	4638      	mov	r0, r7
 8009f34:	47c0      	blx	r8
 8009f36:	3001      	adds	r0, #1
 8009f38:	d0e6      	beq.n	8009f08 <_printf_common+0xa4>
 8009f3a:	3601      	adds	r6, #1
 8009f3c:	e7d9      	b.n	8009ef2 <_printf_common+0x8e>
	...

08009f40 <_printf_i>:
 8009f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f44:	460c      	mov	r4, r1
 8009f46:	4691      	mov	r9, r2
 8009f48:	7e27      	ldrb	r7, [r4, #24]
 8009f4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009f4c:	2f78      	cmp	r7, #120	; 0x78
 8009f4e:	4680      	mov	r8, r0
 8009f50:	469a      	mov	sl, r3
 8009f52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f56:	d807      	bhi.n	8009f68 <_printf_i+0x28>
 8009f58:	2f62      	cmp	r7, #98	; 0x62
 8009f5a:	d80a      	bhi.n	8009f72 <_printf_i+0x32>
 8009f5c:	2f00      	cmp	r7, #0
 8009f5e:	f000 80d8 	beq.w	800a112 <_printf_i+0x1d2>
 8009f62:	2f58      	cmp	r7, #88	; 0x58
 8009f64:	f000 80a3 	beq.w	800a0ae <_printf_i+0x16e>
 8009f68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f70:	e03a      	b.n	8009fe8 <_printf_i+0xa8>
 8009f72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f76:	2b15      	cmp	r3, #21
 8009f78:	d8f6      	bhi.n	8009f68 <_printf_i+0x28>
 8009f7a:	a001      	add	r0, pc, #4	; (adr r0, 8009f80 <_printf_i+0x40>)
 8009f7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009f80:	08009fd9 	.word	0x08009fd9
 8009f84:	08009fed 	.word	0x08009fed
 8009f88:	08009f69 	.word	0x08009f69
 8009f8c:	08009f69 	.word	0x08009f69
 8009f90:	08009f69 	.word	0x08009f69
 8009f94:	08009f69 	.word	0x08009f69
 8009f98:	08009fed 	.word	0x08009fed
 8009f9c:	08009f69 	.word	0x08009f69
 8009fa0:	08009f69 	.word	0x08009f69
 8009fa4:	08009f69 	.word	0x08009f69
 8009fa8:	08009f69 	.word	0x08009f69
 8009fac:	0800a0f9 	.word	0x0800a0f9
 8009fb0:	0800a01d 	.word	0x0800a01d
 8009fb4:	0800a0db 	.word	0x0800a0db
 8009fb8:	08009f69 	.word	0x08009f69
 8009fbc:	08009f69 	.word	0x08009f69
 8009fc0:	0800a11b 	.word	0x0800a11b
 8009fc4:	08009f69 	.word	0x08009f69
 8009fc8:	0800a01d 	.word	0x0800a01d
 8009fcc:	08009f69 	.word	0x08009f69
 8009fd0:	08009f69 	.word	0x08009f69
 8009fd4:	0800a0e3 	.word	0x0800a0e3
 8009fd8:	680b      	ldr	r3, [r1, #0]
 8009fda:	1d1a      	adds	r2, r3, #4
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	600a      	str	r2, [r1, #0]
 8009fe0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e0a3      	b.n	800a134 <_printf_i+0x1f4>
 8009fec:	6825      	ldr	r5, [r4, #0]
 8009fee:	6808      	ldr	r0, [r1, #0]
 8009ff0:	062e      	lsls	r6, r5, #24
 8009ff2:	f100 0304 	add.w	r3, r0, #4
 8009ff6:	d50a      	bpl.n	800a00e <_printf_i+0xce>
 8009ff8:	6805      	ldr	r5, [r0, #0]
 8009ffa:	600b      	str	r3, [r1, #0]
 8009ffc:	2d00      	cmp	r5, #0
 8009ffe:	da03      	bge.n	800a008 <_printf_i+0xc8>
 800a000:	232d      	movs	r3, #45	; 0x2d
 800a002:	426d      	negs	r5, r5
 800a004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a008:	485e      	ldr	r0, [pc, #376]	; (800a184 <_printf_i+0x244>)
 800a00a:	230a      	movs	r3, #10
 800a00c:	e019      	b.n	800a042 <_printf_i+0x102>
 800a00e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a012:	6805      	ldr	r5, [r0, #0]
 800a014:	600b      	str	r3, [r1, #0]
 800a016:	bf18      	it	ne
 800a018:	b22d      	sxthne	r5, r5
 800a01a:	e7ef      	b.n	8009ffc <_printf_i+0xbc>
 800a01c:	680b      	ldr	r3, [r1, #0]
 800a01e:	6825      	ldr	r5, [r4, #0]
 800a020:	1d18      	adds	r0, r3, #4
 800a022:	6008      	str	r0, [r1, #0]
 800a024:	0628      	lsls	r0, r5, #24
 800a026:	d501      	bpl.n	800a02c <_printf_i+0xec>
 800a028:	681d      	ldr	r5, [r3, #0]
 800a02a:	e002      	b.n	800a032 <_printf_i+0xf2>
 800a02c:	0669      	lsls	r1, r5, #25
 800a02e:	d5fb      	bpl.n	800a028 <_printf_i+0xe8>
 800a030:	881d      	ldrh	r5, [r3, #0]
 800a032:	4854      	ldr	r0, [pc, #336]	; (800a184 <_printf_i+0x244>)
 800a034:	2f6f      	cmp	r7, #111	; 0x6f
 800a036:	bf0c      	ite	eq
 800a038:	2308      	moveq	r3, #8
 800a03a:	230a      	movne	r3, #10
 800a03c:	2100      	movs	r1, #0
 800a03e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a042:	6866      	ldr	r6, [r4, #4]
 800a044:	60a6      	str	r6, [r4, #8]
 800a046:	2e00      	cmp	r6, #0
 800a048:	bfa2      	ittt	ge
 800a04a:	6821      	ldrge	r1, [r4, #0]
 800a04c:	f021 0104 	bicge.w	r1, r1, #4
 800a050:	6021      	strge	r1, [r4, #0]
 800a052:	b90d      	cbnz	r5, 800a058 <_printf_i+0x118>
 800a054:	2e00      	cmp	r6, #0
 800a056:	d04d      	beq.n	800a0f4 <_printf_i+0x1b4>
 800a058:	4616      	mov	r6, r2
 800a05a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a05e:	fb03 5711 	mls	r7, r3, r1, r5
 800a062:	5dc7      	ldrb	r7, [r0, r7]
 800a064:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a068:	462f      	mov	r7, r5
 800a06a:	42bb      	cmp	r3, r7
 800a06c:	460d      	mov	r5, r1
 800a06e:	d9f4      	bls.n	800a05a <_printf_i+0x11a>
 800a070:	2b08      	cmp	r3, #8
 800a072:	d10b      	bne.n	800a08c <_printf_i+0x14c>
 800a074:	6823      	ldr	r3, [r4, #0]
 800a076:	07df      	lsls	r7, r3, #31
 800a078:	d508      	bpl.n	800a08c <_printf_i+0x14c>
 800a07a:	6923      	ldr	r3, [r4, #16]
 800a07c:	6861      	ldr	r1, [r4, #4]
 800a07e:	4299      	cmp	r1, r3
 800a080:	bfde      	ittt	le
 800a082:	2330      	movle	r3, #48	; 0x30
 800a084:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a088:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a08c:	1b92      	subs	r2, r2, r6
 800a08e:	6122      	str	r2, [r4, #16]
 800a090:	f8cd a000 	str.w	sl, [sp]
 800a094:	464b      	mov	r3, r9
 800a096:	aa03      	add	r2, sp, #12
 800a098:	4621      	mov	r1, r4
 800a09a:	4640      	mov	r0, r8
 800a09c:	f7ff fee2 	bl	8009e64 <_printf_common>
 800a0a0:	3001      	adds	r0, #1
 800a0a2:	d14c      	bne.n	800a13e <_printf_i+0x1fe>
 800a0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a8:	b004      	add	sp, #16
 800a0aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ae:	4835      	ldr	r0, [pc, #212]	; (800a184 <_printf_i+0x244>)
 800a0b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a0b4:	6823      	ldr	r3, [r4, #0]
 800a0b6:	680e      	ldr	r6, [r1, #0]
 800a0b8:	061f      	lsls	r7, r3, #24
 800a0ba:	f856 5b04 	ldr.w	r5, [r6], #4
 800a0be:	600e      	str	r6, [r1, #0]
 800a0c0:	d514      	bpl.n	800a0ec <_printf_i+0x1ac>
 800a0c2:	07d9      	lsls	r1, r3, #31
 800a0c4:	bf44      	itt	mi
 800a0c6:	f043 0320 	orrmi.w	r3, r3, #32
 800a0ca:	6023      	strmi	r3, [r4, #0]
 800a0cc:	b91d      	cbnz	r5, 800a0d6 <_printf_i+0x196>
 800a0ce:	6823      	ldr	r3, [r4, #0]
 800a0d0:	f023 0320 	bic.w	r3, r3, #32
 800a0d4:	6023      	str	r3, [r4, #0]
 800a0d6:	2310      	movs	r3, #16
 800a0d8:	e7b0      	b.n	800a03c <_printf_i+0xfc>
 800a0da:	6823      	ldr	r3, [r4, #0]
 800a0dc:	f043 0320 	orr.w	r3, r3, #32
 800a0e0:	6023      	str	r3, [r4, #0]
 800a0e2:	2378      	movs	r3, #120	; 0x78
 800a0e4:	4828      	ldr	r0, [pc, #160]	; (800a188 <_printf_i+0x248>)
 800a0e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a0ea:	e7e3      	b.n	800a0b4 <_printf_i+0x174>
 800a0ec:	065e      	lsls	r6, r3, #25
 800a0ee:	bf48      	it	mi
 800a0f0:	b2ad      	uxthmi	r5, r5
 800a0f2:	e7e6      	b.n	800a0c2 <_printf_i+0x182>
 800a0f4:	4616      	mov	r6, r2
 800a0f6:	e7bb      	b.n	800a070 <_printf_i+0x130>
 800a0f8:	680b      	ldr	r3, [r1, #0]
 800a0fa:	6826      	ldr	r6, [r4, #0]
 800a0fc:	6960      	ldr	r0, [r4, #20]
 800a0fe:	1d1d      	adds	r5, r3, #4
 800a100:	600d      	str	r5, [r1, #0]
 800a102:	0635      	lsls	r5, r6, #24
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	d501      	bpl.n	800a10c <_printf_i+0x1cc>
 800a108:	6018      	str	r0, [r3, #0]
 800a10a:	e002      	b.n	800a112 <_printf_i+0x1d2>
 800a10c:	0671      	lsls	r1, r6, #25
 800a10e:	d5fb      	bpl.n	800a108 <_printf_i+0x1c8>
 800a110:	8018      	strh	r0, [r3, #0]
 800a112:	2300      	movs	r3, #0
 800a114:	6123      	str	r3, [r4, #16]
 800a116:	4616      	mov	r6, r2
 800a118:	e7ba      	b.n	800a090 <_printf_i+0x150>
 800a11a:	680b      	ldr	r3, [r1, #0]
 800a11c:	1d1a      	adds	r2, r3, #4
 800a11e:	600a      	str	r2, [r1, #0]
 800a120:	681e      	ldr	r6, [r3, #0]
 800a122:	6862      	ldr	r2, [r4, #4]
 800a124:	2100      	movs	r1, #0
 800a126:	4630      	mov	r0, r6
 800a128:	f7f6 f86a 	bl	8000200 <memchr>
 800a12c:	b108      	cbz	r0, 800a132 <_printf_i+0x1f2>
 800a12e:	1b80      	subs	r0, r0, r6
 800a130:	6060      	str	r0, [r4, #4]
 800a132:	6863      	ldr	r3, [r4, #4]
 800a134:	6123      	str	r3, [r4, #16]
 800a136:	2300      	movs	r3, #0
 800a138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a13c:	e7a8      	b.n	800a090 <_printf_i+0x150>
 800a13e:	6923      	ldr	r3, [r4, #16]
 800a140:	4632      	mov	r2, r6
 800a142:	4649      	mov	r1, r9
 800a144:	4640      	mov	r0, r8
 800a146:	47d0      	blx	sl
 800a148:	3001      	adds	r0, #1
 800a14a:	d0ab      	beq.n	800a0a4 <_printf_i+0x164>
 800a14c:	6823      	ldr	r3, [r4, #0]
 800a14e:	079b      	lsls	r3, r3, #30
 800a150:	d413      	bmi.n	800a17a <_printf_i+0x23a>
 800a152:	68e0      	ldr	r0, [r4, #12]
 800a154:	9b03      	ldr	r3, [sp, #12]
 800a156:	4298      	cmp	r0, r3
 800a158:	bfb8      	it	lt
 800a15a:	4618      	movlt	r0, r3
 800a15c:	e7a4      	b.n	800a0a8 <_printf_i+0x168>
 800a15e:	2301      	movs	r3, #1
 800a160:	4632      	mov	r2, r6
 800a162:	4649      	mov	r1, r9
 800a164:	4640      	mov	r0, r8
 800a166:	47d0      	blx	sl
 800a168:	3001      	adds	r0, #1
 800a16a:	d09b      	beq.n	800a0a4 <_printf_i+0x164>
 800a16c:	3501      	adds	r5, #1
 800a16e:	68e3      	ldr	r3, [r4, #12]
 800a170:	9903      	ldr	r1, [sp, #12]
 800a172:	1a5b      	subs	r3, r3, r1
 800a174:	42ab      	cmp	r3, r5
 800a176:	dcf2      	bgt.n	800a15e <_printf_i+0x21e>
 800a178:	e7eb      	b.n	800a152 <_printf_i+0x212>
 800a17a:	2500      	movs	r5, #0
 800a17c:	f104 0619 	add.w	r6, r4, #25
 800a180:	e7f5      	b.n	800a16e <_printf_i+0x22e>
 800a182:	bf00      	nop
 800a184:	0800ad69 	.word	0x0800ad69
 800a188:	0800ad7a 	.word	0x0800ad7a

0800a18c <__swbuf_r>:
 800a18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a18e:	460e      	mov	r6, r1
 800a190:	4614      	mov	r4, r2
 800a192:	4605      	mov	r5, r0
 800a194:	b118      	cbz	r0, 800a19e <__swbuf_r+0x12>
 800a196:	6983      	ldr	r3, [r0, #24]
 800a198:	b90b      	cbnz	r3, 800a19e <__swbuf_r+0x12>
 800a19a:	f000 f9d9 	bl	800a550 <__sinit>
 800a19e:	4b21      	ldr	r3, [pc, #132]	; (800a224 <__swbuf_r+0x98>)
 800a1a0:	429c      	cmp	r4, r3
 800a1a2:	d12b      	bne.n	800a1fc <__swbuf_r+0x70>
 800a1a4:	686c      	ldr	r4, [r5, #4]
 800a1a6:	69a3      	ldr	r3, [r4, #24]
 800a1a8:	60a3      	str	r3, [r4, #8]
 800a1aa:	89a3      	ldrh	r3, [r4, #12]
 800a1ac:	071a      	lsls	r2, r3, #28
 800a1ae:	d52f      	bpl.n	800a210 <__swbuf_r+0x84>
 800a1b0:	6923      	ldr	r3, [r4, #16]
 800a1b2:	b36b      	cbz	r3, 800a210 <__swbuf_r+0x84>
 800a1b4:	6923      	ldr	r3, [r4, #16]
 800a1b6:	6820      	ldr	r0, [r4, #0]
 800a1b8:	1ac0      	subs	r0, r0, r3
 800a1ba:	6963      	ldr	r3, [r4, #20]
 800a1bc:	b2f6      	uxtb	r6, r6
 800a1be:	4283      	cmp	r3, r0
 800a1c0:	4637      	mov	r7, r6
 800a1c2:	dc04      	bgt.n	800a1ce <__swbuf_r+0x42>
 800a1c4:	4621      	mov	r1, r4
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	f000 f92e 	bl	800a428 <_fflush_r>
 800a1cc:	bb30      	cbnz	r0, 800a21c <__swbuf_r+0x90>
 800a1ce:	68a3      	ldr	r3, [r4, #8]
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	60a3      	str	r3, [r4, #8]
 800a1d4:	6823      	ldr	r3, [r4, #0]
 800a1d6:	1c5a      	adds	r2, r3, #1
 800a1d8:	6022      	str	r2, [r4, #0]
 800a1da:	701e      	strb	r6, [r3, #0]
 800a1dc:	6963      	ldr	r3, [r4, #20]
 800a1de:	3001      	adds	r0, #1
 800a1e0:	4283      	cmp	r3, r0
 800a1e2:	d004      	beq.n	800a1ee <__swbuf_r+0x62>
 800a1e4:	89a3      	ldrh	r3, [r4, #12]
 800a1e6:	07db      	lsls	r3, r3, #31
 800a1e8:	d506      	bpl.n	800a1f8 <__swbuf_r+0x6c>
 800a1ea:	2e0a      	cmp	r6, #10
 800a1ec:	d104      	bne.n	800a1f8 <__swbuf_r+0x6c>
 800a1ee:	4621      	mov	r1, r4
 800a1f0:	4628      	mov	r0, r5
 800a1f2:	f000 f919 	bl	800a428 <_fflush_r>
 800a1f6:	b988      	cbnz	r0, 800a21c <__swbuf_r+0x90>
 800a1f8:	4638      	mov	r0, r7
 800a1fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1fc:	4b0a      	ldr	r3, [pc, #40]	; (800a228 <__swbuf_r+0x9c>)
 800a1fe:	429c      	cmp	r4, r3
 800a200:	d101      	bne.n	800a206 <__swbuf_r+0x7a>
 800a202:	68ac      	ldr	r4, [r5, #8]
 800a204:	e7cf      	b.n	800a1a6 <__swbuf_r+0x1a>
 800a206:	4b09      	ldr	r3, [pc, #36]	; (800a22c <__swbuf_r+0xa0>)
 800a208:	429c      	cmp	r4, r3
 800a20a:	bf08      	it	eq
 800a20c:	68ec      	ldreq	r4, [r5, #12]
 800a20e:	e7ca      	b.n	800a1a6 <__swbuf_r+0x1a>
 800a210:	4621      	mov	r1, r4
 800a212:	4628      	mov	r0, r5
 800a214:	f000 f80c 	bl	800a230 <__swsetup_r>
 800a218:	2800      	cmp	r0, #0
 800a21a:	d0cb      	beq.n	800a1b4 <__swbuf_r+0x28>
 800a21c:	f04f 37ff 	mov.w	r7, #4294967295
 800a220:	e7ea      	b.n	800a1f8 <__swbuf_r+0x6c>
 800a222:	bf00      	nop
 800a224:	0800adac 	.word	0x0800adac
 800a228:	0800adcc 	.word	0x0800adcc
 800a22c:	0800ad8c 	.word	0x0800ad8c

0800a230 <__swsetup_r>:
 800a230:	4b32      	ldr	r3, [pc, #200]	; (800a2fc <__swsetup_r+0xcc>)
 800a232:	b570      	push	{r4, r5, r6, lr}
 800a234:	681d      	ldr	r5, [r3, #0]
 800a236:	4606      	mov	r6, r0
 800a238:	460c      	mov	r4, r1
 800a23a:	b125      	cbz	r5, 800a246 <__swsetup_r+0x16>
 800a23c:	69ab      	ldr	r3, [r5, #24]
 800a23e:	b913      	cbnz	r3, 800a246 <__swsetup_r+0x16>
 800a240:	4628      	mov	r0, r5
 800a242:	f000 f985 	bl	800a550 <__sinit>
 800a246:	4b2e      	ldr	r3, [pc, #184]	; (800a300 <__swsetup_r+0xd0>)
 800a248:	429c      	cmp	r4, r3
 800a24a:	d10f      	bne.n	800a26c <__swsetup_r+0x3c>
 800a24c:	686c      	ldr	r4, [r5, #4]
 800a24e:	89a3      	ldrh	r3, [r4, #12]
 800a250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a254:	0719      	lsls	r1, r3, #28
 800a256:	d42c      	bmi.n	800a2b2 <__swsetup_r+0x82>
 800a258:	06dd      	lsls	r5, r3, #27
 800a25a:	d411      	bmi.n	800a280 <__swsetup_r+0x50>
 800a25c:	2309      	movs	r3, #9
 800a25e:	6033      	str	r3, [r6, #0]
 800a260:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a264:	81a3      	strh	r3, [r4, #12]
 800a266:	f04f 30ff 	mov.w	r0, #4294967295
 800a26a:	e03e      	b.n	800a2ea <__swsetup_r+0xba>
 800a26c:	4b25      	ldr	r3, [pc, #148]	; (800a304 <__swsetup_r+0xd4>)
 800a26e:	429c      	cmp	r4, r3
 800a270:	d101      	bne.n	800a276 <__swsetup_r+0x46>
 800a272:	68ac      	ldr	r4, [r5, #8]
 800a274:	e7eb      	b.n	800a24e <__swsetup_r+0x1e>
 800a276:	4b24      	ldr	r3, [pc, #144]	; (800a308 <__swsetup_r+0xd8>)
 800a278:	429c      	cmp	r4, r3
 800a27a:	bf08      	it	eq
 800a27c:	68ec      	ldreq	r4, [r5, #12]
 800a27e:	e7e6      	b.n	800a24e <__swsetup_r+0x1e>
 800a280:	0758      	lsls	r0, r3, #29
 800a282:	d512      	bpl.n	800a2aa <__swsetup_r+0x7a>
 800a284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a286:	b141      	cbz	r1, 800a29a <__swsetup_r+0x6a>
 800a288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a28c:	4299      	cmp	r1, r3
 800a28e:	d002      	beq.n	800a296 <__swsetup_r+0x66>
 800a290:	4630      	mov	r0, r6
 800a292:	f7ff fc3d 	bl	8009b10 <_free_r>
 800a296:	2300      	movs	r3, #0
 800a298:	6363      	str	r3, [r4, #52]	; 0x34
 800a29a:	89a3      	ldrh	r3, [r4, #12]
 800a29c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2a0:	81a3      	strh	r3, [r4, #12]
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	6063      	str	r3, [r4, #4]
 800a2a6:	6923      	ldr	r3, [r4, #16]
 800a2a8:	6023      	str	r3, [r4, #0]
 800a2aa:	89a3      	ldrh	r3, [r4, #12]
 800a2ac:	f043 0308 	orr.w	r3, r3, #8
 800a2b0:	81a3      	strh	r3, [r4, #12]
 800a2b2:	6923      	ldr	r3, [r4, #16]
 800a2b4:	b94b      	cbnz	r3, 800a2ca <__swsetup_r+0x9a>
 800a2b6:	89a3      	ldrh	r3, [r4, #12]
 800a2b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2c0:	d003      	beq.n	800a2ca <__swsetup_r+0x9a>
 800a2c2:	4621      	mov	r1, r4
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	f000 fa07 	bl	800a6d8 <__smakebuf_r>
 800a2ca:	89a0      	ldrh	r0, [r4, #12]
 800a2cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2d0:	f010 0301 	ands.w	r3, r0, #1
 800a2d4:	d00a      	beq.n	800a2ec <__swsetup_r+0xbc>
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	60a3      	str	r3, [r4, #8]
 800a2da:	6963      	ldr	r3, [r4, #20]
 800a2dc:	425b      	negs	r3, r3
 800a2de:	61a3      	str	r3, [r4, #24]
 800a2e0:	6923      	ldr	r3, [r4, #16]
 800a2e2:	b943      	cbnz	r3, 800a2f6 <__swsetup_r+0xc6>
 800a2e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a2e8:	d1ba      	bne.n	800a260 <__swsetup_r+0x30>
 800a2ea:	bd70      	pop	{r4, r5, r6, pc}
 800a2ec:	0781      	lsls	r1, r0, #30
 800a2ee:	bf58      	it	pl
 800a2f0:	6963      	ldrpl	r3, [r4, #20]
 800a2f2:	60a3      	str	r3, [r4, #8]
 800a2f4:	e7f4      	b.n	800a2e0 <__swsetup_r+0xb0>
 800a2f6:	2000      	movs	r0, #0
 800a2f8:	e7f7      	b.n	800a2ea <__swsetup_r+0xba>
 800a2fa:	bf00      	nop
 800a2fc:	2000000c 	.word	0x2000000c
 800a300:	0800adac 	.word	0x0800adac
 800a304:	0800adcc 	.word	0x0800adcc
 800a308:	0800ad8c 	.word	0x0800ad8c

0800a30c <abort>:
 800a30c:	b508      	push	{r3, lr}
 800a30e:	2006      	movs	r0, #6
 800a310:	f000 fa4a 	bl	800a7a8 <raise>
 800a314:	2001      	movs	r0, #1
 800a316:	f7f7 ffeb 	bl	80022f0 <_exit>
	...

0800a31c <__sflush_r>:
 800a31c:	898a      	ldrh	r2, [r1, #12]
 800a31e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a322:	4605      	mov	r5, r0
 800a324:	0710      	lsls	r0, r2, #28
 800a326:	460c      	mov	r4, r1
 800a328:	d458      	bmi.n	800a3dc <__sflush_r+0xc0>
 800a32a:	684b      	ldr	r3, [r1, #4]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	dc05      	bgt.n	800a33c <__sflush_r+0x20>
 800a330:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a332:	2b00      	cmp	r3, #0
 800a334:	dc02      	bgt.n	800a33c <__sflush_r+0x20>
 800a336:	2000      	movs	r0, #0
 800a338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a33c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a33e:	2e00      	cmp	r6, #0
 800a340:	d0f9      	beq.n	800a336 <__sflush_r+0x1a>
 800a342:	2300      	movs	r3, #0
 800a344:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a348:	682f      	ldr	r7, [r5, #0]
 800a34a:	602b      	str	r3, [r5, #0]
 800a34c:	d032      	beq.n	800a3b4 <__sflush_r+0x98>
 800a34e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a350:	89a3      	ldrh	r3, [r4, #12]
 800a352:	075a      	lsls	r2, r3, #29
 800a354:	d505      	bpl.n	800a362 <__sflush_r+0x46>
 800a356:	6863      	ldr	r3, [r4, #4]
 800a358:	1ac0      	subs	r0, r0, r3
 800a35a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a35c:	b10b      	cbz	r3, 800a362 <__sflush_r+0x46>
 800a35e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a360:	1ac0      	subs	r0, r0, r3
 800a362:	2300      	movs	r3, #0
 800a364:	4602      	mov	r2, r0
 800a366:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a368:	6a21      	ldr	r1, [r4, #32]
 800a36a:	4628      	mov	r0, r5
 800a36c:	47b0      	blx	r6
 800a36e:	1c43      	adds	r3, r0, #1
 800a370:	89a3      	ldrh	r3, [r4, #12]
 800a372:	d106      	bne.n	800a382 <__sflush_r+0x66>
 800a374:	6829      	ldr	r1, [r5, #0]
 800a376:	291d      	cmp	r1, #29
 800a378:	d82c      	bhi.n	800a3d4 <__sflush_r+0xb8>
 800a37a:	4a2a      	ldr	r2, [pc, #168]	; (800a424 <__sflush_r+0x108>)
 800a37c:	40ca      	lsrs	r2, r1
 800a37e:	07d6      	lsls	r6, r2, #31
 800a380:	d528      	bpl.n	800a3d4 <__sflush_r+0xb8>
 800a382:	2200      	movs	r2, #0
 800a384:	6062      	str	r2, [r4, #4]
 800a386:	04d9      	lsls	r1, r3, #19
 800a388:	6922      	ldr	r2, [r4, #16]
 800a38a:	6022      	str	r2, [r4, #0]
 800a38c:	d504      	bpl.n	800a398 <__sflush_r+0x7c>
 800a38e:	1c42      	adds	r2, r0, #1
 800a390:	d101      	bne.n	800a396 <__sflush_r+0x7a>
 800a392:	682b      	ldr	r3, [r5, #0]
 800a394:	b903      	cbnz	r3, 800a398 <__sflush_r+0x7c>
 800a396:	6560      	str	r0, [r4, #84]	; 0x54
 800a398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a39a:	602f      	str	r7, [r5, #0]
 800a39c:	2900      	cmp	r1, #0
 800a39e:	d0ca      	beq.n	800a336 <__sflush_r+0x1a>
 800a3a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3a4:	4299      	cmp	r1, r3
 800a3a6:	d002      	beq.n	800a3ae <__sflush_r+0x92>
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	f7ff fbb1 	bl	8009b10 <_free_r>
 800a3ae:	2000      	movs	r0, #0
 800a3b0:	6360      	str	r0, [r4, #52]	; 0x34
 800a3b2:	e7c1      	b.n	800a338 <__sflush_r+0x1c>
 800a3b4:	6a21      	ldr	r1, [r4, #32]
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	47b0      	blx	r6
 800a3bc:	1c41      	adds	r1, r0, #1
 800a3be:	d1c7      	bne.n	800a350 <__sflush_r+0x34>
 800a3c0:	682b      	ldr	r3, [r5, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d0c4      	beq.n	800a350 <__sflush_r+0x34>
 800a3c6:	2b1d      	cmp	r3, #29
 800a3c8:	d001      	beq.n	800a3ce <__sflush_r+0xb2>
 800a3ca:	2b16      	cmp	r3, #22
 800a3cc:	d101      	bne.n	800a3d2 <__sflush_r+0xb6>
 800a3ce:	602f      	str	r7, [r5, #0]
 800a3d0:	e7b1      	b.n	800a336 <__sflush_r+0x1a>
 800a3d2:	89a3      	ldrh	r3, [r4, #12]
 800a3d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3d8:	81a3      	strh	r3, [r4, #12]
 800a3da:	e7ad      	b.n	800a338 <__sflush_r+0x1c>
 800a3dc:	690f      	ldr	r7, [r1, #16]
 800a3de:	2f00      	cmp	r7, #0
 800a3e0:	d0a9      	beq.n	800a336 <__sflush_r+0x1a>
 800a3e2:	0793      	lsls	r3, r2, #30
 800a3e4:	680e      	ldr	r6, [r1, #0]
 800a3e6:	bf08      	it	eq
 800a3e8:	694b      	ldreq	r3, [r1, #20]
 800a3ea:	600f      	str	r7, [r1, #0]
 800a3ec:	bf18      	it	ne
 800a3ee:	2300      	movne	r3, #0
 800a3f0:	eba6 0807 	sub.w	r8, r6, r7
 800a3f4:	608b      	str	r3, [r1, #8]
 800a3f6:	f1b8 0f00 	cmp.w	r8, #0
 800a3fa:	dd9c      	ble.n	800a336 <__sflush_r+0x1a>
 800a3fc:	6a21      	ldr	r1, [r4, #32]
 800a3fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a400:	4643      	mov	r3, r8
 800a402:	463a      	mov	r2, r7
 800a404:	4628      	mov	r0, r5
 800a406:	47b0      	blx	r6
 800a408:	2800      	cmp	r0, #0
 800a40a:	dc06      	bgt.n	800a41a <__sflush_r+0xfe>
 800a40c:	89a3      	ldrh	r3, [r4, #12]
 800a40e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a412:	81a3      	strh	r3, [r4, #12]
 800a414:	f04f 30ff 	mov.w	r0, #4294967295
 800a418:	e78e      	b.n	800a338 <__sflush_r+0x1c>
 800a41a:	4407      	add	r7, r0
 800a41c:	eba8 0800 	sub.w	r8, r8, r0
 800a420:	e7e9      	b.n	800a3f6 <__sflush_r+0xda>
 800a422:	bf00      	nop
 800a424:	20400001 	.word	0x20400001

0800a428 <_fflush_r>:
 800a428:	b538      	push	{r3, r4, r5, lr}
 800a42a:	690b      	ldr	r3, [r1, #16]
 800a42c:	4605      	mov	r5, r0
 800a42e:	460c      	mov	r4, r1
 800a430:	b913      	cbnz	r3, 800a438 <_fflush_r+0x10>
 800a432:	2500      	movs	r5, #0
 800a434:	4628      	mov	r0, r5
 800a436:	bd38      	pop	{r3, r4, r5, pc}
 800a438:	b118      	cbz	r0, 800a442 <_fflush_r+0x1a>
 800a43a:	6983      	ldr	r3, [r0, #24]
 800a43c:	b90b      	cbnz	r3, 800a442 <_fflush_r+0x1a>
 800a43e:	f000 f887 	bl	800a550 <__sinit>
 800a442:	4b14      	ldr	r3, [pc, #80]	; (800a494 <_fflush_r+0x6c>)
 800a444:	429c      	cmp	r4, r3
 800a446:	d11b      	bne.n	800a480 <_fflush_r+0x58>
 800a448:	686c      	ldr	r4, [r5, #4]
 800a44a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d0ef      	beq.n	800a432 <_fflush_r+0xa>
 800a452:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a454:	07d0      	lsls	r0, r2, #31
 800a456:	d404      	bmi.n	800a462 <_fflush_r+0x3a>
 800a458:	0599      	lsls	r1, r3, #22
 800a45a:	d402      	bmi.n	800a462 <_fflush_r+0x3a>
 800a45c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a45e:	f000 f915 	bl	800a68c <__retarget_lock_acquire_recursive>
 800a462:	4628      	mov	r0, r5
 800a464:	4621      	mov	r1, r4
 800a466:	f7ff ff59 	bl	800a31c <__sflush_r>
 800a46a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a46c:	07da      	lsls	r2, r3, #31
 800a46e:	4605      	mov	r5, r0
 800a470:	d4e0      	bmi.n	800a434 <_fflush_r+0xc>
 800a472:	89a3      	ldrh	r3, [r4, #12]
 800a474:	059b      	lsls	r3, r3, #22
 800a476:	d4dd      	bmi.n	800a434 <_fflush_r+0xc>
 800a478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a47a:	f000 f908 	bl	800a68e <__retarget_lock_release_recursive>
 800a47e:	e7d9      	b.n	800a434 <_fflush_r+0xc>
 800a480:	4b05      	ldr	r3, [pc, #20]	; (800a498 <_fflush_r+0x70>)
 800a482:	429c      	cmp	r4, r3
 800a484:	d101      	bne.n	800a48a <_fflush_r+0x62>
 800a486:	68ac      	ldr	r4, [r5, #8]
 800a488:	e7df      	b.n	800a44a <_fflush_r+0x22>
 800a48a:	4b04      	ldr	r3, [pc, #16]	; (800a49c <_fflush_r+0x74>)
 800a48c:	429c      	cmp	r4, r3
 800a48e:	bf08      	it	eq
 800a490:	68ec      	ldreq	r4, [r5, #12]
 800a492:	e7da      	b.n	800a44a <_fflush_r+0x22>
 800a494:	0800adac 	.word	0x0800adac
 800a498:	0800adcc 	.word	0x0800adcc
 800a49c:	0800ad8c 	.word	0x0800ad8c

0800a4a0 <std>:
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	b510      	push	{r4, lr}
 800a4a4:	4604      	mov	r4, r0
 800a4a6:	e9c0 3300 	strd	r3, r3, [r0]
 800a4aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4ae:	6083      	str	r3, [r0, #8]
 800a4b0:	8181      	strh	r1, [r0, #12]
 800a4b2:	6643      	str	r3, [r0, #100]	; 0x64
 800a4b4:	81c2      	strh	r2, [r0, #14]
 800a4b6:	6183      	str	r3, [r0, #24]
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	2208      	movs	r2, #8
 800a4bc:	305c      	adds	r0, #92	; 0x5c
 800a4be:	f7fd fb21 	bl	8007b04 <memset>
 800a4c2:	4b05      	ldr	r3, [pc, #20]	; (800a4d8 <std+0x38>)
 800a4c4:	6263      	str	r3, [r4, #36]	; 0x24
 800a4c6:	4b05      	ldr	r3, [pc, #20]	; (800a4dc <std+0x3c>)
 800a4c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a4ca:	4b05      	ldr	r3, [pc, #20]	; (800a4e0 <std+0x40>)
 800a4cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a4ce:	4b05      	ldr	r3, [pc, #20]	; (800a4e4 <std+0x44>)
 800a4d0:	6224      	str	r4, [r4, #32]
 800a4d2:	6323      	str	r3, [r4, #48]	; 0x30
 800a4d4:	bd10      	pop	{r4, pc}
 800a4d6:	bf00      	nop
 800a4d8:	0800a7e1 	.word	0x0800a7e1
 800a4dc:	0800a803 	.word	0x0800a803
 800a4e0:	0800a83b 	.word	0x0800a83b
 800a4e4:	0800a85f 	.word	0x0800a85f

0800a4e8 <_cleanup_r>:
 800a4e8:	4901      	ldr	r1, [pc, #4]	; (800a4f0 <_cleanup_r+0x8>)
 800a4ea:	f000 b8af 	b.w	800a64c <_fwalk_reent>
 800a4ee:	bf00      	nop
 800a4f0:	0800a429 	.word	0x0800a429

0800a4f4 <__sfmoreglue>:
 800a4f4:	b570      	push	{r4, r5, r6, lr}
 800a4f6:	1e4a      	subs	r2, r1, #1
 800a4f8:	2568      	movs	r5, #104	; 0x68
 800a4fa:	4355      	muls	r5, r2
 800a4fc:	460e      	mov	r6, r1
 800a4fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a502:	f7ff fa2d 	bl	8009960 <_malloc_r>
 800a506:	4604      	mov	r4, r0
 800a508:	b140      	cbz	r0, 800a51c <__sfmoreglue+0x28>
 800a50a:	2100      	movs	r1, #0
 800a50c:	e9c0 1600 	strd	r1, r6, [r0]
 800a510:	300c      	adds	r0, #12
 800a512:	60a0      	str	r0, [r4, #8]
 800a514:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a518:	f7fd faf4 	bl	8007b04 <memset>
 800a51c:	4620      	mov	r0, r4
 800a51e:	bd70      	pop	{r4, r5, r6, pc}

0800a520 <__sfp_lock_acquire>:
 800a520:	4801      	ldr	r0, [pc, #4]	; (800a528 <__sfp_lock_acquire+0x8>)
 800a522:	f000 b8b3 	b.w	800a68c <__retarget_lock_acquire_recursive>
 800a526:	bf00      	nop
 800a528:	2000065c 	.word	0x2000065c

0800a52c <__sfp_lock_release>:
 800a52c:	4801      	ldr	r0, [pc, #4]	; (800a534 <__sfp_lock_release+0x8>)
 800a52e:	f000 b8ae 	b.w	800a68e <__retarget_lock_release_recursive>
 800a532:	bf00      	nop
 800a534:	2000065c 	.word	0x2000065c

0800a538 <__sinit_lock_acquire>:
 800a538:	4801      	ldr	r0, [pc, #4]	; (800a540 <__sinit_lock_acquire+0x8>)
 800a53a:	f000 b8a7 	b.w	800a68c <__retarget_lock_acquire_recursive>
 800a53e:	bf00      	nop
 800a540:	20000657 	.word	0x20000657

0800a544 <__sinit_lock_release>:
 800a544:	4801      	ldr	r0, [pc, #4]	; (800a54c <__sinit_lock_release+0x8>)
 800a546:	f000 b8a2 	b.w	800a68e <__retarget_lock_release_recursive>
 800a54a:	bf00      	nop
 800a54c:	20000657 	.word	0x20000657

0800a550 <__sinit>:
 800a550:	b510      	push	{r4, lr}
 800a552:	4604      	mov	r4, r0
 800a554:	f7ff fff0 	bl	800a538 <__sinit_lock_acquire>
 800a558:	69a3      	ldr	r3, [r4, #24]
 800a55a:	b11b      	cbz	r3, 800a564 <__sinit+0x14>
 800a55c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a560:	f7ff bff0 	b.w	800a544 <__sinit_lock_release>
 800a564:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a568:	6523      	str	r3, [r4, #80]	; 0x50
 800a56a:	4b13      	ldr	r3, [pc, #76]	; (800a5b8 <__sinit+0x68>)
 800a56c:	4a13      	ldr	r2, [pc, #76]	; (800a5bc <__sinit+0x6c>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	62a2      	str	r2, [r4, #40]	; 0x28
 800a572:	42a3      	cmp	r3, r4
 800a574:	bf04      	itt	eq
 800a576:	2301      	moveq	r3, #1
 800a578:	61a3      	streq	r3, [r4, #24]
 800a57a:	4620      	mov	r0, r4
 800a57c:	f000 f820 	bl	800a5c0 <__sfp>
 800a580:	6060      	str	r0, [r4, #4]
 800a582:	4620      	mov	r0, r4
 800a584:	f000 f81c 	bl	800a5c0 <__sfp>
 800a588:	60a0      	str	r0, [r4, #8]
 800a58a:	4620      	mov	r0, r4
 800a58c:	f000 f818 	bl	800a5c0 <__sfp>
 800a590:	2200      	movs	r2, #0
 800a592:	60e0      	str	r0, [r4, #12]
 800a594:	2104      	movs	r1, #4
 800a596:	6860      	ldr	r0, [r4, #4]
 800a598:	f7ff ff82 	bl	800a4a0 <std>
 800a59c:	68a0      	ldr	r0, [r4, #8]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	2109      	movs	r1, #9
 800a5a2:	f7ff ff7d 	bl	800a4a0 <std>
 800a5a6:	68e0      	ldr	r0, [r4, #12]
 800a5a8:	2202      	movs	r2, #2
 800a5aa:	2112      	movs	r1, #18
 800a5ac:	f7ff ff78 	bl	800a4a0 <std>
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	61a3      	str	r3, [r4, #24]
 800a5b4:	e7d2      	b.n	800a55c <__sinit+0xc>
 800a5b6:	bf00      	nop
 800a5b8:	0800a9b4 	.word	0x0800a9b4
 800a5bc:	0800a4e9 	.word	0x0800a4e9

0800a5c0 <__sfp>:
 800a5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c2:	4607      	mov	r7, r0
 800a5c4:	f7ff ffac 	bl	800a520 <__sfp_lock_acquire>
 800a5c8:	4b1e      	ldr	r3, [pc, #120]	; (800a644 <__sfp+0x84>)
 800a5ca:	681e      	ldr	r6, [r3, #0]
 800a5cc:	69b3      	ldr	r3, [r6, #24]
 800a5ce:	b913      	cbnz	r3, 800a5d6 <__sfp+0x16>
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	f7ff ffbd 	bl	800a550 <__sinit>
 800a5d6:	3648      	adds	r6, #72	; 0x48
 800a5d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	d503      	bpl.n	800a5e8 <__sfp+0x28>
 800a5e0:	6833      	ldr	r3, [r6, #0]
 800a5e2:	b30b      	cbz	r3, 800a628 <__sfp+0x68>
 800a5e4:	6836      	ldr	r6, [r6, #0]
 800a5e6:	e7f7      	b.n	800a5d8 <__sfp+0x18>
 800a5e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a5ec:	b9d5      	cbnz	r5, 800a624 <__sfp+0x64>
 800a5ee:	4b16      	ldr	r3, [pc, #88]	; (800a648 <__sfp+0x88>)
 800a5f0:	60e3      	str	r3, [r4, #12]
 800a5f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a5f6:	6665      	str	r5, [r4, #100]	; 0x64
 800a5f8:	f000 f847 	bl	800a68a <__retarget_lock_init_recursive>
 800a5fc:	f7ff ff96 	bl	800a52c <__sfp_lock_release>
 800a600:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a604:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a608:	6025      	str	r5, [r4, #0]
 800a60a:	61a5      	str	r5, [r4, #24]
 800a60c:	2208      	movs	r2, #8
 800a60e:	4629      	mov	r1, r5
 800a610:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a614:	f7fd fa76 	bl	8007b04 <memset>
 800a618:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a61c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a620:	4620      	mov	r0, r4
 800a622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a624:	3468      	adds	r4, #104	; 0x68
 800a626:	e7d9      	b.n	800a5dc <__sfp+0x1c>
 800a628:	2104      	movs	r1, #4
 800a62a:	4638      	mov	r0, r7
 800a62c:	f7ff ff62 	bl	800a4f4 <__sfmoreglue>
 800a630:	4604      	mov	r4, r0
 800a632:	6030      	str	r0, [r6, #0]
 800a634:	2800      	cmp	r0, #0
 800a636:	d1d5      	bne.n	800a5e4 <__sfp+0x24>
 800a638:	f7ff ff78 	bl	800a52c <__sfp_lock_release>
 800a63c:	230c      	movs	r3, #12
 800a63e:	603b      	str	r3, [r7, #0]
 800a640:	e7ee      	b.n	800a620 <__sfp+0x60>
 800a642:	bf00      	nop
 800a644:	0800a9b4 	.word	0x0800a9b4
 800a648:	ffff0001 	.word	0xffff0001

0800a64c <_fwalk_reent>:
 800a64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a650:	4606      	mov	r6, r0
 800a652:	4688      	mov	r8, r1
 800a654:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a658:	2700      	movs	r7, #0
 800a65a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a65e:	f1b9 0901 	subs.w	r9, r9, #1
 800a662:	d505      	bpl.n	800a670 <_fwalk_reent+0x24>
 800a664:	6824      	ldr	r4, [r4, #0]
 800a666:	2c00      	cmp	r4, #0
 800a668:	d1f7      	bne.n	800a65a <_fwalk_reent+0xe>
 800a66a:	4638      	mov	r0, r7
 800a66c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a670:	89ab      	ldrh	r3, [r5, #12]
 800a672:	2b01      	cmp	r3, #1
 800a674:	d907      	bls.n	800a686 <_fwalk_reent+0x3a>
 800a676:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a67a:	3301      	adds	r3, #1
 800a67c:	d003      	beq.n	800a686 <_fwalk_reent+0x3a>
 800a67e:	4629      	mov	r1, r5
 800a680:	4630      	mov	r0, r6
 800a682:	47c0      	blx	r8
 800a684:	4307      	orrs	r7, r0
 800a686:	3568      	adds	r5, #104	; 0x68
 800a688:	e7e9      	b.n	800a65e <_fwalk_reent+0x12>

0800a68a <__retarget_lock_init_recursive>:
 800a68a:	4770      	bx	lr

0800a68c <__retarget_lock_acquire_recursive>:
 800a68c:	4770      	bx	lr

0800a68e <__retarget_lock_release_recursive>:
 800a68e:	4770      	bx	lr

0800a690 <__swhatbuf_r>:
 800a690:	b570      	push	{r4, r5, r6, lr}
 800a692:	460e      	mov	r6, r1
 800a694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a698:	2900      	cmp	r1, #0
 800a69a:	b096      	sub	sp, #88	; 0x58
 800a69c:	4614      	mov	r4, r2
 800a69e:	461d      	mov	r5, r3
 800a6a0:	da07      	bge.n	800a6b2 <__swhatbuf_r+0x22>
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	602b      	str	r3, [r5, #0]
 800a6a6:	89b3      	ldrh	r3, [r6, #12]
 800a6a8:	061a      	lsls	r2, r3, #24
 800a6aa:	d410      	bmi.n	800a6ce <__swhatbuf_r+0x3e>
 800a6ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6b0:	e00e      	b.n	800a6d0 <__swhatbuf_r+0x40>
 800a6b2:	466a      	mov	r2, sp
 800a6b4:	f000 f8fa 	bl	800a8ac <_fstat_r>
 800a6b8:	2800      	cmp	r0, #0
 800a6ba:	dbf2      	blt.n	800a6a2 <__swhatbuf_r+0x12>
 800a6bc:	9a01      	ldr	r2, [sp, #4]
 800a6be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a6c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a6c6:	425a      	negs	r2, r3
 800a6c8:	415a      	adcs	r2, r3
 800a6ca:	602a      	str	r2, [r5, #0]
 800a6cc:	e7ee      	b.n	800a6ac <__swhatbuf_r+0x1c>
 800a6ce:	2340      	movs	r3, #64	; 0x40
 800a6d0:	2000      	movs	r0, #0
 800a6d2:	6023      	str	r3, [r4, #0]
 800a6d4:	b016      	add	sp, #88	; 0x58
 800a6d6:	bd70      	pop	{r4, r5, r6, pc}

0800a6d8 <__smakebuf_r>:
 800a6d8:	898b      	ldrh	r3, [r1, #12]
 800a6da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6dc:	079d      	lsls	r5, r3, #30
 800a6de:	4606      	mov	r6, r0
 800a6e0:	460c      	mov	r4, r1
 800a6e2:	d507      	bpl.n	800a6f4 <__smakebuf_r+0x1c>
 800a6e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a6e8:	6023      	str	r3, [r4, #0]
 800a6ea:	6123      	str	r3, [r4, #16]
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	6163      	str	r3, [r4, #20]
 800a6f0:	b002      	add	sp, #8
 800a6f2:	bd70      	pop	{r4, r5, r6, pc}
 800a6f4:	ab01      	add	r3, sp, #4
 800a6f6:	466a      	mov	r2, sp
 800a6f8:	f7ff ffca 	bl	800a690 <__swhatbuf_r>
 800a6fc:	9900      	ldr	r1, [sp, #0]
 800a6fe:	4605      	mov	r5, r0
 800a700:	4630      	mov	r0, r6
 800a702:	f7ff f92d 	bl	8009960 <_malloc_r>
 800a706:	b948      	cbnz	r0, 800a71c <__smakebuf_r+0x44>
 800a708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a70c:	059a      	lsls	r2, r3, #22
 800a70e:	d4ef      	bmi.n	800a6f0 <__smakebuf_r+0x18>
 800a710:	f023 0303 	bic.w	r3, r3, #3
 800a714:	f043 0302 	orr.w	r3, r3, #2
 800a718:	81a3      	strh	r3, [r4, #12]
 800a71a:	e7e3      	b.n	800a6e4 <__smakebuf_r+0xc>
 800a71c:	4b0d      	ldr	r3, [pc, #52]	; (800a754 <__smakebuf_r+0x7c>)
 800a71e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a720:	89a3      	ldrh	r3, [r4, #12]
 800a722:	6020      	str	r0, [r4, #0]
 800a724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a728:	81a3      	strh	r3, [r4, #12]
 800a72a:	9b00      	ldr	r3, [sp, #0]
 800a72c:	6163      	str	r3, [r4, #20]
 800a72e:	9b01      	ldr	r3, [sp, #4]
 800a730:	6120      	str	r0, [r4, #16]
 800a732:	b15b      	cbz	r3, 800a74c <__smakebuf_r+0x74>
 800a734:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a738:	4630      	mov	r0, r6
 800a73a:	f000 f8c9 	bl	800a8d0 <_isatty_r>
 800a73e:	b128      	cbz	r0, 800a74c <__smakebuf_r+0x74>
 800a740:	89a3      	ldrh	r3, [r4, #12]
 800a742:	f023 0303 	bic.w	r3, r3, #3
 800a746:	f043 0301 	orr.w	r3, r3, #1
 800a74a:	81a3      	strh	r3, [r4, #12]
 800a74c:	89a0      	ldrh	r0, [r4, #12]
 800a74e:	4305      	orrs	r5, r0
 800a750:	81a5      	strh	r5, [r4, #12]
 800a752:	e7cd      	b.n	800a6f0 <__smakebuf_r+0x18>
 800a754:	0800a4e9 	.word	0x0800a4e9

0800a758 <_raise_r>:
 800a758:	291f      	cmp	r1, #31
 800a75a:	b538      	push	{r3, r4, r5, lr}
 800a75c:	4604      	mov	r4, r0
 800a75e:	460d      	mov	r5, r1
 800a760:	d904      	bls.n	800a76c <_raise_r+0x14>
 800a762:	2316      	movs	r3, #22
 800a764:	6003      	str	r3, [r0, #0]
 800a766:	f04f 30ff 	mov.w	r0, #4294967295
 800a76a:	bd38      	pop	{r3, r4, r5, pc}
 800a76c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a76e:	b112      	cbz	r2, 800a776 <_raise_r+0x1e>
 800a770:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a774:	b94b      	cbnz	r3, 800a78a <_raise_r+0x32>
 800a776:	4620      	mov	r0, r4
 800a778:	f000 f830 	bl	800a7dc <_getpid_r>
 800a77c:	462a      	mov	r2, r5
 800a77e:	4601      	mov	r1, r0
 800a780:	4620      	mov	r0, r4
 800a782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a786:	f000 b817 	b.w	800a7b8 <_kill_r>
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d00a      	beq.n	800a7a4 <_raise_r+0x4c>
 800a78e:	1c59      	adds	r1, r3, #1
 800a790:	d103      	bne.n	800a79a <_raise_r+0x42>
 800a792:	2316      	movs	r3, #22
 800a794:	6003      	str	r3, [r0, #0]
 800a796:	2001      	movs	r0, #1
 800a798:	e7e7      	b.n	800a76a <_raise_r+0x12>
 800a79a:	2400      	movs	r4, #0
 800a79c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	4798      	blx	r3
 800a7a4:	2000      	movs	r0, #0
 800a7a6:	e7e0      	b.n	800a76a <_raise_r+0x12>

0800a7a8 <raise>:
 800a7a8:	4b02      	ldr	r3, [pc, #8]	; (800a7b4 <raise+0xc>)
 800a7aa:	4601      	mov	r1, r0
 800a7ac:	6818      	ldr	r0, [r3, #0]
 800a7ae:	f7ff bfd3 	b.w	800a758 <_raise_r>
 800a7b2:	bf00      	nop
 800a7b4:	2000000c 	.word	0x2000000c

0800a7b8 <_kill_r>:
 800a7b8:	b538      	push	{r3, r4, r5, lr}
 800a7ba:	4d07      	ldr	r5, [pc, #28]	; (800a7d8 <_kill_r+0x20>)
 800a7bc:	2300      	movs	r3, #0
 800a7be:	4604      	mov	r4, r0
 800a7c0:	4608      	mov	r0, r1
 800a7c2:	4611      	mov	r1, r2
 800a7c4:	602b      	str	r3, [r5, #0]
 800a7c6:	f7f7 fd83 	bl	80022d0 <_kill>
 800a7ca:	1c43      	adds	r3, r0, #1
 800a7cc:	d102      	bne.n	800a7d4 <_kill_r+0x1c>
 800a7ce:	682b      	ldr	r3, [r5, #0]
 800a7d0:	b103      	cbz	r3, 800a7d4 <_kill_r+0x1c>
 800a7d2:	6023      	str	r3, [r4, #0]
 800a7d4:	bd38      	pop	{r3, r4, r5, pc}
 800a7d6:	bf00      	nop
 800a7d8:	20000650 	.word	0x20000650

0800a7dc <_getpid_r>:
 800a7dc:	f7f7 bd70 	b.w	80022c0 <_getpid>

0800a7e0 <__sread>:
 800a7e0:	b510      	push	{r4, lr}
 800a7e2:	460c      	mov	r4, r1
 800a7e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7e8:	f000 f894 	bl	800a914 <_read_r>
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	bfab      	itete	ge
 800a7f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a7f2:	89a3      	ldrhlt	r3, [r4, #12]
 800a7f4:	181b      	addge	r3, r3, r0
 800a7f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a7fa:	bfac      	ite	ge
 800a7fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a7fe:	81a3      	strhlt	r3, [r4, #12]
 800a800:	bd10      	pop	{r4, pc}

0800a802 <__swrite>:
 800a802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a806:	461f      	mov	r7, r3
 800a808:	898b      	ldrh	r3, [r1, #12]
 800a80a:	05db      	lsls	r3, r3, #23
 800a80c:	4605      	mov	r5, r0
 800a80e:	460c      	mov	r4, r1
 800a810:	4616      	mov	r6, r2
 800a812:	d505      	bpl.n	800a820 <__swrite+0x1e>
 800a814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a818:	2302      	movs	r3, #2
 800a81a:	2200      	movs	r2, #0
 800a81c:	f000 f868 	bl	800a8f0 <_lseek_r>
 800a820:	89a3      	ldrh	r3, [r4, #12]
 800a822:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a826:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a82a:	81a3      	strh	r3, [r4, #12]
 800a82c:	4632      	mov	r2, r6
 800a82e:	463b      	mov	r3, r7
 800a830:	4628      	mov	r0, r5
 800a832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a836:	f000 b817 	b.w	800a868 <_write_r>

0800a83a <__sseek>:
 800a83a:	b510      	push	{r4, lr}
 800a83c:	460c      	mov	r4, r1
 800a83e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a842:	f000 f855 	bl	800a8f0 <_lseek_r>
 800a846:	1c43      	adds	r3, r0, #1
 800a848:	89a3      	ldrh	r3, [r4, #12]
 800a84a:	bf15      	itete	ne
 800a84c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a84e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a852:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a856:	81a3      	strheq	r3, [r4, #12]
 800a858:	bf18      	it	ne
 800a85a:	81a3      	strhne	r3, [r4, #12]
 800a85c:	bd10      	pop	{r4, pc}

0800a85e <__sclose>:
 800a85e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a862:	f000 b813 	b.w	800a88c <_close_r>
	...

0800a868 <_write_r>:
 800a868:	b538      	push	{r3, r4, r5, lr}
 800a86a:	4d07      	ldr	r5, [pc, #28]	; (800a888 <_write_r+0x20>)
 800a86c:	4604      	mov	r4, r0
 800a86e:	4608      	mov	r0, r1
 800a870:	4611      	mov	r1, r2
 800a872:	2200      	movs	r2, #0
 800a874:	602a      	str	r2, [r5, #0]
 800a876:	461a      	mov	r2, r3
 800a878:	f7f7 fd61 	bl	800233e <_write>
 800a87c:	1c43      	adds	r3, r0, #1
 800a87e:	d102      	bne.n	800a886 <_write_r+0x1e>
 800a880:	682b      	ldr	r3, [r5, #0]
 800a882:	b103      	cbz	r3, 800a886 <_write_r+0x1e>
 800a884:	6023      	str	r3, [r4, #0]
 800a886:	bd38      	pop	{r3, r4, r5, pc}
 800a888:	20000650 	.word	0x20000650

0800a88c <_close_r>:
 800a88c:	b538      	push	{r3, r4, r5, lr}
 800a88e:	4d06      	ldr	r5, [pc, #24]	; (800a8a8 <_close_r+0x1c>)
 800a890:	2300      	movs	r3, #0
 800a892:	4604      	mov	r4, r0
 800a894:	4608      	mov	r0, r1
 800a896:	602b      	str	r3, [r5, #0]
 800a898:	f7f7 fd6d 	bl	8002376 <_close>
 800a89c:	1c43      	adds	r3, r0, #1
 800a89e:	d102      	bne.n	800a8a6 <_close_r+0x1a>
 800a8a0:	682b      	ldr	r3, [r5, #0]
 800a8a2:	b103      	cbz	r3, 800a8a6 <_close_r+0x1a>
 800a8a4:	6023      	str	r3, [r4, #0]
 800a8a6:	bd38      	pop	{r3, r4, r5, pc}
 800a8a8:	20000650 	.word	0x20000650

0800a8ac <_fstat_r>:
 800a8ac:	b538      	push	{r3, r4, r5, lr}
 800a8ae:	4d07      	ldr	r5, [pc, #28]	; (800a8cc <_fstat_r+0x20>)
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	4608      	mov	r0, r1
 800a8b6:	4611      	mov	r1, r2
 800a8b8:	602b      	str	r3, [r5, #0]
 800a8ba:	f7f7 fd68 	bl	800238e <_fstat>
 800a8be:	1c43      	adds	r3, r0, #1
 800a8c0:	d102      	bne.n	800a8c8 <_fstat_r+0x1c>
 800a8c2:	682b      	ldr	r3, [r5, #0]
 800a8c4:	b103      	cbz	r3, 800a8c8 <_fstat_r+0x1c>
 800a8c6:	6023      	str	r3, [r4, #0]
 800a8c8:	bd38      	pop	{r3, r4, r5, pc}
 800a8ca:	bf00      	nop
 800a8cc:	20000650 	.word	0x20000650

0800a8d0 <_isatty_r>:
 800a8d0:	b538      	push	{r3, r4, r5, lr}
 800a8d2:	4d06      	ldr	r5, [pc, #24]	; (800a8ec <_isatty_r+0x1c>)
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	4604      	mov	r4, r0
 800a8d8:	4608      	mov	r0, r1
 800a8da:	602b      	str	r3, [r5, #0]
 800a8dc:	f7f7 fd67 	bl	80023ae <_isatty>
 800a8e0:	1c43      	adds	r3, r0, #1
 800a8e2:	d102      	bne.n	800a8ea <_isatty_r+0x1a>
 800a8e4:	682b      	ldr	r3, [r5, #0]
 800a8e6:	b103      	cbz	r3, 800a8ea <_isatty_r+0x1a>
 800a8e8:	6023      	str	r3, [r4, #0]
 800a8ea:	bd38      	pop	{r3, r4, r5, pc}
 800a8ec:	20000650 	.word	0x20000650

0800a8f0 <_lseek_r>:
 800a8f0:	b538      	push	{r3, r4, r5, lr}
 800a8f2:	4d07      	ldr	r5, [pc, #28]	; (800a910 <_lseek_r+0x20>)
 800a8f4:	4604      	mov	r4, r0
 800a8f6:	4608      	mov	r0, r1
 800a8f8:	4611      	mov	r1, r2
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	602a      	str	r2, [r5, #0]
 800a8fe:	461a      	mov	r2, r3
 800a900:	f7f7 fd60 	bl	80023c4 <_lseek>
 800a904:	1c43      	adds	r3, r0, #1
 800a906:	d102      	bne.n	800a90e <_lseek_r+0x1e>
 800a908:	682b      	ldr	r3, [r5, #0]
 800a90a:	b103      	cbz	r3, 800a90e <_lseek_r+0x1e>
 800a90c:	6023      	str	r3, [r4, #0]
 800a90e:	bd38      	pop	{r3, r4, r5, pc}
 800a910:	20000650 	.word	0x20000650

0800a914 <_read_r>:
 800a914:	b538      	push	{r3, r4, r5, lr}
 800a916:	4d07      	ldr	r5, [pc, #28]	; (800a934 <_read_r+0x20>)
 800a918:	4604      	mov	r4, r0
 800a91a:	4608      	mov	r0, r1
 800a91c:	4611      	mov	r1, r2
 800a91e:	2200      	movs	r2, #0
 800a920:	602a      	str	r2, [r5, #0]
 800a922:	461a      	mov	r2, r3
 800a924:	f7f7 fcee 	bl	8002304 <_read>
 800a928:	1c43      	adds	r3, r0, #1
 800a92a:	d102      	bne.n	800a932 <_read_r+0x1e>
 800a92c:	682b      	ldr	r3, [r5, #0]
 800a92e:	b103      	cbz	r3, 800a932 <_read_r+0x1e>
 800a930:	6023      	str	r3, [r4, #0]
 800a932:	bd38      	pop	{r3, r4, r5, pc}
 800a934:	20000650 	.word	0x20000650

0800a938 <_init>:
 800a938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a93a:	bf00      	nop
 800a93c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a93e:	bc08      	pop	{r3}
 800a940:	469e      	mov	lr, r3
 800a942:	4770      	bx	lr

0800a944 <_fini>:
 800a944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a946:	bf00      	nop
 800a948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a94a:	bc08      	pop	{r3}
 800a94c:	469e      	mov	lr, r3
 800a94e:	4770      	bx	lr
